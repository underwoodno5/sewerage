{"version":3,"file":"tf-backend-webgl.es2017.min.js","sources":["../src/canvas_util.ts","../src/tex_util.ts","../src/webgl_util.ts","../src/flags_webgl.ts","../src/glsl_version.ts","../src/shader_compiler_util.ts","../src/decode_matrix_gpu.ts","../src/decode_matrix_packed_gpu.ts","../src/encode_float_gpu.ts","../src/encode_float_packed_gpu.ts","../src/encode_matrix_gpu.ts","../src/encode_matrix_packed_gpu.ts","../src/gpgpu_util.ts","../src/gpgpu_context.ts","../src/shader_compiler.ts","../src/gpgpu_math.ts","../node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/binary_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Add.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/unary_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Ceil.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Equal.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Exp.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Expm1.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Floor.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Greater.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/GreaterEqual.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Less.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/LessEqual.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Log.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Maximum.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Minimum.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Multiply.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/NotEqual.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Rsqrt.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SquaredDifference.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/StringNGrams_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/StringSplit_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Sub.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/TopK_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Abs.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Bincount_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Concat_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/GatherNd_Impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/GatherV2_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/LinSpace_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Max_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Neg.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Prod.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Range_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Slice.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SparseFillEmptyRows_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SparseReshape_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SparseSegmentReduction_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/StridedSlice_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/StringToHashBucketFast_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Tile_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Transpose_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Unique_impl.js","../src/kernel_utils/shared.ts","../src/packing_util.ts","../src/pack_gpu.ts","../src/reshape_packed_gpu.ts","../src/texture_manager.ts","../src/unaryop_gpu.ts","../src/unaryop_packed_gpu.ts","../src/unpack_gpu.ts","../src/backend_webgl.ts","../src/webgl.ts","../src/base.ts","../src/binaryop_gpu.ts","../src/binaryop_packed_gpu.ts","../src/kernels/Identity.ts","../src/kernels/Complex.ts","../src/kernels/LeakyRelu.ts","../src/kernels/Prelu.ts","../src/kernel_utils/kernel_funcs_utils.ts","../src/mulmat_packed_gpu.ts","../src/binaryop_complex_gpu.ts","../src/kernels/Multiply.ts","../src/kernels/Reshape.ts","../src/kernel_utils/reshape.ts","../src/mean_gpu.ts","../src/reduce_gpu.ts","../src/kernel_utils/reduce.ts","../src/transpose_gpu.ts","../src/transpose_packed_gpu.ts","../src/kernels/Transpose_impl.ts","../src/kernels/Sum.ts","../src/kernels/Sum_impl.ts","../src/kernels/Transpose.ts","../src/kernels/BatchMatMul_impl.ts","../src/kernels/_FusedMatMul.ts","../src/kernels/Abs.ts","../src/kernels/Acos.ts","../src/kernels/Acosh.ts","../src/kernels/Add.ts","../src/addn_gpu.ts","../src/addn_packed_gpu.ts","../src/kernels/AddN.ts","../src/kernels/All.ts","../src/kernels/Any.ts","../src/argminmax_gpu.ts","../src/argminmax_packed_gpu.ts","../src/kernel_utils/arg_min_max.ts","../src/kernels/ArgMax.ts","../src/kernels/ArgMin.ts","../src/kernels/Asin.ts","../src/kernels/Asinh.ts","../src/kernels/Atan.ts","../src/kernels/Atan2.ts","../src/kernels/Atanh.ts","../src/pool_gpu.ts","../src/kernels/AvgPool.ts","../src/kernels/AvgPool3D.ts","../src/avg_pool_backprop_gpu.ts","../src/kernels/AvgPool3DGrad.ts","../src/kernels/AvgPoolGrad.ts","../src/kernels/BatchMatMul.ts","../src/batchnorm_gpu.ts","../src/batchnorm_packed_gpu.ts","../src/kernels/BatchNorm.ts","../src/slice_gpu.ts","../src/slice_packed_gpu.ts","../src/kernels/Slice.ts","../src/kernels/BatchToSpaceND.ts","../src/kernels/Bincount.ts","../src/kernels/NotEqual.ts","../src/kernels/Real.ts","../src/kernels/Cast.ts","../src/kernel_utils/int.ts","../src/kernels/Ceil.ts","../src/clip_gpu.ts","../src/clip_packed_gpu.ts","../src/kernels/ClipByValue.ts","../src/complex_abs_gpu.ts","../src/kernels/ComplexAbs.ts","../src/concat_gpu.ts","../src/concat_packed_gpu.ts","../src/kernels/Imag.ts","../src/kernels/Concat_impl.ts","../src/kernels/Concat.ts","../src/conv_gpu.ts","../src/im2col_packed_gpu.ts","../src/kernels/Conv2D_impl.ts","../src/kernels/Conv2D.ts","../src/conv_backprop_gpu.ts","../src/kernels/Conv2DBackpropFilter.ts","../src/kernels/Conv2DBackpropInput.ts","../src/kernels/Conv3D.ts","../src/kernels/Conv3DBackpropFilterV2.ts","../src/kernels/Conv3DBackpropInputV2.ts","../src/kernels/Cos.ts","../src/kernels/Cosh.ts","../src/crop_and_resize_gpu.ts","../src/kernels/CropAndResize.ts","../src/cumsum_gpu.ts","../src/kernels/Cumsum.ts","../src/kernels/DenseBincount.ts","../src/depth_to_space_gpu.ts","../src/kernels/DepthToSpace.ts","../src/conv_gpu_depthwise.ts","../src/conv_packed_gpu_depthwise.ts","../src/kernels/DepthwiseConv2dNative.ts","../src/conv_backprop_gpu_depthwise.ts","../src/kernels/DepthwiseConv2dNativeBackpropFilter.ts","../src/kernels/DepthwiseConv2dNativeBackpropInput.ts","../src/diag_gpu.ts","../src/kernels/Diag.ts","../src/dilation_gpu.ts","../src/kernels/Dilation2D.ts","../src/kernels/Einsum.ts","../src/kernels/Elu.ts","../src/kernels/EluGrad.ts","../src/kernels/Equal.ts","../src/kernels/Erf.ts","../src/kernels/Exp.ts","../src/kernels/ExpandDims.ts","../src/kernels/Expm1.ts","../src/fft_gpu.ts","../src/kernels/FFT_impl.ts","../src/kernels/FFT.ts","../src/fill_gpu.ts","../src/kernels/Fill.ts","../src/flip_left_right_gpu.ts","../src/kernels/FlipLeftRight.ts","../src/kernels/Floor.ts","../src/kernels/FloorDiv.ts","../src/kernels/FromPixels_utils/from_pixels_gpu.ts","../src/kernels/FromPixels_utils/from_pixels_packed_gpu.ts","../src/kernels/FromPixels.ts","../src/kernels/FusedConv2D.ts","../src/kernels/FusedDepthwiseConv2D.ts","../src/gather_nd_gpu.ts","../src/kernels/GatherNd.ts","../src/gather_gpu.ts","../src/kernels/GatherV2.ts","../src/kernels/Greater.ts","../src/kernels/GreaterEqual.ts","../src/kernels/IFFT.ts","../src/kernels/IsFinite.ts","../src/kernels/IsInf.ts","../src/kernels/IsNaN.ts","../src/kernels/Less.ts","../src/kernels/LessEqual.ts","../src/kernels/LinSpace.ts","../src/kernels/Log.ts","../src/kernels/Log1p.ts","../src/kernels/LogicalAnd.ts","../src/kernels/LogicalNot.ts","../src/kernels/LogicalOr.ts","../src/lrn_gpu.ts","../src/lrn_packed_gpu.ts","../src/kernels/LRN.ts","../src/lrn_grad_gpu.ts","../src/kernels/LRNGrad.ts","../src/kernels/Max.ts","../src/kernels/Max_impl.ts","../src/kernels/Maximum.ts","../src/kernels/MaxPool.ts","../src/kernels/MaxPool3D.ts","../src/max_pool_backprop_gpu.ts","../src/kernels/MaxPool3DGrad.ts","../src/kernels/MaxPoolGrad.ts","../src/kernels/MaxPoolWithArgmax.ts","../src/kernels/MaxPoolWithArgmax_impl.ts","../src/kernels/Mean.ts","../src/kernels/Mean_impl.ts","../src/kernels/Min.ts","../src/kernels/Minimum.ts","../src/mirror_pad_gpu.ts","../src/mirror_pad_packed_gpu.ts","../src/kernels/MirrorPad.ts","../src/kernels/Mod.ts","../src/multinomial_gpu.ts","../src/kernels/RealDiv.ts","../src/kernels/Sub.ts","../src/kernels/Softmax.ts","../src/kernels/Multinomial.ts","../src/kernels/Neg.ts","../src/kernels/NonMaxSuppressionV3.ts","../src/kernels/NonMaxSuppressionV4.ts","../src/kernels/NonMaxSuppressionV5.ts","../src/onehot_gpu.ts","../src/kernels/OneHot.ts","../src/kernels/ZerosLike.ts","../src/kernels/OnesLike.ts","../src/kernels/Pack.ts","../src/pad_gpu.ts","../src/pad_packed_gpu.ts","../src/kernels/PadV2.ts","../src/kernels/Pow.ts","../src/kernels/Prod.ts","../src/kernels/Range.ts","../src/kernels/Reciprocal.ts","../src/kernels/Relu.ts","../src/kernels/Relu6.ts","../src/resize_bilinear_gpu.ts","../src/resize_bilinear_packed_gpu.ts","../src/kernels/ResizeBilinear.ts","../src/resize_bilinear_backprop_gpu.ts","../src/kernels/ResizeBilinearGrad.ts","../src/resize_nearest_neighbor_gpu.ts","../src/resize_nearest_neighbor_packed_gpu.ts","../src/kernels/ResizeNearestNeighbor.ts","../src/resize_nearest_neighbor_backprop_gpu.ts","../src/kernels/ResizeNearestNeighborGrad.ts","../src/reverse_gpu.ts","../src/reverse_packed_gpu.ts","../src/kernels/Reverse.ts","../src/rotate_gpu.ts","../src/kernels/RotateWithOffset.ts","../src/kernels/Round.ts","../src/kernels/Rsqrt.ts","../src/scatter_gpu.ts","../src/kernels/ScatterNd.ts","../src/select_gpu.ts","../src/kernels/Select.ts","../src/kernels/Selu.ts","../src/kernels/Sigmoid.ts","../src/kernels/Sign.ts","../src/kernels/Sin.ts","../src/kernels/Sinh.ts","../src/kernels/Softplus.ts","../src/kernels/SpaceToBatchND.ts","../src/kernels/SparseFillEmptyRows.ts","../src/kernels/SparseReshape.ts","../src/kernels/SparseSegmentMean.ts","../src/kernels/SparseSegmentSum.ts","../src/kernels/SparseToDense.ts","../src/kernels/SplitV.ts","../src/kernels/Sqrt.ts","../src/kernels/Square.ts","../src/kernels/SquaredDifference.ts","../src/kernels/Step.ts","../src/strided_slice_gpu.ts","../src/kernels/StridedSlice.ts","../src/kernels/StringNGrams.ts","../src/kernels/StringSplit.ts","../src/kernels/StringToHashBucketFast.ts","../src/kernels/Tan.ts","../src/kernels/Tanh.ts","../src/tile_gpu.ts","../src/kernels/Tile.ts","../src/top_k_gpu.ts","../src/kernels/TopK.ts","../src/transform_gpu.ts","../src/kernels/Transform.ts","../src/kernels/Unique.ts","../src/kernels/Unpack.ts","../src/segment_gpu.ts","../src/kernels/UnsortedSegmentSum.ts","../src/register_all_kernels.ts","../src/version.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nconst contexts: {[key: string]: WebGLRenderingContext} = {};\n\nconst WEBGL_ATTRIBUTES: WebGLContextAttributes = {\n  alpha: false,\n  antialias: false,\n  premultipliedAlpha: false,\n  preserveDrawingBuffer: false,\n  depth: false,\n  stencil: false,\n  failIfMajorPerformanceCaveat: true\n};\n\nexport function clearWebGLContext(webGLVersion: number) {\n  delete contexts[webGLVersion];\n}\n\nexport function setWebGLContext(\n    webGLVersion: number, gl: WebGLRenderingContext) {\n  contexts[webGLVersion] = gl;\n}\n\nexport function getWebGLContext(webGLVersion: number): WebGLRenderingContext {\n  if (!(webGLVersion in contexts)) {\n    const newCtx = getWebGLRenderingContext(webGLVersion);\n    if (newCtx !== null) {\n      contexts[webGLVersion] = newCtx;\n    } else {\n      console.log('Could not get context for WebGL version', webGLVersion);\n      return null;\n    }\n  }\n  const gl = contexts[webGLVersion];\n  if (gl.isContextLost()) {\n    delete contexts[webGLVersion];\n    return getWebGLContext(webGLVersion);\n  }\n\n  gl.disable(gl.DEPTH_TEST);\n  gl.disable(gl.STENCIL_TEST);\n  gl.disable(gl.BLEND);\n  gl.disable(gl.DITHER);\n  gl.disable(gl.POLYGON_OFFSET_FILL);\n  gl.disable(gl.SAMPLE_COVERAGE);\n  gl.enable(gl.SCISSOR_TEST);\n  gl.enable(gl.CULL_FACE);\n  gl.cullFace(gl.BACK);\n\n  return contexts[webGLVersion];\n}\n\nfunction createCanvas(webGLVersion: number) {\n  if (typeof OffscreenCanvas !== 'undefined' && webGLVersion === 2) {\n    return new OffscreenCanvas(300, 150);\n  } else if (typeof document !== 'undefined') {\n    return document.createElement('canvas');\n  } else {\n    throw new Error('Cannot create a canvas in this context');\n  }\n}\n\nfunction getWebGLRenderingContext(webGLVersion: number): WebGLRenderingContext {\n  if (webGLVersion !== 1 && webGLVersion !== 2) {\n    throw new Error('Cannot get WebGL rendering context, WebGL is disabled.');\n  }\n  const canvas = createCanvas(webGLVersion);\n\n  canvas.addEventListener('webglcontextlost', (ev: Event) => {\n    ev.preventDefault();\n    delete contexts[webGLVersion];\n  }, false);\n  if (webGLVersion === 1) {\n    return (canvas.getContext('webgl', WEBGL_ATTRIBUTES) ||\n            canvas.getContext('experimental-webgl', WEBGL_ATTRIBUTES)) as\n        WebGLRenderingContext;\n  }\n  return canvas.getContext('webgl2', WEBGL_ATTRIBUTES) as WebGLRenderingContext;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataId, DataType, env, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nexport enum PackingScheme {\n  /**\n   * All values in a single texel are densely packed without any constraints.\n   *\n   * This is how the shader encodes a tensor with shape = [2, 3, 4]\n   * (indices are [batch, row, col]).\n   *\n   * 000|001   010|011   020|021\n   * -------   -------   -------\n   * 002|003   012|013   022|023\n   *\n   * 100|101   110|111   120|121\n   * -------   -------   -------\n   * 102|103   112|113   122|123\n   *\n   */\n  DENSE,\n\n  /**\n   * Single texels contain only values from the same batch, and from adjacent\n   * rows and columns.\n   *\n   * This is how the shader encodes a tensor with shape = [2, 3, 5]\n   * (indices are [batch, row, col]).\n   *\n   * 000|001   002|003   004|xxx   020|021   022|023   024|xxx\n   * -------   -------   -------   -------   -------   -------\n   * 010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n   *\n   * 100|101   102|103   104|xxx   120|121   122|123   124|xxx\n   * -------   -------   -------   -------   -------   -------\n   * 110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n   *\n   */\n  SHARED_BATCH\n}\n\nexport enum TextureUsage {\n  RENDER,\n  UPLOAD,\n  PIXELS,\n  DOWNLOAD\n}\n\nexport enum PhysicalTextureType {\n  UNPACKED_FLOAT16,\n  UNPACKED_FLOAT32,\n  PACKED_4X1_UNSIGNED_BYTE,\n  PACKED_2X2_FLOAT32,\n  PACKED_2X2_FLOAT16\n}\n\nexport interface TextureData {\n  // Required.\n  shape: number[];\n  dtype: DataType;\n\n  // Optional.\n  values?: backend_util.BackendValues;\n  texture?: WebGLTexture;\n  // For complex numbers, the real and imaginary parts are stored as their own\n  // individual tensorInfos, with a parent joining the two with the\n  // complexTensors field. When this is defined, texture will be null.\n  complexTensorInfos?: {real: TensorInfo, imag: TensorInfo};\n  /** [rows, columns] shape of the texture. */\n  texShape?: [number, number];\n  usage?: TextureUsage;\n  isPacked?: boolean;\n\n  refCount: number;\n\n  // Available when the tensor has been sliced.\n  slice?: {\n    // Offset in the 'flat index' space.\n    flatOffset: number;\n    // Used for counting how many sliced tensors point to the same texture.\n    origDataId: DataId;\n  };\n}\n\nexport function getUnpackedMatrixTextureShapeWidthHeight(\n    rows: number, columns: number): [number, number] {\n  return [columns, rows];\n}\n\nexport function getUnpackedArraySizeFromMatrixSize(\n    matrixSize: number, channelsPerTexture: number): number {\n  return matrixSize * channelsPerTexture;\n}\n\nexport function getColorMatrixTextureShapeWidthHeight(\n    rows: number, columns: number): [number, number] {\n  return [columns * 4, rows];\n}\n\n/**\n * Get shape for densely packed RGBA texture.\n */\nexport function getDenseTexShape(shape: number[]): [number, number] {\n  const size = util.sizeFromShape(shape);\n  const texelsNeeded = Math.ceil(size / 4);\n  return util.sizeToSquarishShape(texelsNeeded);\n}\n\nexport function getMatrixSizeFromUnpackedArraySize(\n    unpackedSize: number, channelsPerTexture: number): number {\n  if (unpackedSize % channelsPerTexture !== 0) {\n    throw new Error(\n        `unpackedSize (${unpackedSize}) must be a multiple of ` +\n        `${channelsPerTexture}`);\n  }\n  return unpackedSize / channelsPerTexture;\n}\n\nexport function decodeMatrixFromUnpackedColorRGBAArray(\n    unpackedArray: Float32Array, matrix: Float32Array, channels: number) {\n  const requiredSize = unpackedArray.length * channels / 4;\n  if (matrix.length < requiredSize) {\n    throw new Error(\n        `matrix length (${matrix.length}) must be >= ${requiredSize}`);\n  }\n  let dst = 0;\n  for (let src = 0; src < unpackedArray.length; src += 4) {\n    for (let c = 0; c < channels; c++) {\n      matrix[dst++] = unpackedArray[src + c];\n    }\n  }\n}\n\nexport function getPackedMatrixTextureShapeWidthHeight(\n    rows: number, columns: number): [number, number] {\n  return [\n    Math.max(1, Math.ceil(columns / 2)), Math.max(1, Math.ceil(rows / 2))\n  ];\n}\n\nexport function getPackedRGBAArraySizeFromMatrixShape(\n    rows: number, columns: number): number {\n  const [w, h] = getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return w * h * 4;\n}\n\nexport interface TextureConfig {\n  internalFormatFloat: number;\n  textureFormatFloat: number;\n  internalFormatPackedHalfFloat: number;\n  internalFormatHalfFloat: number;\n  internalFormatPackedFloat: number;\n\n  // The format to use during a gl.readPixels call.\n  downloadTextureFormat: number;\n  // How many channels need to be unpacked after a gl.readPixels call.\n  downloadUnpackNumChannels: number;\n\n  defaultNumChannels: number;\n  textureTypeHalfFloat: number;\n  textureTypeFloat: number;\n}\n\nexport function getTextureConfig(\n    // tslint:disable-next-line:no-any\n    gl: WebGLRenderingContext, textureHalfFloatExtension?: any): TextureConfig {\n  // tslint:disable-next-line:no-any\n  const glany = gl as any;\n\n  let internalFormatFloat: number;\n  let internalFormatHalfFloat: number;\n  let internalFormatPackedHalfFloat: number;\n  let internalFormatPackedFloat: number;\n  let textureFormatFloat: number;\n\n  let downloadTextureFormat: number;\n  let downloadUnpackNumChannels: number;\n\n  let defaultNumChannels: number;\n  let textureTypeHalfFloat: number;\n  let textureTypeFloat: number;\n\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    internalFormatFloat = glany.R32F;\n    internalFormatHalfFloat = glany.R16F;\n    internalFormatPackedHalfFloat = glany.RGBA16F;\n    internalFormatPackedFloat = glany.RGBA32F;\n    textureFormatFloat = glany.RED;\n    downloadUnpackNumChannels = 4;\n    defaultNumChannels = 1;\n    textureTypeHalfFloat = glany.HALF_FLOAT;\n    textureTypeFloat = glany.FLOAT;\n  } else {\n    internalFormatFloat = gl.RGBA;\n    internalFormatHalfFloat = gl.RGBA;\n    internalFormatPackedHalfFloat = gl.RGBA;\n    internalFormatPackedFloat = glany.RGBA;\n    textureFormatFloat = gl.RGBA;\n    downloadUnpackNumChannels = 4;\n    defaultNumChannels = 4;\n    textureTypeHalfFloat = textureHalfFloatExtension != null ?\n        textureHalfFloatExtension.HALF_FLOAT_OES :\n        null;\n    textureTypeFloat = gl.FLOAT;\n  }\n  downloadTextureFormat = gl.RGBA;\n\n  return {\n    internalFormatFloat,\n    internalFormatHalfFloat,\n    internalFormatPackedHalfFloat,\n    internalFormatPackedFloat,\n    textureFormatFloat,\n    downloadTextureFormat,\n    downloadUnpackNumChannels,\n    defaultNumChannels,\n    textureTypeHalfFloat,\n    textureTypeFloat\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {getWebGLContext} from './canvas_util';\nimport {getTextureConfig} from './tex_util';\n\nexport function callAndCheck<T>(gl: WebGLRenderingContext, func: () => T): T {\n  const returnValue = func();\n  if (env().getBool('DEBUG')) {\n    checkWebGLError(gl);\n  }\n  return returnValue;\n}\n\nfunction checkWebGLError(gl: WebGLRenderingContext) {\n  const error = gl.getError();\n  if (error !== gl.NO_ERROR) {\n    throw new Error('WebGL Error: ' + getWebGLErrorMessage(gl, error));\n  }\n}\n\n// https://en.wikipedia.org/wiki/Half-precision_floating-point_format\nconst MIN_FLOAT16 = 5.96e-8;\nconst MAX_FLOAT16 = 65504;\n\nexport function canBeRepresented(num: number): boolean {\n  if (env().getBool('WEBGL_RENDER_FLOAT32_ENABLED') || num === 0 ||\n      (MIN_FLOAT16 < Math.abs(num) && Math.abs(num) < MAX_FLOAT16)) {\n    return true;\n  }\n  return false;\n}\n\nexport function getWebGLErrorMessage(\n    gl: WebGLRenderingContext, status: number): string {\n  switch (status) {\n    case gl.NO_ERROR:\n      return 'NO_ERROR';\n    case gl.INVALID_ENUM:\n      return 'INVALID_ENUM';\n    case gl.INVALID_VALUE:\n      return 'INVALID_VALUE';\n    case gl.INVALID_OPERATION:\n      return 'INVALID_OPERATION';\n    case gl.INVALID_FRAMEBUFFER_OPERATION:\n      return 'INVALID_FRAMEBUFFER_OPERATION';\n    case gl.OUT_OF_MEMORY:\n      return 'OUT_OF_MEMORY';\n    case gl.CONTEXT_LOST_WEBGL:\n      return 'CONTEXT_LOST_WEBGL';\n    default:\n      return `Unknown error code ${status}`;\n  }\n}\n\nexport function getExtensionOrThrow(\n    gl: WebGLRenderingContext, extensionName: string): {} {\n  return throwIfNull<{}>(\n      gl, () => gl.getExtension(extensionName),\n      'Extension \"' + extensionName + '\" not supported on this browser.');\n}\n\nexport function createVertexShader(\n    gl: WebGLRenderingContext, vertexShaderSource: string): WebGLShader {\n  const vertexShader: WebGLShader = throwIfNull<WebGLShader>(\n      gl, () => gl.createShader(gl.VERTEX_SHADER),\n      'Unable to create vertex WebGLShader.');\n  callAndCheck(gl, () => gl.shaderSource(vertexShader, vertexShaderSource));\n  callAndCheck(gl, () => gl.compileShader(vertexShader));\n  if (gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS) === false) {\n    console.log(gl.getShaderInfoLog(vertexShader));\n    throw new Error('Failed to compile vertex shader.');\n  }\n  return vertexShader;\n}\n\nexport function createFragmentShader(\n    gl: WebGLRenderingContext, fragmentShaderSource: string): WebGLShader {\n  const fragmentShader: WebGLShader = throwIfNull<WebGLShader>(\n      gl, () => gl.createShader(gl.FRAGMENT_SHADER),\n      'Unable to create fragment WebGLShader.');\n  callAndCheck(gl, () => gl.shaderSource(fragmentShader, fragmentShaderSource));\n  callAndCheck(gl, () => gl.compileShader(fragmentShader));\n  if (gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS) === false) {\n    logShaderSourceAndInfoLog(\n        fragmentShaderSource, gl.getShaderInfoLog(fragmentShader));\n    throw new Error('Failed to compile fragment shader.');\n  }\n  return fragmentShader;\n}\n\nconst lineNumberRegex = /ERROR: [0-9]+:([0-9]+):/g;\nfunction logShaderSourceAndInfoLog(\n    shaderSource: string, shaderInfoLog: string) {\n  const lineNumberRegexResult = lineNumberRegex.exec(shaderInfoLog);\n  if (lineNumberRegexResult == null) {\n    console.log(`Couldn't parse line number in error: ${shaderInfoLog}`);\n    console.log(shaderSource);\n    return;\n  }\n\n  const lineNumber = +lineNumberRegexResult[1];\n\n  const shaderLines = shaderSource.split('\\n');\n  const pad = shaderLines.length.toString().length + 2;\n  const linesWithLineNumbers = shaderLines.map(\n      (line, lineNumber) =>\n          util.rightPad((lineNumber + 1).toString(), pad) + line);\n  let maxLineLength = 0;\n  for (let i = 0; i < linesWithLineNumbers.length; i++) {\n    maxLineLength = Math.max(linesWithLineNumbers[i].length, maxLineLength);\n  }\n\n  const beforeErrorLines = linesWithLineNumbers.slice(0, lineNumber - 1);\n  const errorLine = linesWithLineNumbers.slice(lineNumber - 1, lineNumber);\n  const afterErrorLines = linesWithLineNumbers.slice(lineNumber);\n\n  console.log(beforeErrorLines.join('\\n'));\n  console.log(shaderInfoLog.split('\\n')[0]);\n  console.log(\n      `%c ${util.rightPad(errorLine[0], maxLineLength)}`,\n      'border:1px solid red; background-color:#e3d2d2; color:#a61717');\n  console.log(afterErrorLines.join('\\n'));\n}\n\nexport function createProgram(gl: WebGLRenderingContext): WebGLProgram {\n  return throwIfNull<WebGLProgram>(\n      gl, () => gl.createProgram(), 'Unable to create WebGLProgram.');\n}\n\nexport function linkProgram(gl: WebGLRenderingContext, program: WebGLProgram) {\n  callAndCheck(gl, () => gl.linkProgram(program));\n  if (gl.getProgramParameter(program, gl.LINK_STATUS) === false) {\n    console.log(gl.getProgramInfoLog(program));\n    throw new Error('Failed to link vertex and fragment shaders.');\n  }\n}\n\nexport function validateProgram(\n    gl: WebGLRenderingContext, program: WebGLProgram) {\n  callAndCheck(gl, () => gl.validateProgram(program));\n  if (gl.getProgramParameter(program, gl.VALIDATE_STATUS) === false) {\n    console.log(gl.getProgramInfoLog(program));\n    throw new Error('Shader program validation failed.');\n  }\n}\n\nexport function createStaticVertexBuffer(\n    gl: WebGLRenderingContext, data: Float32Array): WebGLBuffer {\n  const buffer: WebGLBuffer = throwIfNull<WebGLBuffer>(\n      gl, () => gl.createBuffer(), 'Unable to create WebGLBuffer');\n  callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, buffer));\n  callAndCheck(gl, () => gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW));\n  return buffer;\n}\n\nexport function createStaticIndexBuffer(\n    gl: WebGLRenderingContext, data: Uint16Array): WebGLBuffer {\n  const buffer: WebGLBuffer = throwIfNull<WebGLBuffer>(\n      gl, () => gl.createBuffer(), 'Unable to create WebGLBuffer');\n  callAndCheck(gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer));\n  callAndCheck(\n      gl, () => gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, gl.STATIC_DRAW));\n  return buffer;\n}\n\nexport function getNumChannels(): number {\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    return 1;\n  }\n  return 4;\n}\n\nexport function createTexture(gl: WebGLRenderingContext): WebGLTexture {\n  return throwIfNull<WebGLTexture>(\n      gl, () => gl.createTexture(), 'Unable to create WebGLTexture.');\n}\n\nexport function validateTextureSize(width: number, height: number) {\n  const maxTextureSize = env().getNumber('WEBGL_MAX_TEXTURE_SIZE');\n  if ((width <= 0) || (height <= 0)) {\n    const requested = `[${width}x${height}]`;\n    throw new Error('Requested texture size ' + requested + ' is invalid.');\n  }\n  if ((width > maxTextureSize) || (height > maxTextureSize)) {\n    const requested = `[${width}x${height}]`;\n    const max = `[${maxTextureSize}x${maxTextureSize}]`;\n    throw new Error(\n        'Requested texture size ' + requested +\n        ' greater than WebGL maximum on this browser / GPU ' + max + '.');\n  }\n}\n\nexport function createFramebuffer(gl: WebGLRenderingContext): WebGLFramebuffer {\n  return throwIfNull<WebGLFramebuffer>(\n      gl, () => gl.createFramebuffer(), 'Unable to create WebGLFramebuffer.');\n}\n\nexport function bindVertexBufferToProgramAttribute(\n    gl: WebGLRenderingContext, program: WebGLProgram, attribute: string,\n    buffer: WebGLBuffer, arrayEntriesPerItem: number, itemStrideInBytes: number,\n    itemOffsetInBytes: number): boolean {\n  const loc = gl.getAttribLocation(program, attribute);\n  if (loc === -1) {\n    // The GPU compiler decided to strip out this attribute because it's unused,\n    // thus no need to bind.\n    return false;\n  }\n  callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, buffer));\n  callAndCheck(\n      gl,\n      () => gl.vertexAttribPointer(\n          loc, arrayEntriesPerItem, gl.FLOAT, false, itemStrideInBytes,\n          itemOffsetInBytes));\n  callAndCheck(gl, () => gl.enableVertexAttribArray(loc));\n  return true;\n}\n\nexport function bindTextureUnit(\n    gl: WebGLRenderingContext, texture: WebGLTexture, textureUnit: number) {\n  validateTextureUnit(gl, textureUnit);\n  callAndCheck(gl, () => gl.activeTexture(gl.TEXTURE0 + textureUnit));\n  callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n}\n\nexport function unbindTextureUnit(\n    gl: WebGLRenderingContext, textureUnit: number) {\n  validateTextureUnit(gl, textureUnit);\n  callAndCheck(gl, () => gl.activeTexture(gl.TEXTURE0 + textureUnit));\n  callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\n\nexport function getProgramUniformLocationOrThrow(\n    gl: WebGLRenderingContext, program: WebGLProgram,\n    uniformName: string): WebGLUniformLocation {\n  return throwIfNull<WebGLUniformLocation>(\n      gl, () => gl.getUniformLocation(program, uniformName),\n      'uniform \"' + uniformName + '\" not present in program.');\n}\n\nexport function getProgramUniformLocation(\n    gl: WebGLRenderingContext, program: WebGLProgram,\n    uniformName: string): WebGLUniformLocation {\n  return gl.getUniformLocation(program, uniformName);\n}\n\nexport function bindTextureToProgramUniformSampler(\n    gl: WebGLRenderingContext, texture: WebGLTexture,\n    uniformSamplerLocation: WebGLUniformLocation, textureUnit: number) {\n  callAndCheck(gl, () => bindTextureUnit(gl, texture, textureUnit));\n  callAndCheck(gl, () => gl.uniform1i(uniformSamplerLocation, textureUnit));\n}\n\nexport function bindCanvasToFramebuffer(gl: WebGLRenderingContext) {\n  callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));\n  callAndCheck(gl, () => gl.viewport(0, 0, gl.canvas.width, gl.canvas.height));\n  callAndCheck(gl, () => gl.scissor(0, 0, gl.canvas.width, gl.canvas.height));\n}\n\nexport function bindColorTextureToFramebuffer(\n    gl: WebGLRenderingContext, texture: WebGLTexture,\n    framebuffer: WebGLFramebuffer) {\n  callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer));\n  callAndCheck(\n      gl,\n      () => gl.framebufferTexture2D(\n          gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0));\n}\n\nexport function unbindColorTextureFromFramebuffer(\n    gl: WebGLRenderingContext, framebuffer: WebGLFramebuffer) {\n  callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer));\n  callAndCheck(\n      gl,\n      () => gl.framebufferTexture2D(\n          gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, null, 0));\n}\n\nexport function validateFramebuffer(gl: WebGLRenderingContext) {\n  const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n  if (status !== gl.FRAMEBUFFER_COMPLETE) {\n    throw new Error(\n        'Error binding framebuffer: ' + getFramebufferErrorMessage(gl, status));\n  }\n}\n\nexport function getFramebufferErrorMessage(\n    gl: WebGLRenderingContext, status: number): string {\n  switch (status) {\n    case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:\n      return 'FRAMEBUFFER_INCOMPLETE_ATTACHMENT';\n    case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:\n      return 'FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT';\n    case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\n      return 'FRAMEBUFFER_INCOMPLETE_DIMENSIONS';\n    case gl.FRAMEBUFFER_UNSUPPORTED:\n      return 'FRAMEBUFFER_UNSUPPORTED';\n    default:\n      return `unknown error ${status}`;\n  }\n}\n\nfunction throwIfNull<T>(\n    gl: WebGLRenderingContext, returnTOrNull: () => T | null,\n    failureMessage: string): T {\n  const tOrNull: T|null = callAndCheck(gl, () => returnTOrNull());\n  if (tOrNull == null) {\n    throw new Error(failureMessage);\n  }\n  return tOrNull;\n}\n\nfunction validateTextureUnit(gl: WebGLRenderingContext, textureUnit: number) {\n  const maxTextureUnit = gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1;\n  const glTextureUnit = textureUnit + gl.TEXTURE0;\n  if (glTextureUnit < gl.TEXTURE0 || glTextureUnit > maxTextureUnit) {\n    const textureUnitRange = `[gl.TEXTURE0, gl.TEXTURE${maxTextureUnit}]`;\n    throw new Error(`textureUnit must be in ${textureUnitRange}.`);\n  }\n}\n\nexport function getBatchDim(shape: number[], dimsToSkip = 2): number {\n  return util.sizeFromShape(shape.slice(0, shape.length - dimsToSkip));\n}\n\nexport function getRowsCols(shape: number[]): [number, number] {\n  if (shape.length === 0) {\n    throw Error('Cannot get rows and columns of an empty shape array.');\n  }\n\n  return [\n    shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]\n  ];\n}\n\nexport function getShapeAs3D(shape: number[]): [number, number, number] {\n  let shapeAs3D: [number, number, number] = [1, 1, 1];\n  const isScalar = shape.length === 0 || (shape.length === 1 && shape[0] === 1);\n  if (!isScalar) {\n    shapeAs3D =\n        [getBatchDim(shape), ...getRowsCols(shape)] as [number, number, number];\n  }\n  return shapeAs3D;\n}\n\nexport function getTextureShapeFromLogicalShape(\n    logShape: number[], isPacked = false): [number, number] {\n  let maxTexSize = env().getNumber('WEBGL_MAX_TEXTURE_SIZE');\n  if (isPacked) {\n    maxTexSize = maxTexSize * 2;\n\n    // This logic ensures we accurately count the number of packed texels needed\n    // to accommodate the tensor. We can only pack values in the same texel if\n    // they are from adjacent pairs of rows/cols within the same batch. So if a\n    // tensor has 3 rows, we pretend it has 4 rows in order to account for the\n    // fact that the texels containing the third row are half empty.\n    logShape = logShape.map(\n        (d, i) => i >= logShape.length - 2 ?\n            util.nearestLargerEven(logShape[i]) :\n            logShape[i]);\n\n    // Packed texture height is at least 2 (the channel height of a single\n    // texel).\n    if (logShape.length === 1) {\n      logShape = [2, logShape[0]];\n    }\n  }\n\n  // If logical shape is 2, we don't squeeze, since we want to match physical.\n  if (logShape.length !== 2) {\n    const squeezeResult = util.squeezeShape(logShape);\n    logShape = squeezeResult.newShape;\n  }\n\n  let size = util.sizeFromShape(logShape);\n  if (logShape.length <= 1 && size <= maxTexSize) {\n    return [1, size];\n  } else if (\n      logShape.length === 2 && logShape[0] <= maxTexSize &&\n      logShape[1] <= maxTexSize) {\n    return logShape as [number, number];\n  } else if (\n      logShape.length === 3 && logShape[0] * logShape[1] <= maxTexSize &&\n      logShape[2] <= maxTexSize) {\n    return [logShape[0] * logShape[1], logShape[2]];\n  } else if (\n      logShape.length === 3 && logShape[0] <= maxTexSize &&\n      logShape[1] * logShape[2] <= maxTexSize) {\n    return [logShape[0], logShape[1] * logShape[2]];\n  } else if (\n      logShape.length === 4 &&\n      logShape[0] * logShape[1] * logShape[2] <= maxTexSize &&\n      logShape[3] <= maxTexSize) {\n    return [logShape[0] * logShape[1] * logShape[2], logShape[3]];\n  } else if (\n      logShape.length === 4 && logShape[0] <= maxTexSize &&\n      logShape[1] * logShape[2] * logShape[3] <= maxTexSize) {\n    return [logShape[0], logShape[1] * logShape[2] * logShape[3]];\n  } else {\n    if (isPacked) {\n      // For packed textures size equals the number of channels required to\n      // accommodate the texture data. However in order to squarify such that\n      // inner dimensions stay even, we rewrite size to equal the number of\n      // texels. Then in the return statement we rehydrate the squarified\n      // dimensions to channel units.\n\n      const batchDim = getBatchDim(logShape);\n      let rows = 2, cols = 2;\n      if (logShape.length) {\n        [rows, cols] = getRowsCols(logShape);\n      }\n      size = batchDim * (rows / 2) * (cols / 2);\n      return util.sizeToSquarishShape(size).map(d => d * 2) as [number, number];\n    }\n    return util.sizeToSquarishShape(size);\n  }\n}\n\nfunction isEven(n: number): boolean {\n  return n % 2 === 0;\n}\n\n/**\n * This determines whether reshaping a packed texture requires rearranging\n * the data within the texture, assuming 2x2 packing.\n */\nexport function isReshapeFree(shape1: number[], shape2: number[]): boolean {\n  shape1 = shape1.slice(-2);\n  shape2 = shape2.slice(-2);\n\n  if (util.arraysEqual(shape1, shape2)) {\n    return true;\n  }\n\n  if (!shape1.length || !shape2.length) {  // One of the shapes is a scalar.\n    return true;\n  }\n\n  if (shape1[0] === 0 || shape1[1] === 0 || shape2[0] === 0 ||\n      shape2[1] === 0) {\n    return true;\n  }\n\n  if (shape1.length !== shape2.length) {  // One of the shapes is a vector.\n    const shape1Cols = shape1.slice(-1)[0];\n    const shape2Cols = shape2.slice(-1)[0];\n    if (shape1Cols === shape2Cols) {\n      return true;\n    }\n\n    if (isEven(shape1Cols) && isEven(shape2Cols) &&\n        (shape1[0] === 1 || shape2[0] === 1)) {\n      return true;\n    }\n  }\n  return shape1[1] === shape2[1] && isEven(shape1[0]) && isEven(shape2[0]);\n}\n\n// We cache webgl params because the environment gets reset between\n// unit tests and we don't want to constantly query the WebGLContext for\n// MAX_TEXTURE_SIZE.\nlet MAX_TEXTURE_SIZE: number;\nlet MAX_TEXTURES_IN_SHADER: number;\n\nexport function getWebGLMaxTextureSize(webGLVersion: number): number {\n  if (MAX_TEXTURE_SIZE == null) {\n    const gl = getWebGLContext(webGLVersion);\n    MAX_TEXTURE_SIZE = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n  }\n  return MAX_TEXTURE_SIZE;\n}\n\nexport function resetMaxTextureSize() {\n  MAX_TEXTURE_SIZE = null;\n}\nexport function resetMaxTexturesInShader() {\n  MAX_TEXTURES_IN_SHADER = null;\n}\n\nexport function getMaxTexturesInShader(webGLVersion: number): number {\n  if (MAX_TEXTURES_IN_SHADER == null) {\n    const gl = getWebGLContext(webGLVersion);\n    MAX_TEXTURES_IN_SHADER = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n  }\n  // We cap at 16 to avoid spurious runtime \"memory exhausted\" error.\n  return Math.min(16, MAX_TEXTURES_IN_SHADER);\n}\n\nexport function getWebGLDisjointQueryTimerVersion(webGLVersion: number):\n    number {\n  if (webGLVersion === 0) {\n    return 0;\n  }\n\n  let queryTimerVersion: number;\n  const gl = getWebGLContext(webGLVersion);\n\n  if (hasExtension(gl, 'EXT_disjoint_timer_query_webgl2') &&\n      webGLVersion === 2) {\n    queryTimerVersion = 2;\n  } else if (hasExtension(gl, 'EXT_disjoint_timer_query')) {\n    queryTimerVersion = 1;\n  } else {\n    queryTimerVersion = 0;\n  }\n  return queryTimerVersion;\n}\n\nexport function hasExtension(gl: WebGLRenderingContext, extensionName: string) {\n  const ext = gl.getExtension(extensionName);\n  return ext != null;\n}\n\nexport function isWebGLVersionEnabled(webGLVersion: 1|2) {\n  try {\n    const gl = getWebGLContext(webGLVersion);\n    if (gl != null) {\n      return true;\n    }\n  } catch (e) {\n    console.log('Error when getting WebGL context: ', e);\n    return false;\n  }\n  return false;\n}\n\nexport function isCapableOfRenderingToFloatTexture(webGLVersion: number):\n    boolean {\n  if (webGLVersion === 0) {\n    return false;\n  }\n\n  const gl = getWebGLContext(webGLVersion);\n\n  if (webGLVersion === 1) {\n    if (!hasExtension(gl, 'OES_texture_float')) {\n      return false;\n    }\n  } else {\n    if (!hasExtension(gl, 'EXT_color_buffer_float')) {\n      return false;\n    }\n  }\n\n  const isFrameBufferComplete = createFloatTextureAndBindToFramebuffer(gl);\n  return isFrameBufferComplete;\n}\n\n/**\n * Check if we can download values from a float/half-float texture.\n *\n * Note that for performance reasons we use binding a texture to a framebuffer\n * as a proxy for ability to download float values later using readPixels. The\n * texture params of this texture will not match those in readPixels exactly\n * but if we are unable to bind some kind of float texture to the frameBuffer\n * then we definitely will not be able to read float values from it.\n */\nexport function isDownloadFloatTextureEnabled(webGLVersion: number): boolean {\n  if (webGLVersion === 0) {\n    return false;\n  }\n\n  const gl = getWebGLContext(webGLVersion);\n\n  if (webGLVersion === 1) {\n    if (!hasExtension(gl, 'OES_texture_float')) {\n      return false;\n    }\n    if (!hasExtension(gl, 'WEBGL_color_buffer_float')) {\n      return false;\n    }\n  } else {\n    if (hasExtension(gl, 'EXT_color_buffer_float')) {\n      return createFloatTextureAndBindToFramebuffer(gl);\n    }\n\n    const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';\n    if (hasExtension(gl, COLOR_BUFFER_HALF_FLOAT)) {\n      const textureHalfFloatExtension =\n          gl.getExtension(COLOR_BUFFER_HALF_FLOAT);\n      return createHalfFloatTextureAndBindToFramebuffer(\n          gl, textureHalfFloatExtension);\n    }\n\n    return false;\n  }\n\n  const isFrameBufferComplete = createFloatTextureAndBindToFramebuffer(gl);\n  return isFrameBufferComplete;\n}\n\nfunction createFloatTextureAndBindToFramebuffer(gl: WebGLRenderingContext):\n    boolean {\n  const texConfig = getTextureConfig(gl);\n\n  const texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n\n  const width = 1;\n  const height = 1;\n  gl.texImage2D(\n      gl.TEXTURE_2D, 0, texConfig.internalFormatFloat, width, height, 0,\n      texConfig.textureFormatFloat, texConfig.textureTypeFloat, null);\n\n  const frameBuffer = gl.createFramebuffer();\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n  gl.framebufferTexture2D(\n      gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n  const isFrameBufferComplete =\n      gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n\n  gl.bindTexture(gl.TEXTURE_2D, null);\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  gl.deleteTexture(texture);\n  gl.deleteFramebuffer(frameBuffer);\n\n  return isFrameBufferComplete;\n}\n\nfunction createHalfFloatTextureAndBindToFramebuffer(\n    // tslint:disable-next-line:no-any\n    gl: WebGLRenderingContext, textureHalfFloatExtension: any): boolean {\n  const texConfig = getTextureConfig(gl, textureHalfFloatExtension);\n  const texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n\n  const width = 1;\n  const height = 1;\n  gl.texImage2D(\n      gl.TEXTURE_2D, 0, texConfig.internalFormatHalfFloat, width, height, 0,\n      texConfig.textureFormatFloat, texConfig.textureTypeHalfFloat, null);\n\n  const frameBuffer = gl.createFramebuffer();\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n  gl.framebufferTexture2D(\n      gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n  const isFrameBufferComplete =\n      gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n\n  gl.bindTexture(gl.TEXTURE_2D, null);\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  gl.deleteTexture(texture);\n  gl.deleteFramebuffer(frameBuffer);\n\n  return isFrameBufferComplete;\n}\n\nexport function isWebGLFenceEnabled(webGLVersion: number) {\n  if (webGLVersion !== 2) {\n    return false;\n  }\n  const gl = getWebGLContext(webGLVersion);\n\n  // tslint:disable-next-line:no-any\n  const isEnabled = (gl as any).fenceSync != null;\n  return isEnabled;\n}\n\nexport function assertNotComplex(\n    tensor: TensorInfo|TensorInfo[], opName: string): void {\n  if (!Array.isArray(tensor)) {\n    tensor = [tensor];\n  }\n  tensor.forEach(t => {\n    if (t != null) {\n      util.assert(\n          t.dtype !== 'complex64',\n          () => `${opName} does not support complex64 tensors ` +\n              'in the WebGL backend.');\n    }\n  });\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {device_util, env} from '@tensorflow/tfjs-core';\n\nimport {getMaxTexturesInShader, getWebGLDisjointQueryTimerVersion, getWebGLMaxTextureSize, isCapableOfRenderingToFloatTexture, isDownloadFloatTextureEnabled, isWebGLFenceEnabled, isWebGLVersionEnabled} from './webgl_util';\n\nconst ENV = env();\n\n/**\n * This file contains WebGL-specific flag registrations.\n */\n\n/**\n * True if WebGL is supported.\n */\nENV.registerFlag('HAS_WEBGL', () => ENV.getNumber('WEBGL_VERSION') > 0);\n\n/** 0: No WebGL, 1: WebGL 1.0, 2: WebGL 2.0. */\nENV.registerFlag('WEBGL_VERSION', () => {\n  if (isWebGLVersionEnabled(2)) {\n    return 2;\n  } else if (isWebGLVersionEnabled(1)) {\n    return 1;\n  }\n  return 0;\n});\n\n/** Whether to check for numerical representation problems. */\nENV.registerFlag('WEBGL_CHECK_NUMERICAL_PROBLEMS', () => false);\n\nENV.registerFlag(\n    'WEBGL_BUFFER_SUPPORTED', () => ENV.get('WEBGL_VERSION') === 2);\n\n/** Whether the WebGL backend will sometimes forward ops to the CPU. */\nENV.registerFlag('WEBGL_CPU_FORWARD', () => true);\n\n/** Whether the WebGL backend will always use f16 textures for rendering. */\nENV.registerFlag('WEBGL_FORCE_F16_TEXTURES', () => false);\n\n/** Whether to turn all packing related flags on. */\nENV.registerFlag('WEBGL_PACK', () => ENV.getBool('HAS_WEBGL'));\n\n/** Whether we will pack the batchnormalization op. */\nENV.registerFlag('WEBGL_PACK_NORMALIZATION', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack the clip op. */\nENV.registerFlag('WEBGL_PACK_CLIP', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack the depthwise conv op. */\nENV.registerFlag('WEBGL_PACK_DEPTHWISECONV', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack binary ops. */\nENV.registerFlag(\n    'WEBGL_PACK_BINARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack unary ops. */\nENV.registerFlag(\n    'WEBGL_PACK_UNARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack array ops. */\nENV.registerFlag(\n    'WEBGL_PACK_ARRAY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack image ops. */\nENV.registerFlag(\n    'WEBGL_PACK_IMAGE_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack reduce ops. */\nENV.registerFlag('WEBGL_PACK_REDUCE', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether packed WebGL kernels lazily unpack their outputs. */\nENV.registerFlag('WEBGL_LAZILY_UNPACK', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will use the im2col algorithm to speed up convolutions. */\nENV.registerFlag('WEBGL_CONV_IM2COL', () => ENV.getBool('WEBGL_PACK'));\n\n/** The maximum texture dimension. */\nENV.registerFlag(\n    'WEBGL_MAX_TEXTURE_SIZE',\n    () => getWebGLMaxTextureSize(ENV.getNumber('WEBGL_VERSION')));\n\n/** The maximum texture dimension. */\nENV.registerFlag(\n    'WEBGL_MAX_TEXTURES_IN_SHADER',\n    () => getMaxTexturesInShader(ENV.getNumber('WEBGL_VERSION')));\n\n/**\n * The disjoint_query_timer extension version.\n * 0: disabled, 1: EXT_disjoint_timer_query, 2:\n * EXT_disjoint_timer_query_webgl2.\n * In Firefox with WebGL 2.0,\n * EXT_disjoint_timer_query_webgl2 is not available, so we must use the\n * WebGL 1.0 extension.\n */\nENV.registerFlag('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION', () => {\n  const webGLVersion = ENV.getNumber('WEBGL_VERSION');\n\n  if (webGLVersion === 0) {\n    return 0;\n  }\n  return getWebGLDisjointQueryTimerVersion(webGLVersion);\n});\n\n/**\n * Whether the timer object from the disjoint_query_timer extension gives\n * timing information that is reliable.\n */\nENV.registerFlag(\n    'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE',\n    () => ENV.getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0 &&\n        !device_util.isMobile());\n\n/**\n * Whether the device is physically capable of rendering to float32 textures.\n */\nENV.registerFlag(\n    'WEBGL_RENDER_FLOAT32_CAPABLE',\n    () => isCapableOfRenderingToFloatTexture(ENV.getNumber('WEBGL_VERSION')));\n\n/**\n * Whether rendering to float32 textures is enabled. If disabled, renders to\n * float16 textures.\n */\nENV.registerFlag('WEBGL_RENDER_FLOAT32_ENABLED', () => {\n  return ENV.getBool('WEBGL_FORCE_F16_TEXTURES') ?\n      false :\n      ENV.getBool('WEBGL_RENDER_FLOAT32_CAPABLE');\n});\n\n/**\n * Whether downloading float textures is enabled (16 or 32 bit). If disabled,\n * uses IEEE 754 encoding of the float32 values to 4 uint8 when downloading.\n */\nENV.registerFlag(\n    'WEBGL_DOWNLOAD_FLOAT_ENABLED',\n    () => isDownloadFloatTextureEnabled(ENV.getNumber('WEBGL_VERSION')));\n\n/** Whether the fence API is available. */\nENV.registerFlag(\n    'WEBGL_FENCE_API_ENABLED',\n    () => isWebGLFenceEnabled(ENV.getNumber('WEBGL_VERSION')));\n\n/**\n * Tensors with size <= than this will be uploaded as uniforms, not textures.\n */\nENV.registerFlag('WEBGL_SIZE_UPLOAD_UNIFORM', () => {\n  // Use uniform uploads only when 32bit floats are supported. In\n  // 16bit\n  // environments there are problems with comparing a 16bit texture value\n  // with a 32bit uniform value.\n  const useUniforms = ENV.getBool('WEBGL_RENDER_FLOAT32_ENABLED');\n  return useUniforms ? 4 : 0;\n});\n\n/**\n * If the total number of bytes allocated on the GPU is greater than this\n * number, we will aggressively delete textures upon disposal with\n * gl.deleteMatrixTexture, rather than making them available for reuse.\n *\n * Default value -1 indicates that we will never aggressively delete textures.\n */\nENV.registerFlag(\n    'WEBGL_DELETE_TEXTURE_THRESHOLD',\n    () => {\n      return -1;\n    },\n    threshold => {\n      if (threshold < 0 && threshold !== -1) {\n        throw new Error(\n            `WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never ` +\n            `delete) or at least 0, but got ${threshold}.`);\n      }\n    });\n\n/**\n * Trigger a manual GL command flush if the threshold of time has passed since\n * previous Kernel execution. This can be useful for Andorid device where GL\n * command flush are delayed un til the end of javascript task. This value is\n * measured in millisecond. Typically you want to set this value to close to 1.\n *\n * Default value 1 for mobile chrome, and -1 for rest cases. -1 indicates that\n * we will not enforce manual flush and depend on system default flush schedule.\n */\nENV.registerFlag(\n    'WEBGL_FLUSH_THRESHOLD',\n    () => {\n      return device_util.isMobile() && ENV.getBool('IS_CHROME') ? 1 : -1;\n    },\n    threshold => {\n      if (threshold < 0 && threshold !== -1) {\n        throw new Error(\n            `WEBGL_FLUSH_THRESHOLD must be -1 (indicating never ` +\n            `manual flush) or at least 0, but got ${threshold}.`);\n      }\n    });\n\n/**\n * Threshold for input tensor size that determines whether WebGL backend will\n * delegate computation to CPU.\n *\n * Default value is 128.\n */\nENV.registerFlag('CPU_HANDOFF_SIZE_THRESHOLD', () => 128);\n\n/** Whether we will use shapes uniforms. */\nENV.registerFlag('WEBGL_USE_SHAPES_UNIFORMS', () => false);\n\n/**\n * Threshold for last dimension of input tensor that determines whether\n * WebGL backend for the Top K op will delegate computation to CPU. If input\n * is smaller than threshold then CPU will be used\n *\n * Default value is 100000.\n */\nENV.registerFlag('TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD', () => 100000);\n\n/**\n * Threshold for K that determines whether\n * WebGL backend for the Top K op will delegate computation to CPU. If k\n * is larger than threshold then CPU will be used\n *\n * Default value is 128.\n */\nENV.registerFlag('TOPK_K_CPU_HANDOFF_THRESHOLD', () => 128);\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {env} from '@tensorflow/tfjs-core';\n\nexport type GLSL = {\n  version: string,\n  attribute: string,\n  varyingVs: string,\n  varyingFs: string,\n  texture2D: string,\n  output: string,\n  defineOutput: string,\n  defineSpecialNaN: string,\n  defineSpecialInf: string,\n  defineRound: string\n};\n\nexport function getGlslDifferences(): GLSL {\n  let version: string;\n  let attribute: string;\n  let varyingVs: string;\n  let varyingFs: string;\n  let texture2D: string;\n  let output: string;\n  let defineOutput: string;\n  let defineSpecialNaN: string;\n  let defineSpecialInf: string;\n  let defineRound: string;\n\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    version = '#version 300 es';\n    attribute = 'in';\n    varyingVs = 'out';\n    varyingFs = 'in';\n    texture2D = 'texture';\n    output = 'outputColor';\n    defineOutput = 'out vec4 outputColor;';\n\n    // Use custom isnan definition to work across differences between\n    // implementations on various platforms. While this should happen in ANGLE\n    // we still see differences between android and windows (on chrome) when\n    // using isnan directly.\n    defineSpecialNaN = `\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    `;\n    // In webgl 2 we do not need to specify a custom isinf so there is no\n    // need for a special INFINITY constant.\n    defineSpecialInf = ``;\n    defineRound = `\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    `;\n  } else {\n    version = '';\n    attribute = 'attribute';\n    varyingVs = 'varying';\n    varyingFs = 'varying';\n    texture2D = 'texture2D';\n    output = 'gl_FragColor';\n    defineOutput = '';\n    // WebGL1 has no built in isnan so we define one here.\n    defineSpecialNaN = `\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    `;\n    defineSpecialInf = `\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    `;\n    defineRound = `\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    `;\n  }\n\n  return {\n    version,\n    attribute,\n    varyingVs,\n    varyingFs,\n    texture2D,\n    output,\n    defineOutput,\n    defineSpecialNaN,\n    defineSpecialInf,\n    defineRound\n  };\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\n/**\n * Produces GLSL code that derives logical coordinates from a flat\n * index. The code performs integer division with each stride and decrements\n * the index until the index equals the final dimension coordinate.\n */\nexport function getLogicalCoordinatesFromFlatIndex(\n    coords: string[], shape: number[], index = 'index'): string {\n  const strides = util.computeStrides(shape);\n  return strides\n      .map((stride, i) => {\n        const line1 = `int ${coords[i]} = ${index} / ${stride}`;\n        const line2 = i === strides.length - 1 ?\n            `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` :\n            `index -= ${coords[i]} * ${stride}`;\n        return `${line1}; ${line2};`;\n      })\n      .join('');\n}\n\nexport function getLogicalCoordinatesFromFlatIndexByUniform(\n    coords: string[], shape: number[], index = 'index'): string {\n  const strides = util.computeStrides(shape);\n  return strides\n      .map((_, i) => {\n        const line1 = `int ${coords[i]} = ${index} / outShapeStrides[${i}]`;\n        const line2 = i === strides.length - 1 ?\n            `int ${coords[i + 1]} = ${index} - ${coords[i]} * outShapeStrides[${\n                i}]` :\n            `index -= ${coords[i]} * outShapeStrides[${i}]`;\n        return `${line1}; ${line2};`;\n      })\n      .join('');\n}\n\nfunction buildVec(x: string[]): string {\n  if (x.length === 1) {\n    return `${x[0]}`;\n  }\n  return `vec${x.length}(${x.join(',')})`;\n}\n\n/**\n * Produces GLSL code that computes the dot product of the input x and y\n * vectors. Handles splitting inputs into increments of vec4s when necessary.\n */\nexport function dotify(x: string[], y: string[]): string {\n  if (x.length !== y.length) {\n    throw new Error(\n        `Vectors to be dotted must be of the same length -` +\n        `got ${x.length} and ${y.length}`);\n  }\n\n  const slices: string[] = [];\n  const nearestVec4 = Math.floor(x.length / 4);\n  const nearestVec4Remainder = x.length % 4;\n\n  for (let i = 0; i < nearestVec4; i++) {\n    const xSlice = x.slice(i * 4, i * 4 + 4);\n    const ySlice = y.slice(i * 4, i * 4 + 4);\n    slices.push(`${buildVec(xSlice)}, ${buildVec(ySlice)}`);\n  }\n\n  if (nearestVec4Remainder !== 0) {\n    let xSlice = x.slice(nearestVec4 * 4);\n    let ySlice = y.slice(nearestVec4 * 4);\n    if (xSlice.length === 1) {\n      xSlice = xSlice.map(d => `float(${d})`);\n      ySlice = ySlice.map(d => `float(${d})`);\n    }\n    slices.push(`${buildVec(xSlice)}, ${buildVec(ySlice)}`);\n  }\n\n  return slices.map((d, i) => `dot(${d})`).join('+');\n}\n\n/**\n * Produces GLSL that computes the flat index from 3D coordinates.\n */\nexport function getFlatIndexFrom3D(shape: [number, number, number]): string {\n  const strides = util.computeStrides(shape).map(d => d.toString());\n\n  return `\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${strides[0]} + coords.y * ${strides[1]} + coords.z;\n  }\n`;\n}\n\nexport const ENCODE_FLOAT_SNIPPET = `\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n`;\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\nimport {getDenseTexShape, PackingScheme} from './tex_util';\n\nexport class DecodeMatrixProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: [number, number, number];\n  packedInputs = false;\n  packedOutput = true;\n  outPackingScheme = PackingScheme.DENSE;\n\n  constructor(outputShape: [number, number, number]) {\n    const texShape = getDenseTexShape(outputShape);\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n\n    this.userCode = `\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${\n        shader_util.getLogicalCoordinatesFromFlatIndex(\n            ['r', 'c', 'd'], outputShape)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${texShape[0]}, ${texShape[1]}));\n        int index = 4 * (resTexRC.x * ${texShape[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\nimport {getDenseTexShape, PackingScheme} from './tex_util';\n\nexport class DecodeMatrixPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: [number, number, number];\n  outPackingScheme = PackingScheme.DENSE;\n\n  constructor(outputShape: [number, number, number]) {\n    const texShape = getDenseTexShape(outputShape);\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n\n    this.userCode = `\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${\n        shader_util.getLogicalCoordinatesFromFlatIndex(\n            ['r', 'c', 'd'], outputShape)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${texShape[0]}, ${texShape[1]}));\n        int index = 4 * (resTexRC.x * ${texShape[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {ENCODE_FLOAT_SNIPPET} from './shader_compiler_util';\nimport {TextureUsage} from './tex_util';\n\nexport class EncodeFloatProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  outTexUsage = TextureUsage.DOWNLOAD;\n\n  constructor(outputShape: number[]) {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.userCode = `\n      ${ENCODE_FLOAT_SNIPPET}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${glsl.output} = encode_float(x);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {ENCODE_FLOAT_SNIPPET} from './shader_compiler_util';\nimport {TextureUsage} from './tex_util';\n\nexport class EncodeFloatPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  packedInputs = true;\n  packedOutput = false;\n  outTexUsage = TextureUsage.DOWNLOAD;\n\n  constructor(outputShape: [number, number, number]) {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.userCode = `\n      ${ENCODE_FLOAT_SNIPPET}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${glsl.output} = encode_float(x);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n\nexport class EncodeMatrixProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(\n      outputShape: [number, number, number], texShape: [number, number],\n      inputIsUnsignedByte = false) {\n    const glsl = getGlslDifferences();\n    const [height, width] = texShape;\n    this.outputShape = outputShape;\n\n    let output = `result`;\n    if (inputIsUnsignedByte) {\n      output = `floor(result * 255. + 0.5)`;\n    }\n\n    this.userCode = `\n      ${shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / ${width};\n        int c = imod(flatIndex, ${width});\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(${width}.0, ${height}.0);\n        vec4 values = ${glsl.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${glsl.output} = vec4(${output}, 0., 0., 0.);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n\n/*\nThis is how the shader encodes a tensor with shape = [2, 3, 5]\n(indices are [batch, row, col]).\n\n000|001   002|003   004|xxx   020|021   022|023   024|xxx\n-------   -------   -------   -------   -------   -------\n010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n\n100|101   102|103   104|xxx   120|121   122|123   124|xxx\n-------   -------   -------   -------   -------   -------\n110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n\nSingle texels contain only values from the same batch, and from adjacent rows\nand columns.\n */\n\nexport class EncodeMatrixPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  packedInputs = false;\n  packedOutput = true;\n\n  constructor(\n      outputShape: [number, number, number], texShape: [number, number],\n      inputIsUnsignedByte = false) {\n    const glsl = getGlslDifferences();\n    const [height, width] = texShape;\n    this.outputShape = outputShape;\n\n    let mainLoop = '';\n    let output = 'result';\n    if (inputIsUnsignedByte) {\n      output = 'floor(result * 255. + 0.5)';\n    }\n\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        const channel = row * 2 + col;\n\n        mainLoop += `\n          localCoords = coords;\n          if(localCoords[2] + ${col} < ${outputShape[2]}) {\n            localCoords[2] += ${col};\n            if(localCoords[1] + ${row} < ${outputShape[1]}) {\n              localCoords[1] += ${row};\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n\n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / ${width};\n              c = imod(flatIndex, ${width});\n              uv = (vec2(c, r) + halfCR) / vec2(${width}.0, ${height}.0);\n              values = ${glsl.texture2D}(A, uv);\n\n              if(offset == 0) {\n                result[${channel}] = values[0];\n              } else if(offset == 1) {\n                result[${channel}] = values[1];\n              } else if(offset == 2) {\n                result[${channel}] = values[2];\n              } else {\n                result[${channel}] = values[3];\n              }\n            }\n          }\n        `;\n      }\n    }\n\n    this.userCode = `\n      ${shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n\n        ${mainLoop}\n\n        ${glsl.output} = ${output};\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {PixelData, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {getGlslDifferences} from './glsl_version';\nimport * as tex_util from './tex_util';\nimport {TextureConfig} from './tex_util';\nimport * as webgl_util from './webgl_util';\n\nexport function createVertexShader(gl: WebGLRenderingContext): WebGLShader {\n  const glsl = getGlslDifferences();\n  const vertexShaderSource = `${glsl.version}\n    precision highp float;\n    ${glsl.attribute} vec3 clipSpacePos;\n    ${glsl.attribute} vec2 uv;\n    ${glsl.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`;\n  return webgl_util.createVertexShader(gl, vertexShaderSource);\n}\n\nexport function createVertexBuffer(gl: WebGLRenderingContext): WebGLBuffer {\n  // [x y z u v] * [upper-left, lower-left, upper-right, lower-right]\n  const vertexArray = new Float32Array(\n      [-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]);\n  return webgl_util.createStaticVertexBuffer(gl, vertexArray);\n}\n\nexport function createIndexBuffer(gl: WebGLRenderingContext): WebGLBuffer {\n  // OpenGL (and WebGL) have \"CCW == front\" winding\n  const triangleVertexIndices = new Uint16Array([0, 1, 2, 2, 1, 3]);\n  return webgl_util.createStaticIndexBuffer(gl, triangleVertexIndices);\n}\n\nfunction createAndConfigureTexture(\n    gl: WebGLRenderingContext, width: number, height: number,\n    internalFormat: number, textureFormat: number,\n    textureType: number): WebGLTexture {\n  webgl_util.validateTextureSize(width, height);\n  const texture = webgl_util.createTexture(gl);\n\n  const tex2d = gl.TEXTURE_2D;\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(tex2d, texture));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MIN_FILTER, gl.NEAREST));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MAG_FILTER, gl.NEAREST));\n  webgl_util.callAndCheck(\n      gl,\n      () => gl.texImage2D(\n          tex2d, 0, internalFormat, width, height, 0, textureFormat,\n          textureType, null));\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n  return texture;\n}\n\nexport function getInternalFormatForFloat32MatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatFloat;\n}\n\nexport function createFloat32MatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLTexture {\n  const [width, height] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForFloat32MatrixTexture(textureConfig),\n      textureConfig.textureFormatFloat, gl.FLOAT);\n}\n\nexport function getInternalFormatForFloat16MatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatHalfFloat;\n}\n\nexport function createFloat16MatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLTexture {\n  const [width, height] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForFloat16MatrixTexture(textureConfig),\n      textureConfig.textureFormatFloat, textureConfig.textureTypeHalfFloat);\n}\n\nexport function getInternalFormatForUnsignedBytesMatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.downloadTextureFormat;\n}\n\nexport function createUnsignedBytesMatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLTexture {\n  const [width, height] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForUnsignedBytesMatrixTexture(textureConfig), gl.RGBA,\n      gl.UNSIGNED_BYTE);\n}\n\nexport function getInternalFormatForPackedMatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatPackedFloat;\n}\n\nexport function createPackedMatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLTexture {\n  const [width, height] =\n      tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height, getInternalFormatForPackedMatrixTexture(textureConfig),\n      gl.RGBA, gl.FLOAT);\n}\n\nexport function getInternalFormatForFloat16PackedMatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatPackedHalfFloat;\n}\n\nexport function createFloat16PackedMatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLTexture {\n  const [width, height] =\n      tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForFloat16PackedMatrixTexture(textureConfig), gl.RGBA,\n      textureConfig.textureTypeHalfFloat);\n}\n\nexport function bindVertexProgramAttributeStreams(\n    gl: WebGLRenderingContext, program: WebGLProgram,\n    vertexBuffer: WebGLBuffer): boolean {\n  const posOffset = 0;               // x is the first buffer element\n  const uvOffset = 3 * 4;            // uv comes after [x y z]\n  const stride = (3 * 4) + (2 * 4);  // xyz + uv, each entry is 4-byte float.\n  webgl_util.callAndCheck(\n      gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer));\n  const success = webgl_util.bindVertexBufferToProgramAttribute(\n      gl, program, 'clipSpacePos', vertexBuffer, 3, stride, posOffset);\n  return success &&\n      webgl_util.bindVertexBufferToProgramAttribute(\n          gl, program, 'uv', vertexBuffer, 2, stride, uvOffset);\n}\n\nexport function uploadDenseMatrixToTexture(\n    gl: WebGLRenderingContext, texture: WebGLTexture, width: number,\n    height: number, data: TypedArray, textureConfig: TextureConfig) {\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n\n  let dataForUpload: TypedArray, texelDataType: number, internalFormat: number;\n  if (data instanceof Uint8Array) {\n    dataForUpload = new Uint8Array(width * height * 4);\n    texelDataType = gl.UNSIGNED_BYTE;\n    internalFormat = gl.RGBA;\n  } else {\n    dataForUpload = new Float32Array(width * height * 4);\n    texelDataType = gl.FLOAT;\n    internalFormat = textureConfig.internalFormatPackedFloat;\n  }\n\n  dataForUpload.set(data);\n\n  webgl_util.callAndCheck(\n      gl,\n      () => gl.texImage2D(\n          gl.TEXTURE_2D, 0, internalFormat, width, height, 0, gl.RGBA,\n          texelDataType, dataForUpload));\n\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\n\nexport function uploadPixelDataToTexture(\n    gl: WebGLRenderingContext, texture: WebGLTexture,\n    pixels: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement|\n    HTMLVideoElement|ImageBitmap) {\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n  if ((pixels as PixelData).data instanceof Uint8Array) {\n    webgl_util.callAndCheck(\n        gl,\n        () => gl.texImage2D(\n            gl.TEXTURE_2D, 0, gl.RGBA, pixels.width, pixels.height, 0, gl.RGBA,\n            gl.UNSIGNED_BYTE, (pixels as PixelData).data));\n  } else {\n    webgl_util.callAndCheck(\n        gl,\n        () => gl.texImage2D(\n            gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE,\n            pixels as ImageData | HTMLImageElement | HTMLCanvasElement |\n                HTMLVideoElement|ImageBitmap));\n  }\n\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\n\nexport function createBufferFromOutputTexture(\n    gl2: WebGL2RenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLBuffer {\n  // Create and bind the buffer.\n  const buffer = gl2.createBuffer();\n  webgl_util.callAndCheck(\n      gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer));\n\n  // Initialize the buffer to the size of the texture in bytes.\n  const bytesPerFloat = 4;\n  const valuesPerTexel = 4;\n  const bufferSizeBytes = bytesPerFloat * valuesPerTexel * rows * columns;\n\n  webgl_util.callAndCheck(\n      gl2,\n      () => gl2.bufferData(\n          gl2.PIXEL_PACK_BUFFER, bufferSizeBytes, gl2.STREAM_READ));\n\n  // Enqueue a command on the GPU command queue to copy of texture into the\n  // buffer.\n  webgl_util.callAndCheck(\n      gl2, () => gl2.readPixels(0, 0, columns, rows, gl2.RGBA, gl2.FLOAT, 0));\n\n  webgl_util.callAndCheck(\n      gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null));\n\n  return buffer;\n}\n\nexport function downloadFloat32MatrixFromBuffer(\n    gl: WebGLRenderingContext, buffer: WebGLBuffer,\n    size: number): Float32Array {\n  const gl2 = gl as WebGL2RenderingContext;\n\n  const downloadTarget = new Float32Array(size);\n\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n  gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n\n  return downloadTarget;\n}\n\nexport function downloadByteEncodedFloatMatrixFromOutputTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig) {\n  const [w, h] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n\n  const numChannels = 4;\n  const downloadTarget = new Uint8Array(\n      tex_util.getUnpackedArraySizeFromMatrixSize(rows * columns, numChannels));\n\n  webgl_util.callAndCheck(\n      gl,\n      () => gl.readPixels(\n          0, 0, w, h, textureConfig.downloadTextureFormat, gl.UNSIGNED_BYTE,\n          downloadTarget));\n\n  // By wrapping the buffer in a Float32Array, we use native browser IEEE 754\n  // decoding of the 4 bytes that back each 32 bit float.\n  return new Float32Array(downloadTarget.buffer);\n}\n\nexport function downloadPackedMatrixFromBuffer(\n    gl: WebGLRenderingContext, buffer: WebGLBuffer, batch: number, rows: number,\n    cols: number, physicalRows: number, physicalCols: number,\n    textureConfig: TextureConfig): Float32Array {\n  const gl2 = gl as WebGL2RenderingContext;\n\n  const downloadTarget =\n      new Float32Array(tex_util.getPackedRGBAArraySizeFromMatrixShape(\n          physicalRows, physicalCols));\n\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n  gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n\n  return downloadTarget;\n}\n\nexport function downloadMatrixFromPackedOutputTexture(\n    gl: WebGLRenderingContext, physicalRows: number,\n    physicalCols: number): Float32Array {\n  const packedRGBA = new Float32Array(physicalRows * physicalCols * 4);\n  webgl_util.callAndCheck(\n      gl,\n      () => gl.readPixels(\n          0, 0, physicalCols, physicalRows, gl.RGBA, gl.FLOAT, packedRGBA));\n\n  return packedRGBA;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, PixelData, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {getWebGLContext, setWebGLContext} from './canvas_util';\nimport * as gpgpu_util from './gpgpu_util';\nimport * as tex_util from './tex_util';\nimport {TextureConfig} from './tex_util';\nimport {WebGL1DisjointQueryTimerExtension, WebGL2DisjointQueryTimerExtension} from './webgl_types';\nimport * as webgl_util from './webgl_util';\n\nexport interface FenceContext {\n  query: WebGLQuery|WebGLSync;\n  isFencePassed(): boolean;\n}\n\nexport class GPGPUContext {\n  gl: WebGLRenderingContext;\n  textureFloatExtension: {};\n  textureHalfFloatExtension: {};\n  colorBufferFloatExtension: {};\n  colorBufferHalfFloatExtension: {};\n  disjointQueryTimerExtension: WebGL2DisjointQueryTimerExtension|\n      WebGL1DisjointQueryTimerExtension;\n  vertexBuffer: WebGLBuffer;\n  indexBuffer: WebGLBuffer;\n  framebuffer: WebGLFramebuffer;\n  outputTexture: WebGLTexture|null = null;\n  program: WebGLProgram|null = null;\n  private disposed = false;\n  private disjoint: boolean;\n  private vertexShader: WebGLShader;\n  textureConfig: TextureConfig;\n\n  constructor(gl?: WebGLRenderingContext) {\n    const glVersion = env().getNumber('WEBGL_VERSION');\n    if (gl != null) {\n      this.gl = gl;\n      setWebGLContext(glVersion, gl);\n    } else {\n      this.gl = getWebGLContext(glVersion);\n    }\n    // WebGL 2.0 enables texture floats without an extension.\n    let COLOR_BUFFER_FLOAT = 'WEBGL_color_buffer_float';\n    const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';\n    if (env().getNumber('WEBGL_VERSION') === 1) {\n      const TEXTURE_FLOAT = 'OES_texture_float';\n      const TEXTURE_HALF_FLOAT = 'OES_texture_half_float';\n\n      this.textureFloatExtension =\n          webgl_util.getExtensionOrThrow(this.gl, TEXTURE_FLOAT);\n      if (webgl_util.hasExtension(this.gl, TEXTURE_HALF_FLOAT)) {\n        this.textureHalfFloatExtension =\n            webgl_util.getExtensionOrThrow(this.gl, TEXTURE_HALF_FLOAT);\n      } else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n        throw new Error(\n            'GL context does not support half float textures, yet the ' +\n            'environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n      }\n\n      this.colorBufferFloatExtension = this.gl.getExtension(COLOR_BUFFER_FLOAT);\n      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n        this.colorBufferHalfFloatExtension =\n            webgl_util.getExtensionOrThrow(this.gl, COLOR_BUFFER_HALF_FLOAT);\n      } else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n        throw new Error(\n            'GL context does not support color renderable half floats, yet ' +\n            'the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n      }\n    } else {\n      COLOR_BUFFER_FLOAT = 'EXT_color_buffer_float';\n      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_FLOAT)) {\n        this.colorBufferFloatExtension =\n            this.gl.getExtension(COLOR_BUFFER_FLOAT);\n      } else if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n        this.colorBufferHalfFloatExtension =\n            this.gl.getExtension(COLOR_BUFFER_HALF_FLOAT);\n      } else {\n        throw new Error('GL context does not support color renderable floats');\n      }\n    }\n\n    this.vertexBuffer = gpgpu_util.createVertexBuffer(this.gl);\n    this.indexBuffer = gpgpu_util.createIndexBuffer(this.gl);\n    this.framebuffer = webgl_util.createFramebuffer(this.gl);\n\n    this.textureConfig =\n        tex_util.getTextureConfig(this.gl, this.textureHalfFloatExtension);\n  }\n\n  private get debug(): boolean {\n    return env().getBool('DEBUG');\n  }\n\n  public dispose() {\n    if (this.disposed) {\n      return;\n    }\n    if (this.program != null) {\n      console.warn(\n          'Disposing a GPGPUContext that still has a bound WebGLProgram.' +\n          ' This is probably a resource leak, delete the program with ' +\n          'GPGPUContext.deleteProgram before disposing.');\n    }\n    if (this.outputTexture != null) {\n      console.warn(\n          'Disposing a GPGPUContext that still has a bound output matrix ' +\n          'texture.  This is probably a resource leak, delete the output ' +\n          'matrix texture with GPGPUContext.deleteMatrixTexture before ' +\n          'disposing.');\n    }\n    const gl = this.gl;\n    webgl_util.callAndCheck(gl, () => gl.finish());\n    webgl_util.callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));\n    webgl_util.callAndCheck(gl, () => gl.deleteFramebuffer(this.framebuffer));\n    webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, null));\n    webgl_util.callAndCheck(\n        gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null));\n    webgl_util.callAndCheck(gl, () => gl.deleteBuffer(this.indexBuffer));\n    this.disposed = true;\n  }\n\n  public createFloat32MatrixTexture(rows: number, columns: number):\n      WebGLTexture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat32MatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public createFloat16MatrixTexture(rows: number, columns: number):\n      WebGLTexture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat16MatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public createUnsignedBytesMatrixTexture(rows: number, columns: number):\n      WebGLTexture {\n    this.throwIfDisposed();\n    return gpgpu_util.createUnsignedBytesMatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public uploadPixelDataToTexture(\n      texture: WebGLTexture,\n      pixels: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement|\n      ImageBitmap) {\n    this.throwIfDisposed();\n    gpgpu_util.uploadPixelDataToTexture(this.gl, texture, pixels);\n  }\n\n  public uploadDenseMatrixToTexture(\n      texture: WebGLTexture, width: number, height: number, data: TypedArray) {\n    this.throwIfDisposed();\n    gpgpu_util.uploadDenseMatrixToTexture(\n        this.gl, texture, width, height, data, this.textureConfig);\n  }\n\n  public createFloat16PackedMatrixTexture(rows: number, columns: number):\n      WebGLTexture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat16PackedMatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public createPackedMatrixTexture(rows: number, columns: number):\n      WebGLTexture {\n    this.throwIfDisposed();\n    return gpgpu_util.createPackedMatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public deleteMatrixTexture(texture: WebGLTexture) {\n    this.throwIfDisposed();\n    if (this.outputTexture === texture) {\n      webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n      this.outputTexture = null;\n    }\n    webgl_util.callAndCheck(this.gl, () => this.gl.deleteTexture(texture));\n  }\n\n  public downloadByteEncodedFloatMatrixFromOutputTexture(\n      texture: WebGLTexture, rows: number, columns: number): Float32Array {\n    return this.downloadMatrixDriver(\n        texture,\n        () => gpgpu_util.downloadByteEncodedFloatMatrixFromOutputTexture(\n            this.gl, rows, columns, this.textureConfig));\n  }\n\n  public downloadPackedMatrixFromBuffer(\n      buffer: WebGLBuffer, batch: number, rows: number, columns: number,\n      physicalRows: number, physicalCols: number): Float32Array {\n    return gpgpu_util.downloadPackedMatrixFromBuffer(\n        this.gl, buffer, batch, rows, columns, physicalRows, physicalCols,\n        this.textureConfig);\n  }\n\n  public downloadFloat32MatrixFromBuffer(buffer: WebGLBuffer, size: number):\n      Float32Array {\n    return gpgpu_util.downloadFloat32MatrixFromBuffer(this.gl, buffer, size);\n  }\n\n  public createBufferFromTexture(\n      texture: WebGLTexture, rows: number, columns: number): WebGLBuffer {\n    this.bindTextureToFrameBuffer(texture);\n    const result = gpgpu_util.createBufferFromOutputTexture(\n        this.gl as WebGL2RenderingContext, rows, columns, this.textureConfig);\n    this.unbindTextureToFrameBuffer();\n    return result;\n  }\n\n  public createAndWaitForFence(): Promise<void> {\n    const fenceContext = this.createFence(this.gl);\n    return this.pollFence(fenceContext);\n  }\n\n  private createFence(gl: WebGLRenderingContext): FenceContext {\n    let query: WebGLQuery|WebGLSync;\n    let isFencePassed: () => boolean;\n\n    if (env().getBool('WEBGL_FENCE_API_ENABLED')) {\n      const gl2 = gl as WebGL2RenderingContext;\n\n      const sync = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n      gl.flush();\n\n      isFencePassed = () => {\n        const status = gl2.clientWaitSync(sync, 0, 0);\n        return status === gl2.ALREADY_SIGNALED ||\n            status === gl2.CONDITION_SATISFIED;\n      };\n\n      query = sync;\n    } else if (\n        env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {\n      query = this.beginQuery();\n      this.endQuery();\n      isFencePassed = () => this.isQueryAvailable(\n          query,\n          env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n    } else {\n      // If we have no way to fence, return true immediately. This will fire in\n      // WebGL 1.0 when there is no disjoint query timer. In this case, because\n      // the fence passes immediately, we'll immediately ask for a download of\n      // the texture, which will cause the UI thread to hang.\n      isFencePassed = () => true;\n    }\n\n    return {query, isFencePassed};\n  }\n\n  public downloadMatrixFromPackedTexture(\n      texture: WebGLTexture, physicalRows: number,\n      physicalCols: number): Float32Array {\n    return this.downloadMatrixDriver(\n        texture,\n        () => gpgpu_util.downloadMatrixFromPackedOutputTexture(\n            this.gl, physicalRows, physicalCols));\n  }\n\n  private vertexAttrsAreBound = false;\n\n  public createProgram(fragmentShaderSource: string): WebGLProgram {\n    this.throwIfDisposed();\n    const gl = this.gl;\n    const fragmentShader: WebGLShader =\n        webgl_util.createFragmentShader(gl, fragmentShaderSource);\n    if (this.vertexShader == null) {\n      this.vertexShader = gpgpu_util.createVertexShader(gl);\n    }\n    const program: WebGLProgram = webgl_util.createProgram(gl);\n    webgl_util.callAndCheck(\n        gl, () => gl.attachShader(program, this.vertexShader));\n    webgl_util.callAndCheck(gl, () => gl.attachShader(program, fragmentShader));\n    webgl_util.linkProgram(gl, program);\n    if (this.debug) {\n      webgl_util.validateProgram(gl, program);\n    }\n    if (!this.vertexAttrsAreBound) {\n      this.setProgram(program);\n      this.vertexAttrsAreBound = gpgpu_util.bindVertexProgramAttributeStreams(\n          gl, this.program, this.vertexBuffer);\n    }\n    return program;\n  }\n\n  public deleteProgram(program: WebGLProgram) {\n    this.throwIfDisposed();\n    if (program === this.program) {\n      this.program = null;\n    }\n    if (program != null) {\n      webgl_util.callAndCheck(this.gl, () => this.gl.deleteProgram(program));\n    }\n  }\n\n  public setProgram(program: WebGLProgram|null) {\n    this.throwIfDisposed();\n    this.program = program;\n    if ((this.program != null) && this.debug) {\n      webgl_util.validateProgram(this.gl, this.program);\n    }\n    webgl_util.callAndCheck(this.gl, () => this.gl.useProgram(program));\n  }\n\n  public getUniformLocation(\n      program: WebGLProgram, uniformName: string,\n      shouldThrow = true): WebGLUniformLocation {\n    this.throwIfDisposed();\n    if (shouldThrow) {\n      return webgl_util.getProgramUniformLocationOrThrow(\n          this.gl, program, uniformName);\n    } else {\n      return webgl_util.getProgramUniformLocation(\n          this.gl, program, uniformName);\n    }\n  }\n\n  public getAttributeLocation(program: WebGLProgram, attribute: string):\n      number {\n    this.throwIfDisposed();\n    return webgl_util.callAndCheck(\n        this.gl, () => this.gl.getAttribLocation(program, attribute));\n  }\n\n  public getUniformLocationNoThrow(program: WebGLProgram, uniformName: string):\n      WebGLUniformLocation {\n    this.throwIfDisposed();\n    return this.gl.getUniformLocation(program, uniformName);\n  }\n\n  public setInputMatrixTexture(\n      inputMatrixTexture: WebGLTexture, uniformLocation: WebGLUniformLocation,\n      textureUnit: number) {\n    this.throwIfDisposed();\n    this.throwIfNoProgram();\n    webgl_util.bindTextureToProgramUniformSampler(\n        this.gl, inputMatrixTexture, uniformLocation, textureUnit);\n  }\n\n  public setOutputMatrixTexture(\n      outputMatrixTexture: WebGLTexture, rows: number, columns: number) {\n    this.setOutputMatrixTextureDriver(outputMatrixTexture, columns, rows);\n  }\n\n  public setOutputPackedMatrixTexture(\n      outputPackedMatrixTexture: WebGLTexture, rows: number, columns: number) {\n    this.throwIfDisposed();\n    const [width, height] =\n        tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n    this.setOutputMatrixTextureDriver(outputPackedMatrixTexture, width, height);\n  }\n\n  public setOutputMatrixWriteRegion(\n      startRow: number, numRows: number, startColumn: number,\n      numColumns: number) {\n    this.setOutputMatrixWriteRegionDriver(\n        startColumn, startRow, numColumns, numRows);\n  }\n\n  public setOutputPackedMatrixWriteRegion(\n      startRow: number, numRows: number, startColumn: number,\n      numColumns: number) {\n    throw new Error('setOutputPackedMatrixWriteRegion not implemented.');\n  }\n\n  public debugValidate() {\n    if (this.program != null) {\n      webgl_util.validateProgram(this.gl, this.program);\n    }\n    webgl_util.validateFramebuffer(this.gl);\n  }\n\n  public executeProgram() {\n    this.throwIfDisposed();\n    this.throwIfNoProgram();\n    const gl = this.gl;\n    if (this.debug) {\n      this.debugValidate();\n    }\n    webgl_util.callAndCheck(\n        gl, () => gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0));\n  }\n\n  public blockUntilAllProgramsCompleted() {\n    this.throwIfDisposed();\n    webgl_util.callAndCheck(this.gl, () => this.gl.finish());\n  }\n\n  private getQueryTimerExtension(): WebGL1DisjointQueryTimerExtension\n      |WebGL2DisjointQueryTimerExtension {\n    if (this.disjointQueryTimerExtension == null) {\n      this.disjointQueryTimerExtension =\n          webgl_util.getExtensionOrThrow(\n              this.gl,\n              env().getNumber(\n                  'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2 ?\n                  'EXT_disjoint_timer_query_webgl2' :\n                  'EXT_disjoint_timer_query') as\n              WebGL1DisjointQueryTimerExtension |\n          WebGL2DisjointQueryTimerExtension;\n    }\n    return this.disjointQueryTimerExtension;\n  }\n\n  private getQueryTimerExtensionWebGL2(): WebGL2DisjointQueryTimerExtension {\n    return this.getQueryTimerExtension();\n  }\n\n  private getQueryTimerExtensionWebGL1(): WebGL1DisjointQueryTimerExtension {\n    return this.getQueryTimerExtension() as WebGL1DisjointQueryTimerExtension;\n  }\n\n  beginQuery(): WebGLQuery {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n\n      const query = gl2.createQuery();\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    }\n    const ext = this.getQueryTimerExtensionWebGL1();\n    const query = ext.createQueryEXT() as WebGLQuery;\n    ext.beginQueryEXT(ext.TIME_ELAPSED_EXT, query);\n    return query;\n  }\n\n  endQuery() {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\n      return;\n    }\n    const ext = this.getQueryTimerExtensionWebGL1();\n    ext.endQueryEXT(ext.TIME_ELAPSED_EXT);\n  }\n\n  public async waitForQueryAndGetTime(query: WebGLQuery): Promise<number> {\n    await util.repeatedTry(\n        () => this.disposed ||  // while testing contexts are created / disposed\n                                // in rapid succession, so without this check we\n                                // may poll for the query timer indefinitely\n            this.isQueryAvailable(\n                query,\n                env().getNumber(\n                    'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION')));\n    return this.getQueryTime(\n        query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n  }\n\n  private getQueryTime(query: WebGLQuery, queryTimerVersion: number): number {\n    if (queryTimerVersion === 0) {\n      return null;\n    }\n\n    if (queryTimerVersion === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n\n      const timeElapsedNanos = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n      // Return milliseconds.\n      return timeElapsedNanos / 1000000;\n    } else {\n      const ext = this.getQueryTimerExtensionWebGL1();\n\n      const timeElapsedNanos =\n          ext.getQueryObjectEXT(query, ext.QUERY_RESULT_EXT);\n      // Return milliseconds.\n      return timeElapsedNanos / 1000000;\n    }\n  }\n\n  private isQueryAvailable(query: WebGLQuery, queryTimerVersion: number):\n      boolean {\n    if (queryTimerVersion === 0) {\n      return true;\n    }\n\n    if (queryTimerVersion === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n\n      const available =\n          gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n      if (this.disjoint == null) {\n        this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n      }\n\n      return available && !this.disjoint;\n    } else {\n      const ext = this.getQueryTimerExtensionWebGL1();\n\n      const available =\n          ext.getQueryObjectEXT(query, ext.QUERY_RESULT_AVAILABLE_EXT);\n      if (this.disjoint == null) {\n        this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n      }\n\n      return available && !this.disjoint;\n    }\n  }\n\n  pollFence(fenceContext: FenceContext) {\n    return new Promise<void>(resolve => {\n      this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n    });\n  }\n\n  private itemsToPoll: PollItem[] = [];\n\n  pollItems(): void {\n    // Find the last query that has finished.\n    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n    for (let i = 0; i <= index; ++i) {\n      const {resolveFn} = this.itemsToPoll[i];\n      resolveFn();\n    }\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n  }\n\n  private addItemToPoll(isDoneFn: () => boolean, resolveFn: () => void) {\n    this.itemsToPoll.push({isDoneFn, resolveFn});\n    if (this.itemsToPoll.length > 1) {\n      // We already have a running loop that polls.\n      return;\n    }\n    // Start a new loop that polls.\n    util.repeatedTry(() => {\n      this.pollItems();\n      // End the loop if no more items to poll.\n      return this.itemsToPoll.length === 0;\n    });\n  }\n\n  private bindTextureToFrameBuffer(texture: WebGLTexture) {\n    this.throwIfDisposed();\n    webgl_util.bindColorTextureToFramebuffer(\n        this.gl, texture, this.framebuffer);\n    if (this.debug) {\n      webgl_util.validateFramebuffer(this.gl);\n    }\n  }\n\n  private unbindTextureToFrameBuffer() {\n    if (this.outputTexture != null) {\n      webgl_util.bindColorTextureToFramebuffer(\n          this.gl, this.outputTexture, this.framebuffer);\n      if (this.debug) {\n        webgl_util.validateFramebuffer(this.gl);\n      }\n    } else {\n      webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n    }\n  }\n\n  private downloadMatrixDriver(\n      texture: WebGLTexture,\n      downloadAndDecode: () => Float32Array): Float32Array {\n    this.bindTextureToFrameBuffer(texture);\n    const result = downloadAndDecode();\n    this.unbindTextureToFrameBuffer();\n\n    return result;\n  }\n\n  private setOutputMatrixTextureDriver(\n      outputMatrixTextureMaybePacked: WebGLTexture, width: number,\n      height: number) {\n    this.throwIfDisposed();\n    const gl = this.gl;\n    webgl_util.bindColorTextureToFramebuffer(\n        gl, outputMatrixTextureMaybePacked, this.framebuffer);\n    if (this.debug) {\n      webgl_util.validateFramebuffer(gl);\n    }\n    this.outputTexture = outputMatrixTextureMaybePacked;\n    webgl_util.callAndCheck(gl, () => gl.viewport(0, 0, width, height));\n    webgl_util.callAndCheck(gl, () => gl.scissor(0, 0, width, height));\n  }\n\n  private setOutputMatrixWriteRegionDriver(\n      x: number, y: number, width: number, height: number) {\n    this.throwIfDisposed();\n    webgl_util.callAndCheck(\n        this.gl, () => this.gl.scissor(x, y, width, height));\n  }\n\n  private throwIfDisposed() {\n    if (this.disposed) {\n      throw new Error('Attempted to use disposed GPGPUContext.');\n    }\n  }\n\n  private throwIfNoProgram() {\n    if (this.program == null) {\n      throw new Error('No GPU program is currently set.');\n    }\n  }\n}\n\ntype PollItem = {\n  isDoneFn: () => boolean,\n  resolveFn: () => void\n};\n\n/**\n * Finds the index of the last true element using linear search.\n * Note: We can't do binary search because Chrome expects us to explicitly\n * test all fences before download:\n * https://github.com/tensorflow/tfjs/issues/1145\n */\nexport function linearSearchLastTrue(arr: Array<() => boolean>): number {\n  let i = 0;\n  for (; i < arr.length; ++i) {\n    const isDone = arr[i]();\n    if (!isDone) {\n      break;\n    }\n  }\n  return i - 1;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Please make sure the shaker key in makeShaderKey in gpgpu_math.ts is well\n// mapped if any shader source code is changed in this file.\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\nconst {getBroadcastDims} = backend_util;\nimport {getGlslDifferences, GLSL} from './glsl_version';\nimport * as shader_util from './shader_compiler_util';\n\nexport type ShapeInfo = {\n  logicalShape: number[],\n  texShape: [number, number],\n  isUniform: boolean,\n  isPacked: boolean,\n  flatOffset: number\n};\n\nexport type InputInfo = {\n  name: string,\n  shapeInfo: ShapeInfo\n};\n\nexport type UniformType =\n    'float'|'vec2'|'vec3'|'vec4'|'int'|'ivec2'|'ivec3'|'ivec4';\n\ninterface ProgramParams {\n  userCode: string;\n  enableShapeUniforms?: boolean;\n  packedInputs?: boolean;\n  customUniforms?:\n      Array<{name: string; arrayIndex?: number; type: UniformType;}>;\n}\n\nexport function makeShader(\n    inputsInfo: InputInfo[], outputShape: ShapeInfo,\n    program: ProgramParams): string {\n  const prefixSnippets: string[] = [];\n  inputsInfo.forEach(x => {\n    const size = util.sizeFromShape(x.shapeInfo.logicalShape);\n\n    // Snippet when we decided to upload the values as uniform.\n    if (x.shapeInfo.isUniform) {\n      prefixSnippets.push(\n          `uniform float ${x.name}${size > 1 ? `[${size}]` : ''};`);\n    } else {\n      prefixSnippets.push(`uniform sampler2D ${x.name};`);\n      prefixSnippets.push(`uniform int offset${x.name};`);\n    }\n\n    if (program.enableShapeUniforms) {\n      const {uniformShape} = getUniformInfoFromShape(\n          program.packedInputs, x.shapeInfo.logicalShape, x.shapeInfo.texShape);\n      switch (uniformShape.length) {\n        case 1:\n          prefixSnippets.push(`uniform int ${x.name}Shape;`);\n          break;\n        case 2:\n          prefixSnippets.push(`uniform ivec2 ${x.name}Shape;`);\n          break;\n        case 3:\n          prefixSnippets.push(`uniform ivec3 ${x.name}Shape;`);\n          break;\n        case 4:\n          prefixSnippets.push(`uniform ivec4 ${x.name}Shape;`);\n          break;\n        default:\n          break;\n      }\n      prefixSnippets.push(`uniform ivec2 ${x.name}TexShape;`);\n    }\n  });\n\n  if (program.enableShapeUniforms) {\n    switch (outputShape.logicalShape.length) {\n      case 1:\n        prefixSnippets.push(`uniform int outShape;`);\n        break;\n      case 2:\n        prefixSnippets.push(`uniform ivec2 outShape;`);\n        prefixSnippets.push(`uniform int outShapeStrides;`);\n        break;\n      case 3:\n        prefixSnippets.push(`uniform ivec3 outShape;`);\n        prefixSnippets.push(`uniform ivec2 outShapeStrides;`);\n        break;\n      case 4:\n        prefixSnippets.push(`uniform ivec4 outShape;`);\n        prefixSnippets.push(`uniform ivec3 outShapeStrides;`);\n        break;\n      default:\n        break;\n    }\n    prefixSnippets.push(`uniform ivec2 outTexShape;`);\n  }\n  if (program.customUniforms) {\n    program.customUniforms.forEach((d) => {\n      prefixSnippets.push(`uniform ${d.type} ${d.name}${\n          d.arrayIndex ? `[${d.arrayIndex}]` : ''};`);\n    });\n  }\n  const inputPrefixSnippet = prefixSnippets.join('\\n');\n\n  const inputSamplingSnippet = inputsInfo\n                                   .map(\n                                       x => getInputSamplingSnippet(\n                                           x, outputShape, program.packedInputs,\n                                           program.enableShapeUniforms))\n                                   .join('\\n');\n  const outTexShape = outputShape.texShape;\n  const glsl = getGlslDifferences();\n  const floatTextureSampleSnippet = getFloatTextureSampleSnippet(glsl);\n  let outputSamplingSnippet: string;\n  let floatTextureSetOutputSnippet: string;\n  let shaderPrefix = getShaderPrefix(glsl);\n\n  if (outputShape.isPacked) {\n    outputSamplingSnippet = getPackedOutputSamplingSnippet(\n        outputShape.logicalShape, outTexShape, program.enableShapeUniforms);\n    floatTextureSetOutputSnippet = getFloatTextureSetRGBASnippet(glsl);\n  } else {\n    outputSamplingSnippet = getOutputSamplingSnippet(\n        outputShape.logicalShape, outTexShape, program.enableShapeUniforms);\n    floatTextureSetOutputSnippet = getFloatTextureSetRSnippet(glsl);\n  }\n\n  if (program.packedInputs) {\n    shaderPrefix += SHADER_PACKED_PREFIX;\n  }\n\n  const source = [\n    shaderPrefix, floatTextureSampleSnippet, floatTextureSetOutputSnippet,\n    inputPrefixSnippet, outputSamplingSnippet, inputSamplingSnippet,\n    program.userCode\n  ].join('\\n');\n  return source;\n}\n\nfunction getSamplerFromInInfo(\n    inInfo: InputInfo, enableShapeUniforms = false): string {\n  const shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getSamplerScalar(inInfo, enableShapeUniforms);\n    case 1:\n      return getSampler1D(inInfo, enableShapeUniforms);\n    case 2:\n      return getSampler2D(inInfo, enableShapeUniforms);\n    case 3:\n      return getSampler3D(inInfo, enableShapeUniforms);\n    case 4:\n      return getSampler4D(inInfo, enableShapeUniforms);\n    case 5:\n      return getSampler5D(inInfo);\n    case 6:\n      return getSampler6D(inInfo);\n    default:\n      throw new Error(\n          `${shape.length}-D input sampling` +\n          ` is not yet supported`);\n  }\n}\n\nfunction getPackedSamplerFromInInfo(\n    inInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getPackedSamplerScalar(inInfo);\n    case 1:\n      return getPackedSampler1D(inInfo, enableShapeUniforms);\n    case 2:\n      return getPackedSampler2D(inInfo, enableShapeUniforms);\n    case 3:\n      return getPackedSampler3D(inInfo, enableShapeUniforms);\n    default:\n      return getPackedSamplerND(inInfo, enableShapeUniforms);\n  }\n}\n\nfunction getInputSamplingSnippet(\n    inInfo: InputInfo, outShapeInfo: ShapeInfo, usesPackedTextures = false,\n    enableShapeUniforms: boolean): string {\n  let res = '';\n  if (usesPackedTextures) {\n    res += getPackedSamplerFromInInfo(inInfo, enableShapeUniforms);\n  } else {\n    res += getSamplerFromInInfo(inInfo, enableShapeUniforms);\n  }\n\n  const inShape = inInfo.shapeInfo.logicalShape;\n  const outShape = outShapeInfo.logicalShape;\n  if (inShape.length <= outShape.length) {\n    if (usesPackedTextures) {\n      res += getPackedSamplerAtOutputCoords(inInfo, outShapeInfo);\n    } else {\n      res += getSamplerAtOutputCoords(inInfo, outShapeInfo);\n    }\n  }\n  return res;\n}\n\nfunction getPackedOutputSamplingSnippet(\n    outShape: number[], outTexShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutputPacked1DCoords(\n          outShape as [number], outTexShape, enableShapeUniforms);\n    case 2:\n      return getOutputPacked2DCoords(\n          outShape as [number, number], outTexShape, enableShapeUniforms);\n    case 3:\n      return getOutputPacked3DCoords(\n          outShape as [number, number, number], outTexShape,\n          enableShapeUniforms);\n    default:\n      return getOutputPackedNDCoords(\n          outShape, outTexShape, enableShapeUniforms);\n  }\n}\n\nfunction getOutputSamplingSnippet(\n    outShape: number[], outTexShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutput1DCoords(\n          outShape as [number], outTexShape, enableShapeUniforms);\n    case 2:\n      return getOutput2DCoords(\n          outShape as [number, number], outTexShape, enableShapeUniforms);\n    case 3:\n      return getOutput3DCoords(\n          outShape as [number, number, number], outTexShape,\n          enableShapeUniforms);\n    case 4:\n      return getOutput4DCoords(\n          outShape as [number, number, number, number], outTexShape,\n          enableShapeUniforms);\n    case 5:\n      return getOutput5DCoords(\n          outShape as [number, number, number, number, number], outTexShape);\n    case 6:\n      return getOutput6DCoords(\n          outShape as [number, number, number, number, number, number],\n          outTexShape);\n    default:\n      throw new Error(\n          `${outShape.length}-D output sampling is not yet supported`);\n  }\n}\n\nfunction getFloatTextureSampleSnippet(glsl: GLSL): string {\n  return `\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${glsl.texture2D}(textureSampler, uv).r;\n    }\n  `;\n}\n\nfunction getFloatTextureSetRSnippet(glsl: GLSL): string {\n  return `\n    void setOutput(float val) {\n      ${glsl.output} = vec4(val, 0, 0, 0);\n    }\n  `;\n}\n\nfunction getFloatTextureSetRGBASnippet(glsl: GLSL): string {\n  return `\n    void setOutput(vec4 val) {\n      ${glsl.output} = val;\n    }\n  `;\n}\n\nfunction getShaderPrefix(glsl: GLSL): string {\n  const SHADER_PREFIX = `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFs} vec2 resultUV;\n    ${glsl.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${glsl.defineSpecialNaN}\n    ${glsl.defineSpecialInf}\n    ${glsl.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${SAMPLE_1D_SNIPPET}\n    ${SAMPLE_2D_SNIPPET}\n    ${SAMPLE_3D_SNIPPET}\n  `;\n\n  return SHADER_PREFIX;\n}\n\nconst SAMPLE_1D_SNIPPET = `\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SAMPLE_2D_SNIPPET = `\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SAMPLE_3D_SNIPPET = `\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SHADER_PACKED_PREFIX = `\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n`;\n\nfunction getOutputScalarCoords() {\n  return `\n    int getOutputCoords() {\n      return 0;\n    }\n  `;\n}\n\nfunction getOutputPacked1DCoords(\n    shape: [number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (packedTexShape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    `;\n    }\n\n    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${packedTexShape[1]}.0);\n      }\n    `;\n  }\n\n  if (packedTexShape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    `;\n    }\n\n    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${packedTexShape[0]}.0);\n      }\n    `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  `;\n  }\n\n  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      return 2 * (resTexRC.x * ${packedTexShape[1]} + resTexRC.y);\n    }\n  `;\n}\n\nfunction getOutput1DCoords(\n    shape: [number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (texShape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    `;\n    }\n    return `\n      int getOutputCoords() {\n        return int(resultUV.x * ${texShape[1]}.0);\n      }\n    `;\n  }\n  if (texShape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    `;\n    }\n    return `\n      int getOutputCoords() {\n        return int(resultUV.y * ${texShape[0]}.0);\n      }\n    `;\n  }\n  if (enableShapeUniforms) {\n    return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  `;\n  }\n  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      return resTexRC.x * ${texShape[1]} + resTexRC.y;\n    }\n  `;\n}\n\nfunction getOutputPacked3DCoords(\n    shape: [number, number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    return `\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n  }\n\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n\n  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n}\n\nfunction getOutput3DCoords(\n    shape: [number, number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    const coordsFromIndexSnippet =\n        shader_util.getLogicalCoordinatesFromFlatIndexByUniform(\n            ['r', 'c', 'd'], shape);\n\n    return `\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${coordsFromIndexSnippet}\n    return ivec3(r, c, d);\n  }\n`;\n  }\n  const coordsFromIndexSnippet =\n      shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n\n  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\n\nfunction getOutputPackedNDCoords(\n    shape: number[], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    // TODO: support 5d and 6d\n    return `\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  `;\n  }\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n  const texelsInBatch =\n      texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n  let texelsInBatchN = texelsInBatch;\n  let batches = ``;\n  let coords = 'b, r, c';\n\n  for (let b = 2; b < shape.length - 1; b++) {\n    texelsInBatchN *= shape[shape.length - b - 1];\n    batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n    coords = `b${b}, ` + coords;\n  }\n\n  return `\n    ivec${shape.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      ${batches}\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec${shape.length}(${coords});\n    }\n  `;\n}\n\nfunction getOutput4DCoords(\n    shape: [number, number, number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    const coordsFromIndexSnippet =\n        shader_util.getLogicalCoordinatesFromFlatIndexByUniform(\n            ['r', 'c', 'd', 'd2'], shape);\n\n    return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n  }\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2'], shape);\n\n  return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n}\n\nfunction getOutput5DCoords(\n    shape: [number, number, number, number, number],\n    texShape: [number, number]): string {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2', 'd3'], shape);\n\n  return `\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${texShape[0]},\n                             ${texShape[1]}));\n\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `;\n}\n\nfunction getOutput6DCoords(\n    shape: [number, number, number, number, number, number],\n    texShape: [number, number]): string {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2', 'd3', 'd4'], shape);\n\n  return `\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `;\n}\n\nfunction getOutputPacked2DCoords(\n    shape: [number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    `;\n    }\n\n    return `\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${packedTexShape[0]}, ${\n        packedTexShape[1]}));\n      }\n    `;\n  }\n\n  // texels needed to accommodate a logical row\n  const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n\n  /**\n   * getOutputCoords\n   *\n   * resTexRC: The rows and columns of the texels. If you move over one\n   * texel to the right in the packed texture, you are moving over one column\n   * (not two).\n   *\n   * index: The texel index\n   */\n  if (enableShapeUniforms) {\n    return `\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n  }\n\n  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n}\n\nfunction getOutput2DCoords(\n    shape: [number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    `;\n    }\n    return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${texShape[0]}, ${texShape[1]}));\n      }\n    `;\n  }\n  if (shape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n    }\n    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n  }\n  if (shape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n    }\n    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n  }\n  if (enableShapeUniforms) {\n    return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  `;\n  }\n  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      int r = index / ${shape[1]};\n      int c = index - r * ${shape[1]};\n      return ivec2(r, c);\n    }\n  `;\n}\n\nfunction getFlatOffsetUniformName(texName: string): string {\n  return `offset${texName}`;\n}\n\nfunction getPackedSamplerScalar(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const glsl = getGlslDifferences();\n  return `\n    vec4 ${funcName}() {\n      return ${glsl.texture2D}(${texName}, halfCR);\n    }\n  `;\n}\n\nfunction getSamplerScalar(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  if (inputInfo.shapeInfo.isUniform) {\n    return `float ${funcName}() {return ${texName};}`;\n  }\n  const [texNumR, texNumC] = inputInfo.shapeInfo.texShape;\n  if (texNumR === 1 && texNumC === 1) {\n    return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], ${\n        offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const [tNumR, tNumC] = inputInfo.shapeInfo.texShape;\n  return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getPackedSampler1D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  return `\n    vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler1D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int index) {\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texShape = inputInfo.shapeInfo.texShape;\n  const tNumR = texShape[0];\n  const tNumC = texShape[1];\n\n  if (tNumC === 1 && tNumR === 1) {\n    return `\n      float ${funcName}(int index) {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  if (tNumC === 1) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / float(${\n          texName}TexShape[0]));\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / ${tNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (tNumR === 1) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / float(${\n          texName}TexShape[1]), 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / ${tNumC}.0, 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${\n        texName}TexShape[1], index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getPackedSampler2D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const glsl = getGlslDifferences();\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texName}TexShape[1], ${\n          texName}TexShape[0]);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n    }\n    return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${texName}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const valuesPerRow = Math.ceil(shape[1] / 2);\n\n  return `\n    vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${valuesPerRow}, ${packedTexShape[0]}, ${\n      packedTexShape[1]}, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler2D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texName}TexShape[1], ${\n          texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    return `\n    float ${funcName}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n      float ${funcName}(int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${shape[1]}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const offset = getFlatOffsetUniformName(texName);\n  if (texNumC === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        float index = dot(vec3(row, col, ${offset}), vec3(${\n          texName}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${texName}TexShape[0]));\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  if (texNumR === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        float index = dot(vec3(row, col, ${offset}), vec3(${\n          texName}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${texName}TexShape[1]), 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n      float ${funcName}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${texName}Shape[1] + col + ${offset};\n        vec2 uv = uvFromFlat(${texName}TexShape[0], ${\n        texName}TexShape[1], index);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  return `\n  float ${funcName}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${shape[1]} + col + ${offset};\n    vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n    return sampleTexture(${texName}, uv);\n  }\n`;\n}\n\nfunction getPackedSampler3D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  if (shape[0] === 1) {\n    const squeezedShape = shape.slice(1);\n    const keptDims = [1, 2];\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['b', 'row', 'col'];\n    return `\n        ${getPackedSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n        vec4 ${funcName}(int b, int row, int col) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n  }\n\n  const glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${texName}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${\n        texName}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n\n  const valuesPerRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n\n  return `\n    vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumR}, ${texNumC}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler3D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride0 = shape[1] * shape[2];\n  const stride1 = shape[2];\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col', 'depth'];\n    return `\n        ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n        float ${funcName}(int row, int col, int depth) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${stride0}, ${stride1}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth) {\n        int stride1 = ${texName}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n        float ${funcName}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${stride1}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${texNumC}.0, ${texNumR}.0);\n          return sampleTexture(${texName}, uv);\n        }\n      `;\n  }\n\n  if (texNumC === stride1 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${texName}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texName}TexShape[1], ${\n          texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n    float ${funcName}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${shape[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${texName}Shape[1] * ${texName}Shape[2];\n      int stride1 = ${texName}Shape[2];\n      int index = row * ${stride0} + col * ${stride1} + depth + ${offset};\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], index);\n      return sampleTexture(${texName}, uv);\n    }\n    `;\n  }\n  return `\n      float ${funcName}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${stride0} + col * ${stride1} + depth + ${offset};\n        vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n        return sampleTexture(${texName}, uv);\n      }\n  `;\n}\n\nfunction getPackedSamplerND(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    // TODO: support 5d and 6d\n    return `\n    vec4 ${funcName}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${texName}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${\n        texName}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${texName}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${\n        glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const rank = shape.length;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n\n  const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n  let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n  let params = `int b, int row, int col`;\n  let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n  for (let b = 2; b < rank - 1; b++) {\n    params = `int b${b}, ` + params;\n    texelsInBatch *= shape[rank - b - 1];\n    index = `b${b} * ${texelsInBatch} + ` + index;\n  }\n  return `\n    vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler4D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride2 = shape[3];\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${stride0}, ${stride1}, ${stride2}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n\n  const stride2Str = `int stride2 = ${texName}Shape[3];`;\n  const stride1Str = `int stride1 = ${texName}Shape[2] * stride2;`;\n  const stride0Str = `int stride0 = ${texName}Shape[1] * stride1;`;\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        ${stride2Str}\n        ${stride1Str}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${stride1}, ${stride2}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (texNumC === stride2 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${texName}Shape[1] * ${texName}Shape[2], ${\n          texName}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${shape[1] * shape[2]}, ${shape[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${stride2Str}\n      ${stride1Str}\n      ${stride0Str}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${\n        texName}TexShape[1], index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} +\n          depth * ${stride2} + depth2;\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler5D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride3 = shape[4];\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          depth3;\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${stride1}, ${stride2}, ${stride3}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  if (texNumC === stride3 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3]},\n               ${shape[2] * shape[3]}, ${shape[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler6D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  const stride4 = shape[5];\n  const stride3 = shape[4] * stride4;\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${stride4}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${stride1}, ${stride2}, ${stride3}, ${stride4})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (texNumC === stride4 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3] * shape[4]},\n               ${shape[2] * shape[3] * shape[4]},\n               ${shape[3] * shape[4]},\n               ${shape[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 * ${stride4} + depth4 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getUniformSampler(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n\n  if (inSize < 2) {\n    return `return ${texName};`;\n  }\n\n  return `\n    for (int i = 0; i < ${inSize}; i++) {\n      if (i == index) {\n        return ${texName}[i];\n      }\n    }\n  `;\n}\n\nfunction getPackedSamplerAtOutputCoords(\n    inputInfo: InputInfo, outShapeInfo: ShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n\n  const broadcastDims = getBroadcastDims(\n      inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n\n  const type = getCoordsDataType(outRank);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet: string;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet =\n        broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n            .join('\\n');\n  }\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n                                .map((s, i) => `coords.${fields[i + rankDiff]}`)\n                                .join(', ');\n  }\n\n  let output = `return outputValue;`;\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n  const isInputScalar = inSize === 1;\n  const outSize = util.sizeFromShape(outShapeInfo.logicalShape);\n  const isOutputScalar = outSize === 1;\n\n  if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n    output = `\n      return vec4(outputValue.xy, outputValue.xy);\n    `;\n  } else if (isInputScalar && !isOutputScalar) {\n    if (outRank === 1) {\n      output = `\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      `;\n    } else {\n      output = `\n        return vec4(outputValue.x);\n      `;\n    }\n  } else if (broadcastDims.length) {\n    const rows = inRank - 2;\n    const cols = inRank - 1;\n\n    if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n      output = `return vec4(outputValue.x);`;\n    } else if (broadcastDims.indexOf(rows) > -1) {\n      output = `return vec4(outputValue.x, outputValue.y, ` +\n          `outputValue.x, outputValue.y);`;\n    } else if (broadcastDims.indexOf(cols) > -1) {\n      output = `return vec4(outputValue.xx, outputValue.zz);`;\n    }\n  }\n\n  return `\n    vec4 ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      vec4 outputValue = get${texFuncSnippet}(${unpackedCoordsSnippet});\n      ${output}\n    }\n  `;\n}\n\nfunction getSamplerAtOutputCoords(\n    inputInfo: InputInfo, outShapeInfo: ShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const outTexShape = outShapeInfo.texShape;\n  const inTexShape = inputInfo.shapeInfo.texShape;\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n\n  if (!inputInfo.shapeInfo.isUniform && inRank === outRank &&\n      inputInfo.shapeInfo.flatOffset == null &&\n      util.arraysEqual(inTexShape, outTexShape)) {\n    return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, resultUV);\n      }\n    `;\n  }\n\n  const type = getCoordsDataType(outRank);\n  const broadcastDims = getBroadcastDims(\n      inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet: string;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet =\n        broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n            .join('\\n');\n  }\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n                                .map((s, i) => `coords.${fields[i + rankDiff]}`)\n                                .join(', ');\n  }\n\n  return `\n    float ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      return get${texFuncSnippet}(${unpackedCoordsSnippet});\n    }\n  `;\n}\n\nexport function getCoordsDataType(rank: number): string {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\n\nexport function getUniformInfoFromShape(\n    isPacked: boolean, shape: number[], texShape: number[]) {\n  const {newShape} = util.squeezeShape(shape);\n  const rank = shape.length;\n  const useSqueezePackedShape = isPacked && rank === 3 && shape[0] === 1;\n  const squeezeShape = useSqueezePackedShape ? shape.slice(1) : newShape;\n  const useSqueezeShape =\n      (!isPacked && rank > 1 && !util.arraysEqual(shape, texShape) &&\n       newShape.length < rank) ||\n      useSqueezePackedShape;\n  const uniformShape = useSqueezeShape ? squeezeShape : shape;\n  return {useSqueezeShape, uniformShape};\n}\n\n/** Returns a new input info (a copy) that has a squeezed logical shape. */\nexport function squeezeInputInfo(\n    inInfo: InputInfo, squeezedShape: number[]): InputInfo {\n  // Deep copy.\n  const newInputInfo: InputInfo = JSON.parse(JSON.stringify(inInfo));\n  newInputInfo.shapeInfo.logicalShape = squeezedShape;\n  return newInputInfo;\n}\n\nfunction getSqueezedParams(params: string[], keptDims: number[]): string {\n  return keptDims.map(d => params[d]).join(', ');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, Tensor, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUContext} from './gpgpu_context';\nimport * as shader_compiler from './shader_compiler';\nimport {InputInfo, ShapeInfo, UniformType} from './shader_compiler';\nimport {PackingScheme, TextureData, TextureUsage} from './tex_util';\n\nexport interface GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms?: boolean;\n  /** If true, this program expects packed input textures. Defaults to false. */\n  packedInputs?: boolean;\n  /** If true, this program produces a packed texture. Defaults to false. */\n  packedOutput?: boolean;\n  /**\n   * Affects what type of texture we allocate for the output. Defaults to\n   * `TextureUsage.RENDER`.\n   */\n  outTexUsage?: TextureUsage;\n  /**\n   * The type of scheme to use when packing texels for the output values.\n   * See `PackingScheme` for details. Defaults to `PackingScheme.SHARED_BATCH`.\n   */\n  outPackingScheme?: PackingScheme;\n  customUniforms?:\n      Array<{name: string; arrayIndex?: number; type: UniformType;}>;\n}\n\nexport interface GPGPUBinary {\n  webGLProgram: WebGLProgram;\n  program: GPGPUProgram;\n  uniformLocations: {[name: string]: WebGLUniformLocation};\n  customUniformLocations?: WebGLUniformLocation[];\n  source: string;\n  inShapeInfos: ShapeInfo[];\n  outShapeInfo: ShapeInfo;\n  infLoc: WebGLUniformLocation;\n  nanLoc: WebGLUniformLocation;\n  inShapesLocations?: {[name: string]: WebGLUniformLocation};\n  inTexShapesLocations?: {[name: string]: WebGLUniformLocation};\n  outShapeLocation?: WebGLUniformLocation;\n  outShapeStridesLocation?: WebGLUniformLocation;\n  outTexShapeLocation?: WebGLUniformLocation;\n}\n\nexport interface TensorData {\n  shape: number[];\n  texData: TextureData;\n  isUniform: boolean;\n  // Available when we decide to upload as uniform instead of texture.\n  uniformValues?: TypedArray;\n}\n\nexport function compileProgram<T extends Tensor, K extends Tensor>(\n    gpgpu: GPGPUContext, program: GPGPUProgram, inputs: TensorData[],\n    output: TensorData): GPGPUBinary {\n  const inputInfos: InputInfo[] = inputs.map((input, i) => {\n    const shapeInfo: ShapeInfo = {\n      logicalShape: input.shape,\n      texShape: input.isUniform ? null : input.texData.texShape,\n      isUniform: input.isUniform,\n      isPacked: input.isUniform ? false : input.texData.isPacked,\n      flatOffset: null\n    };\n    if (input.texData != null && input.texData.slice != null &&\n        input.texData.slice.flatOffset > 0) {\n      shapeInfo.flatOffset = input.texData.slice.flatOffset;\n    }\n    return {name: program.variableNames[i], shapeInfo};\n  });\n  const inShapeInfos = inputInfos.map(x => x.shapeInfo);\n  const outShapeInfo: ShapeInfo = {\n    logicalShape: output.shape,\n    texShape: output.texData.texShape,\n    isUniform: false,\n    isPacked: output.texData.isPacked,\n    flatOffset: null\n  };\n  const source = shader_compiler.makeShader(inputInfos, outShapeInfo, program);\n\n  const webGLProgram = gpgpu.createProgram(source);\n\n  // Add special uniforms (NAN, INFINITY)\n  let infLoc: WebGLUniformLocation = null;\n  const nanLoc = gpgpu.getUniformLocation(webGLProgram, 'NAN', false);\n  if (env().getNumber('WEBGL_VERSION') === 1) {\n    infLoc = gpgpu.getUniformLocation(webGLProgram, 'INFINITY', false);\n  }\n\n  // Add user-defined uniforms\n  const shouldThrow = false;\n  const uniformLocations: {[name: string]: WebGLUniformLocation} = {};\n  const inShapesLocations: {[name: string]: WebGLUniformLocation} = {};\n  const inTexShapesLocations: {[name: string]: WebGLUniformLocation} = {};\n  for (let i = 0; i < program.variableNames.length; i++) {\n    const varName = program.variableNames[i];\n    uniformLocations[varName] =\n        gpgpu.getUniformLocation(webGLProgram, varName, shouldThrow);\n    uniformLocations[`offset${varName}`] =\n        gpgpu.getUniformLocation(webGLProgram, `offset${varName}`, shouldThrow);\n    if (program.enableShapeUniforms) {\n      inShapesLocations[`${varName}Shape`] = gpgpu.getUniformLocation(\n          webGLProgram, `${varName}Shape`, shouldThrow);\n      inTexShapesLocations[`${varName}TexShape`] = gpgpu.getUniformLocation(\n          webGLProgram, `${varName}TexShape`, shouldThrow);\n    }\n  }\n\n  let outShapeLocation: WebGLUniformLocation;\n  let outTexShapeLocation: WebGLUniformLocation;\n  let outShapeStridesLocation: WebGLUniformLocation;\n  if (program.enableShapeUniforms) {\n    outShapeLocation =\n        gpgpu.getUniformLocation(webGLProgram, 'outShape', shouldThrow);\n    outShapeStridesLocation =\n        gpgpu.getUniformLocation(webGLProgram, 'outShapeStrides', shouldThrow);\n    outTexShapeLocation =\n        gpgpu.getUniformLocation(webGLProgram, 'outTexShape', shouldThrow);\n  }\n\n  const customUniformLocations: WebGLUniformLocation[] = [];\n  if (program.customUniforms) {\n    program.customUniforms.forEach((d, i) => {\n      customUniformLocations[i] =\n          gpgpu.getUniformLocation(webGLProgram, d.name, shouldThrow);\n    });\n  }\n\n  return {\n    program,\n    source,\n    webGLProgram,\n    uniformLocations,\n    customUniformLocations,\n    inShapeInfos,\n    outShapeInfo,\n    infLoc,\n    nanLoc,\n    inShapesLocations,\n    inTexShapesLocations,\n    outShapeLocation,\n    outShapeStridesLocation,\n    outTexShapeLocation\n  };\n}\n\nfunction validateBinaryAndProgram(\n    shapeInfos: ShapeInfo[], inputs: TensorData[]) {\n  if (shapeInfos.length !== inputs.length) {\n    throw Error(\n        `Binary was compiled with ${shapeInfos.length} inputs, but ` +\n        `was executed with ${inputs.length} inputs`);\n  }\n\n  shapeInfos.forEach((s, i) => {\n    const shapeA = s.logicalShape;\n    const input = inputs[i];\n    const shapeB = input.shape;\n\n    if (!util.arraysEqual(shapeA, shapeB)) {\n      throw Error(\n          `Binary was compiled with different shapes than ` +\n          `the current args. Shapes ${shapeA} and ${shapeB} must match`);\n    }\n    // The input is uploaded as uniform.\n    if (s.isUniform && input.isUniform) {\n      return;\n    }\n\n    const texShapeA = s.texShape;\n    const texShapeB = input.isUniform ? null : input.texData.texShape;\n    if (!util.arraysEqual(texShapeA, texShapeB)) {\n      throw Error(\n          `Binary was compiled with different texture shapes than the` +\n          ` current args. Shape ${texShapeA} and ${texShapeB} must match`);\n    }\n  });\n}\n\nexport function runProgram<T extends Tensor, K extends Tensor>(\n    gpgpu: GPGPUContext, binary: GPGPUBinary, inputs: TensorData[],\n    output: TensorData, customUniformValues?: number[][]): void {\n  if (!binary.program.enableShapeUniforms) {\n    validateBinaryAndProgram(binary.inShapeInfos, inputs);\n    validateBinaryAndProgram([binary.outShapeInfo], [output]);\n  }\n\n  const outTex = output.texData.texture;\n  const outTexShape = output.texData.texShape;\n  if (output.texData.isPacked) {\n    gpgpu.setOutputPackedMatrixTexture(outTex, outTexShape[0], outTexShape[1]);\n  } else {\n    gpgpu.setOutputMatrixTexture(outTex, outTexShape[0], outTexShape[1]);\n  }\n  gpgpu.setProgram(binary.webGLProgram);\n\n  // Set special uniforms (NAN, INFINITY)\n  if (env().getNumber('WEBGL_VERSION') === 1) {\n    if (binary.infLoc !== null) {\n      gpgpu.gl.uniform1f(binary.infLoc, Infinity);\n    }\n  }\n  if (binary.nanLoc !== null) {\n    gpgpu.gl.uniform1f(binary.nanLoc, NaN);\n  }\n\n  // Set user-defined inputs\n  inputs.forEach((input, i) => {\n    const varName = binary.program.variableNames[i];\n    const varLoc = binary.uniformLocations[varName];\n    const varOffsetLoc = binary.uniformLocations[`offset${varName}`];\n    const varShapeLoc = binary.inShapesLocations[`${varName}Shape`];\n    const varTexShapeLoc = binary.inTexShapesLocations[`${varName}TexShape`];\n\n    if (varShapeLoc) {\n      const {uniformShape} = shader_compiler.getUniformInfoFromShape(\n          binary.program.packedInputs, input.shape, input.texData.texShape);\n      switch (uniformShape.length) {\n        case 1:\n          gpgpu.gl.uniform1iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n        case 2:\n          gpgpu.gl.uniform2iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n        case 3:\n          gpgpu.gl.uniform3iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n        case 4:\n          gpgpu.gl.uniform4iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n        default:\n          break;\n      }\n    }\n    if (varTexShapeLoc) {\n      gpgpu.gl.uniform2i(\n          varTexShapeLoc, input.texData.texShape[0], input.texData.texShape[1]);\n    }\n\n    if (varLoc == null) {\n      // The compiler inferred that this variable is not used in this shader.\n      return;\n    }\n\n    if (input.isUniform) {\n      // Upload the values of the tensor as uniform.\n      if (util.sizeFromShape(input.shape) < 2) {\n        gpgpu.gl.uniform1f(varLoc, input.uniformValues[0]);\n      } else {\n        let vals = input.uniformValues;\n        if (!(vals instanceof Float32Array)) {\n          vals = new Float32Array(vals);\n        }\n        gpgpu.gl.uniform1fv(varLoc, vals);\n      }\n      return;\n    }\n\n    // If the input was sliced, upload the flat offset index.\n    if (input.texData.slice != null && varOffsetLoc != null) {\n      gpgpu.gl.uniform1i(varOffsetLoc, input.texData.slice.flatOffset);\n    }\n\n    gpgpu.setInputMatrixTexture(input.texData.texture, varLoc, i);\n  });\n\n  const outShapeLoc = binary.outShapeLocation;\n  if (outShapeLoc) {\n    switch (output.shape.length) {\n      case 1:\n        gpgpu.gl.uniform1iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n      case 2:\n        gpgpu.gl.uniform2iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n      case 3:\n        gpgpu.gl.uniform3iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n      case 4:\n        gpgpu.gl.uniform4iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n      default:\n        break;\n    }\n  }\n  if (binary.outShapeStridesLocation) {\n    const strides = util.computeStrides(output.shape);\n    switch (output.shape.length) {\n      case 2:\n        gpgpu.gl.uniform1iv(\n            binary.outShapeStridesLocation, new Int32Array(strides));\n        break;\n      case 3:\n        gpgpu.gl.uniform2iv(\n            binary.outShapeStridesLocation, new Int32Array(strides));\n        break;\n      case 4:\n        gpgpu.gl.uniform3iv(\n            binary.outShapeStridesLocation, new Int32Array(strides));\n        break;\n      default:\n        break;\n    }\n  }\n  if (binary.outTexShapeLocation) {\n    gpgpu.gl.uniform2i(\n        binary.outTexShapeLocation, output.texData.texShape[0],\n        output.texData.texShape[1]);\n  }\n\n  if (binary.program.customUniforms && customUniformValues) {\n    binary.program.customUniforms.forEach((d, i) => {\n      const customLoc = binary.customUniformLocations[i];\n      const customValue = customUniformValues[i];\n      if (d.type === 'float') {\n        gpgpu.gl.uniform1fv(customLoc, customValue);\n      } else if (d.type === 'vec2') {\n        gpgpu.gl.uniform2fv(customLoc, customValue);\n      } else if (d.type === 'vec3') {\n        gpgpu.gl.uniform3fv(customLoc, customValue);\n      } else if (d.type === 'vec4') {\n        gpgpu.gl.uniform4fv(customLoc, customValue);\n      } else if (d.type === 'int') {\n        gpgpu.gl.uniform1iv(customLoc, customValue);\n      } else if (d.type === 'ivec2') {\n        gpgpu.gl.uniform2iv(customLoc, customValue);\n      } else if (d.type === 'ivec3') {\n        gpgpu.gl.uniform3iv(customLoc, customValue);\n      } else if (d.type === 'ivec4') {\n        gpgpu.gl.uniform4iv(customLoc, customValue);\n      } else {\n        throw Error(`uniform type ${d.type} is not supported yet.`);\n      }\n    });\n  }\n  gpgpu.executeProgram();\n}\n\nexport function makeShaderKey(\n    program: GPGPUProgram, inputs: TensorData[], output: TensorData): string {\n  let keyInputs = '';\n  inputs.concat(output).forEach(x => {\n    const hasOffset = x.texData != null && x.texData.slice != null &&\n        x.texData.slice.flatOffset > 0;\n    // TODO: Remove the condition of !x.isUniform.\n    if (program.enableShapeUniforms && !x.isUniform) {\n      const xTexShape = x.texData.texShape;\n      const {useSqueezeShape, uniformShape} =\n          shader_compiler.getUniformInfoFromShape(\n              program.packedInputs, x.shape, xTexShape);\n      let rank1 = '', rank2 = '', rank34 = '';\n      if (uniformShape.length === 1 && program.packedInputs) {\n        const packedTexShape =\n            [Math.ceil(xTexShape[0] / 2), Math.ceil(xTexShape[1] / 2)];\n        rank1 = `${packedTexShape[0] > 1}_${packedTexShape[1] > 1}`;\n      } else if (uniformShape.length === 2 && !program.packedInputs) {\n        rank2 = `${uniformShape[0] > 1}_${uniformShape[1] > 1}`;\n      } else if (uniformShape.length > 2 && !program.packedInputs) {\n        const strides = util.computeStrides(uniformShape);\n        rank34 = `${strides[0] === xTexShape[1]}_${\n            strides[strides.length - 1] === xTexShape[1]}`;\n      }\n      const xRank = x.shape.length;\n      const isLogicalShapTexShapeEqual =\n          xRank === 2 && util.arraysEqual(x.shape, xTexShape);\n      const isScalar = util.sizeFromShape(x.shape) === 1;\n      const broadcastDims =\n          backend_util.getBroadcastDims(x.shape, output.shape);\n      const isInOutTexShapeEqual = !program.packedInputs &&\n          xRank === output.shape.length &&\n          util.arraysEqual(xTexShape, output.texData.texShape);\n      const isTexShapeGreaterThanOne = program.packedInputs || xRank > 2 ?\n          '' :\n          `${xTexShape[0] > 1}_${xTexShape[1] > 1}`;\n      // These key components are needed due to shader_compiler is embedding\n      // them in the shader.\n      // |xRank| is used to determine the coords length. See\n      // get[Packed]SamplerAtOutputCoords.\n      // |isInOutTexShapeEqual| is used to determine whether going to an\n      // optimization path in getSamplerAtOutputCoords.\n      // |useSqueezeShape| is extracted from squeezeInputInfo of\n      // getSampler[2|3|4]D/getPackedSampler3D.\n      // |isScalar| is extracted from isInputScalar/isOutputScalar in\n      // getPackedSamplerAtOutputCoords.\n      // |broadcastDims| is extracted from get[Packed]SamplerAtOutputCoords.\n      // |isLogicalShapTexShapeEqual| is used in\n      // getOutput[Packed]2DCoords/get[Packed]Sampler2D.\n      // |rank1| is used in getOutputPacked1DCoords.\n      // |rank2| is used in getOutput2DCoords.\n      // |rank34| is used in getSampler3D/getSampler4D.\n      // |isTexShapeGreaterThanOne| are used in\n      // getSampler[Scalar|1D|2D]/getOutput1DCoords.\n      keyInputs += `${xRank}_${isInOutTexShapeEqual}_${useSqueezeShape}_${\n          uniformShape.length}_${isScalar}_${broadcastDims}_${\n          isLogicalShapTexShapeEqual}_${rank1}_${rank2}_${rank34}_${\n          isTexShapeGreaterThanOne}_${hasOffset}`;\n    } else {\n      const texShape = x.isUniform ? 'uniform' : x.texData.texShape;\n      keyInputs += `${x.shape}_${texShape}_${hasOffset}`;\n    }\n  });\n  const keyUserCode = program.userCode;\n  let key = program.constructor.name;\n  // Fast string concat. See https://jsperf.com/string-concatenation/14.\n  key += '_' + keyInputs + '_' + keyUserCode +\n      `${env().getNumber('WEBGL_VERSION')}`;\n  return key;\n}\n\nexport function useShapeUniforms(rank: number) {\n  // TODO: Remove the limitaion of rank <= 4.\n  return env().getBool('WEBGL_USE_SHAPES_UNIFORMS') && rank <= 4;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\n/**\n * Template that creates implementation for binary ops. Supports broadcast.\n */\nexport function createSimpleBinaryKernelImpl(op) {\n    return (aShape, bShape, aVals, bVals, dtype) => {\n        const newShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n        const resultRank = newShape.length;\n        const resultStrides = util.computeStrides(newShape);\n        const resultSize = util.sizeFromShape(newShape);\n        const result = util.getTypedArrayFromDType(dtype, resultSize);\n        const aRank = aShape.length;\n        const bRank = bShape.length;\n        const aStrides = util.computeStrides(aShape);\n        const bStrides = util.computeStrides(bShape);\n        const aBroadcastDims = backend_util.getBroadcastDims(aShape, newShape);\n        const bBroadcastDims = backend_util.getBroadcastDims(bShape, newShape);\n        if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n            for (let i = 0; i < result.length; ++i) {\n                result[i] = op(aVals[i % aVals.length], bVals[i % bVals.length]);\n            }\n        }\n        else {\n            for (let i = 0; i < result.length; ++i) {\n                const loc = util.indexToLoc(i, resultRank, resultStrides);\n                const aLoc = loc.slice(-aRank);\n                aBroadcastDims.forEach(d => aLoc[d] = 0);\n                const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n                const bLoc = loc.slice(-bRank);\n                bBroadcastDims.forEach(d => bLoc[d] = 0);\n                const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n                result[i] = op(aVals[aIndex], bVals[bIndex]);\n            }\n        }\n        return [result, newShape];\n    };\n}\n//# sourceMappingURL=binary_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Add } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc, createComplexBinaryKernelImpl } from '../utils/binary_utils';\nexport const addImpl = createSimpleBinaryKernelImpl(((a, b) => a + b));\nexport const addComplexImpl = createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n    return { real: aReal + bReal, imag: aImag + bImag };\n}));\nexport const add = binaryKernelFunc(Add, addImpl, addComplexImpl);\nexport const addConfig = {\n    kernelName: Add,\n    backendName: 'cpu',\n    kernelFunc: add\n};\n//# sourceMappingURL=Add.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\n/**\n * Template that creates implementation for unary op.\n */\nexport function createSimpleUnaryImpl(op) {\n    return (values, dtype, attrs) => {\n        const newValues = util.getTypedArrayFromDType(dtype, values.length);\n        for (let i = 0; i < values.length; ++i) {\n            newValues[i] = op(values[i], attrs);\n        }\n        return newValues;\n    };\n}\n//# sourceMappingURL=unary_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Ceil } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFuncFromImpl } from '../utils/unary_utils';\nexport const ceilImpl = createSimpleUnaryImpl((xi) => Math.ceil(xi));\nexport const ceil = unaryKernelFuncFromImpl(Ceil, ceilImpl);\nexport const ceilConfig = {\n    kernelName: Ceil,\n    backendName: 'cpu',\n    kernelFunc: ceil,\n};\n//# sourceMappingURL=Ceil.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Equal } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const equalImpl = createSimpleBinaryKernelImpl((a, b) => (a === b) ? 1 : 0);\nexport const equal = binaryKernelFunc(Equal, equalImpl, null /* complexImpl */, 'bool');\nexport const equalConfig = {\n    kernelName: Equal,\n    backendName: 'cpu',\n    kernelFunc: equal\n};\n//# sourceMappingURL=Equal.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Exp } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFuncFromImpl } from '../utils/unary_utils';\nexport const expImpl = createSimpleUnaryImpl((xi) => Math.exp(xi));\nexport const exp = unaryKernelFuncFromImpl(Exp, expImpl);\nexport const expConfig = {\n    kernelName: Exp,\n    backendName: 'cpu',\n    kernelFunc: exp,\n};\n//# sourceMappingURL=Exp.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Expm1 } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFuncFromImpl } from '../utils/unary_utils';\nexport const expm1Impl = createSimpleUnaryImpl((xi) => Math.expm1(xi));\nexport const expm1 = unaryKernelFuncFromImpl(Expm1, expm1Impl);\nexport const expm1Config = {\n    kernelName: Expm1,\n    backendName: 'cpu',\n    kernelFunc: expm1,\n};\n//# sourceMappingURL=Expm1.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Floor } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFuncFromImpl } from '../utils/unary_utils';\nexport const floorImpl = createSimpleUnaryImpl((xi) => Math.floor(xi));\nexport const floor = unaryKernelFuncFromImpl(Floor, floorImpl);\nexport const floorConfig = {\n    kernelName: Floor,\n    backendName: 'cpu',\n    kernelFunc: floor,\n};\n//# sourceMappingURL=Floor.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Greater } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const greaterImpl = createSimpleBinaryKernelImpl((a, b) => (a > b) ? 1 : 0);\nexport const greater = binaryKernelFunc(Greater, greaterImpl, null /* complexImpl */, 'bool');\nexport const greaterConfig = {\n    kernelName: Greater,\n    backendName: 'cpu',\n    kernelFunc: greater\n};\n//# sourceMappingURL=Greater.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { GreaterEqual } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const greaterEqualImpl = createSimpleBinaryKernelImpl((a, b) => (a >= b) ? 1 : 0);\nexport const greaterEqual = binaryKernelFunc(GreaterEqual, greaterEqualImpl, null /* complexImpl */, 'bool');\nexport const greaterEqualConfig = {\n    kernelName: GreaterEqual,\n    backendName: 'cpu',\n    kernelFunc: greaterEqual\n};\n//# sourceMappingURL=GreaterEqual.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Less } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const lessImpl = createSimpleBinaryKernelImpl((a, b) => (a < b) ? 1 : 0);\nexport const less = binaryKernelFunc(Less, lessImpl, null /* complexImpl */, 'bool');\nexport const lessConfig = {\n    kernelName: Less,\n    backendName: 'cpu',\n    kernelFunc: less\n};\n//# sourceMappingURL=Less.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LessEqual } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const lessEqualImpl = createSimpleBinaryKernelImpl((a, b) => (a <= b) ? 1 : 0);\nexport const lessEqual = binaryKernelFunc(LessEqual, lessEqualImpl, null /* complexImpl */, 'bool');\nexport const lessEqualConfig = {\n    kernelName: LessEqual,\n    backendName: 'cpu',\n    kernelFunc: lessEqual\n};\n//# sourceMappingURL=LessEqual.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Log } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFuncFromImpl } from '../utils/unary_utils';\nexport const logImpl = createSimpleUnaryImpl((xi) => Math.log(xi));\nexport const log = unaryKernelFuncFromImpl(Log, logImpl);\nexport const logConfig = {\n    kernelName: Log,\n    backendName: 'cpu',\n    kernelFunc: log,\n};\n//# sourceMappingURL=Log.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Maximum } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const maximumImpl = createSimpleBinaryKernelImpl(((aValue, bValue) => Math.max(aValue, bValue)));\nexport const maximum = binaryKernelFunc(Maximum, maximumImpl);\nexport const maximumConfig = {\n    kernelName: Maximum,\n    backendName: 'cpu',\n    kernelFunc: maximum\n};\n//# sourceMappingURL=Maximum.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Minimum } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const minimumImpl = createSimpleBinaryKernelImpl(((aValue, bValue) => Math.min(aValue, bValue)));\nexport const minimum = binaryKernelFunc(Minimum, minimumImpl);\nexport const minimumConfig = {\n    kernelName: Minimum,\n    backendName: 'cpu',\n    kernelFunc: minimum\n};\n//# sourceMappingURL=Minimum.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Multiply } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc, createComplexBinaryKernelImpl } from '../utils/binary_utils';\nexport const multiplyImpl = createSimpleBinaryKernelImpl(((aValue, bValue) => aValue * bValue));\nexport const multiplyComplexImpl = createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n    return {\n        real: aReal * bReal - aImag * bImag,\n        imag: aReal * bImag + aImag * bReal\n    };\n}));\nexport const multiply = binaryKernelFunc(Multiply, multiplyImpl, multiplyComplexImpl);\nexport const multiplyConfig = {\n    kernelName: Multiply,\n    backendName: 'cpu',\n    kernelFunc: multiply\n};\n//# sourceMappingURL=Multiply.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { NotEqual } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const notEqualImpl = createSimpleBinaryKernelImpl(((a, b) => (a !== b) ? 1 : 0));\nexport const notEqual = binaryKernelFunc(NotEqual, notEqualImpl, null /* complexOp */, 'bool');\nexport const notEqualConfig = {\n    kernelName: NotEqual,\n    backendName: 'cpu',\n    kernelFunc: notEqual\n};\n//# sourceMappingURL=NotEqual.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Rsqrt } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFuncFromImpl } from '../utils/unary_utils';\nexport const rsqrtImpl = createSimpleUnaryImpl((xi) => 1 / Math.sqrt(xi));\nexport const rsqrt = unaryKernelFuncFromImpl(Rsqrt, rsqrtImpl);\nexport const rsqrtConfig = {\n    kernelName: Rsqrt,\n    backendName: 'cpu',\n    kernelFunc: rsqrt,\n};\n//# sourceMappingURL=Rsqrt.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { SquaredDifference } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const squaredDifferenceImpl = createSimpleBinaryKernelImpl(((a, b) => {\n    const diff = a - b;\n    return diff * diff;\n}));\nexport const squaredDifference = binaryKernelFunc(SquaredDifference, squaredDifferenceImpl);\nexport const squaredDifferenceConfig = {\n    kernelName: SquaredDifference,\n    backendName: 'cpu',\n    kernelFunc: squaredDifference\n};\n//# sourceMappingURL=SquaredDifference.js.map","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\n/**\n * The StringNGramsOp class creates ngrams from ragged string data.\n * The constructor contains all attributes related to the operation such as\n * padding widths and strings, and the compute function can be used to\n * compute the ngrams for different ragged tensor inputs.\n */\nclass StringNGramsOp {\n    constructor(separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences) {\n        this.separator = util.encodeString(separator);\n        this.nGramWidths = nGramWidths;\n        this.leftPad = util.encodeString(leftPad);\n        this.rightPad = util.encodeString(rightPad);\n        this.padWidth = padWidth;\n        this.preserveShort = preserveShortSequences;\n    }\n    getPadWidth(nGramWidth) {\n        // Ngrams can be padded with either a fixed pad width or a dynamic pad\n        // width depending on the 'padWidth' arg, but in no case should the padding\n        // ever be wider than 'nGramWidth' - 1.\n        return Math.min(this.padWidth < 0 ? nGramWidth - 1 : this.padWidth, nGramWidth - 1);\n    }\n    getNumNGrams(length, nGramWidth) {\n        const padWidth = this.getPadWidth(nGramWidth);\n        return Math.max(0, ((length + 2 * padWidth) - nGramWidth) + 1);\n    }\n    createNGrams(data, splitIndex, output, outputStartIndex, numNGrams, nGramWidth) {\n        for (let nGramIndex = 0; nGramIndex < numNGrams; ++nGramIndex) {\n            const padWidth = this.getPadWidth(nGramWidth);\n            const leftPadding = Math.max(0, padWidth - nGramIndex);\n            const rightPadding = Math.max(0, padWidth - (numNGrams - (nGramIndex + 1)));\n            const numTokens = nGramWidth - (leftPadding + rightPadding);\n            const dataStartIndex = splitIndex + (leftPadding > 0 ? 0 : nGramIndex - padWidth);\n            // Calculate the total expected size of the nGram so we can reserve the\n            // correct amount of space in the string.\n            let nGramSize = 0;\n            // Size of the left padding.\n            nGramSize += leftPadding * this.leftPad.length;\n            // Size of the tokens.\n            for (let n = 0; n < numTokens; ++n) {\n                nGramSize += data[dataStartIndex + n].length;\n            }\n            // Size of the right padding.\n            nGramSize += rightPadding * this.rightPad.length;\n            // Size of the separators.\n            const numSeparators = leftPadding + rightPadding + numTokens - 1;\n            nGramSize += numSeparators * this.separator.length;\n            // Build the nGram.\n            output[outputStartIndex + nGramIndex] = new Uint8Array(nGramSize);\n            const nGram = output[outputStartIndex + nGramIndex];\n            let nextNGramIndex = 0;\n            const appendToNGram = (str) => str.forEach((value) => nGram[nextNGramIndex++] = value);\n            for (let n = 0; n < leftPadding; ++n) {\n                appendToNGram(this.leftPad);\n                appendToNGram(this.separator);\n            }\n            // Only output first numTokens - 1 pairs of data and separator\n            for (let n = 0; n < numTokens - 1; ++n) {\n                appendToNGram(data[dataStartIndex + n]);\n                appendToNGram(this.separator);\n            }\n            // Handle case when there are no tokens or no right padding as these\n            // can result in consecutive separators.\n            if (numTokens > 0) {\n                // If we have tokens, then output last and then pair each separator\n                // with the right padding that follows, to ensure nGram ends either with\n                // the token or with the right pad.\n                appendToNGram(data[dataStartIndex + numTokens - 1]);\n                for (let n = 0; n < rightPadding; ++n) {\n                    appendToNGram(this.separator);\n                    appendToNGram(this.rightPad);\n                }\n            }\n            else {\n                // If we don't have tokens, then the last item inserted into the nGram\n                // has been the separator from the left padding loop above. Hence,\n                // output right pad and separator and make sure to finish with a\n                // padding, not a separator.\n                for (let n = 0; n < rightPadding - 1; ++n) {\n                    appendToNGram(this.rightPad);\n                    appendToNGram(this.separator);\n                }\n                appendToNGram(this.rightPad);\n            }\n        }\n    }\n    // Data and splits together form the definition of the ragged tensor,\n    // where data is 1 dimensional and contains the values of the tensor\n    // and splits denotes the indices at which each row starts.\n    compute(data, splits) {\n        // Validate that the splits are valid indices into data, only if there are\n        // splits specified.\n        const inputDataSize = data.length;\n        const splitsSize = splits.length;\n        if (splitsSize > 0) {\n            let prevSplit = splits[0];\n            if (prevSplit !== 0) {\n                throw new Error(`First split value must be 0, got ${prevSplit}`);\n            }\n            for (let i = 1; i < splitsSize; ++i) {\n                let validSplits = splits[i] >= prevSplit;\n                validSplits = validSplits && (splits[i] <= inputDataSize);\n                if (!validSplits) {\n                    throw new Error(`Invalid split value ${splits[i]}, must be in [${prevSplit}, ${inputDataSize}]`);\n                }\n                prevSplit = splits[i];\n            }\n            if (prevSplit !== inputDataSize) {\n                throw new Error(`Last split value must be data size. Expected ${inputDataSize}, got ${prevSplit}`);\n            }\n        }\n        const numBatchItems = splitsSize - 1;\n        const nGramsSplits = util.getArrayFromDType('int32', splitsSize);\n        // If there is no data or size, return an empty ragged tensor.\n        if (inputDataSize === 0 || splitsSize === 0) {\n            const empty = new Array(inputDataSize);\n            for (let i = 0; i <= numBatchItems; ++i) {\n                nGramsSplits[i] = 0;\n            }\n            return [empty, nGramsSplits];\n        }\n        nGramsSplits[0] = 0;\n        for (let i = 1; i <= numBatchItems; ++i) {\n            const length = splits[i] - splits[i - 1];\n            let numNGrams = 0;\n            this.nGramWidths.forEach((nGramWidth) => {\n                numNGrams += this.getNumNGrams(length, nGramWidth);\n            });\n            if (this.preserveShort && length > 0 && numNGrams === 0) {\n                numNGrams = 1;\n            }\n            nGramsSplits[i] = nGramsSplits[i - 1] + numNGrams;\n        }\n        const nGrams = new Array(nGramsSplits[numBatchItems]);\n        for (let i = 0; i < numBatchItems; ++i) {\n            const splitIndex = splits[i];\n            let outputStartIdx = nGramsSplits[i];\n            this.nGramWidths.forEach((nGramWidth) => {\n                const length = splits[i + 1] - splits[i];\n                const numNGrams = this.getNumNGrams(length, nGramWidth);\n                this.createNGrams(data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n                outputStartIdx += numNGrams;\n            });\n            // If we're preserving short sequences, check to see if no sequence was\n            // generated by comparing the current output start idx to the original\n            // one (nGramSplitsdata). If no ngrams were generated, then they will\n            // be equal (since we increment outputStartIdx by numNGrams every\n            // time we create a set of ngrams.)\n            if (this.preserveShort && outputStartIdx === nGramsSplits[i]) {\n                const dataLength = splits[i + 1] - splits[i];\n                // One legitimate reason to not have any ngrams when this.preserveShort\n                // is true is if the sequence itself is empty. In that case, move on.\n                if (dataLength === 0) {\n                    continue;\n                }\n                // We don't have to worry about dynamic padding sizes here: if padding\n                // was dynamic, every sequence would have had sufficient padding to\n                // generate at least one nGram.\n                const nGramWidth = dataLength + 2 * this.padWidth;\n                const numNGrams = 1;\n                this.createNGrams(data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n            }\n        }\n        return [nGrams, nGramsSplits];\n    }\n}\nexport function stringNGramsImpl(data, dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences) {\n    return new StringNGramsOp(separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences)\n        .compute(data, dataSplits);\n}\n//# sourceMappingURL=StringNGrams_impl.js.map","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nfunction split(str, delimiters, skipEmpty) {\n    if (!str.length) {\n        return [];\n    }\n    // When the delimiter is empty, the input is split into individual characters.\n    if (delimiters.length === 0) {\n        const result = new Array(str.length);\n        for (let i = 0; i < str.length; ++i) {\n            result[i] = str.subarray(i, i + 1);\n        }\n        return result;\n    }\n    // When there is one delimiter, the input is split only at that delimiter.\n    if (delimiters.length === 1) {\n        const delimiter = delimiters[0];\n        const result = [];\n        let f = str.indexOf(delimiter);\n        while (f !== -1) {\n            const token = str.subarray(0, f);\n            if (!skipEmpty || token.length !== 0) {\n                result.push(token);\n            }\n            str = str.subarray(f + 1);\n            f = str.indexOf(delimiter);\n        }\n        if (!skipEmpty || str.length !== 0) {\n            result.push(str);\n        }\n        return result;\n    }\n    // When there are multiple delimiters, the input is split at every instance\n    // one of the delimiters appears.\n    const result = [];\n    let tokenStart = 0;\n    for (let i = 0; i < str.length + 1; i++) {\n        if ((i === str.length) || (delimiters.indexOf(str[i]) !== -1)) {\n            const token = str.subarray(tokenStart, i);\n            if (!skipEmpty || token.length !== 0) {\n                result.push(token);\n            }\n            tokenStart = i + 1;\n        }\n    }\n    return result;\n}\nexport function stringSplitImpl(input, delimiter, skipEmpty) {\n    const batchSize = input.length;\n    // Empty delimiter means split the input character by character.\n    const tokens = [];\n    let outputSize = 0;\n    let maxNumEntries = 0;\n    const numIndices = new Array(batchSize);\n    for (let i = 0; i < batchSize; ++i) {\n        const parts = split(input[i], delimiter, skipEmpty);\n        const nEntries = parts.length;\n        numIndices[i] = nEntries;\n        outputSize += nEntries;\n        maxNumEntries = Math.max(maxNumEntries, nEntries);\n        tokens.push(...parts);\n    }\n    const indices = util.getArrayFromDType('int32', outputSize * 2);\n    const values = new Array(outputSize);\n    const shape = [batchSize, maxNumEntries];\n    let c = 0;\n    for (let i = 0; i < batchSize; ++i) {\n        for (let j = 0; j < numIndices[i]; ++j) {\n            // indices is a 2d tensor with shape of [outputSize, 2]\n            indices[c * 2] = i;\n            indices[c * 2 + 1] = j;\n            values[c] = tokens[c];\n            ++c;\n        }\n    }\n    return [indices, values, shape];\n}\n//# sourceMappingURL=StringSplit_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Sub } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc, createComplexBinaryKernelImpl } from '../utils/binary_utils';\nexport const subImpl = createSimpleBinaryKernelImpl(((aValue, bValue) => aValue - bValue));\nexport const subComplexImpl = createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n    return { real: aReal - bReal, imag: aImag - bImag };\n}));\nexport const sub = binaryKernelFunc(Sub, subImpl, subComplexImpl);\nexport const subConfig = {\n    kernelName: Sub,\n    backendName: 'cpu',\n    kernelFunc: sub\n};\n//# sourceMappingURL=Sub.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/** An implementation of the TopK kernel shared between webgl and cpu. */\nimport { buffer, util } from '@tensorflow/tfjs-core';\nconst comparePair = (a, b) => {\n    const valueDiff = b.value - a.value;\n    return valueDiff === 0 ? a.index - b.index : valueDiff;\n};\n/**\n * Partitions array where all elements smaller than the (k+1) smallest element\n * are found to the left of it, and all larger to the right of it.\n * Based on the Floyd-Rivest Algorithm, ref:\n * https://en.wikipedia.org/wiki/Floyd%E2%80%93Rivest_algorithm\n * @param array: Array to partition\n * @param left: Left index for the interval\n * @param right: Right index for the interval\n * @param k: Desired index value, where array[k] is the (k+1)th smallest element\n *           when left = 0\n */\nfunction select(array, k, left = 0, right = array.length - 1) {\n    while (right > left) {\n        // Use select recursively to sample a smaller set of size s\n        // the arbitrary constants 600 and 0.5 are used in the original\n        // version to minimize execution time.\n        if (right - left > 600) {\n            const n = right - left + 1;\n            const i = k - left + 1;\n            const z = Math.log(n);\n            const s = 0.5 * Math.exp(2 * z / 3);\n            const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * Math.sign(i - n / 2);\n            const newLeft = Math.max(left, Math.floor(k - i * s / n + sd));\n            const newRight = Math.min(right, Math.floor(k + (n - i) * s / n + sd));\n            select(array, k, newLeft, newRight);\n        }\n        // partition the elements between left and right around t\n        const t = array[k];\n        let i = left;\n        let j = right;\n        util.swap(array, left, k);\n        if (comparePair(array[right], t) > 0) {\n            util.swap(array, left, right);\n        }\n        while (i < j) {\n            util.swap(array, i, j);\n            i++;\n            j--;\n            while (comparePair(array[i], t) < 0) {\n                i = i + 1;\n            }\n            while (comparePair(array[j], t) > 0) {\n                j = j - 1;\n            }\n        }\n        if (comparePair(array[left], t) === 0) {\n            util.swap(array, left, j);\n        }\n        else {\n            j = j + 1;\n            util.swap(array, j, right);\n        }\n        // Adjust left and right towards the boundaries of the subset\n        // containing the (k - left + 1)th smallest element.\n        if (j <= k) {\n            left = j + 1;\n        }\n        if (k <= j) {\n            right = j - 1;\n        }\n    }\n}\nexport function topKImpl(x, xShape, xDtype, k, sorted) {\n    // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n    const lastDim = xShape[xShape.length - 1];\n    const [batch, size] = [x.length / lastDim, lastDim];\n    const allTopKVals = util.getTypedArrayFromDType(xDtype, batch * k);\n    const allTopKIndices = util.getTypedArrayFromDType('int32', batch * k);\n    for (let b = 0; b < batch; b++) {\n        const offset = b * size;\n        const vals = x.subarray(offset, offset + size);\n        let valAndInd = new Array(vals.length);\n        vals.forEach((value, index) => valAndInd[index] = { value, index });\n        if (k < valAndInd.length) {\n            select(valAndInd, k);\n            valAndInd = valAndInd.slice(0, k);\n        }\n        if (sorted) {\n            valAndInd.sort(comparePair);\n        }\n        const outOffset = b * k;\n        const topKVals = allTopKVals.subarray(outOffset, outOffset + k);\n        const topKIndices = allTopKIndices.subarray(outOffset, outOffset + k);\n        for (let i = 0; i < k; i++) {\n            topKVals[i] = valAndInd[i].value;\n            topKIndices[i] = valAndInd[i].index;\n        }\n    }\n    // Reshape back to the original input shape, except that the last\n    // dimension is k.\n    const outputShape = xShape.slice();\n    outputShape[outputShape.length - 1] = k;\n    return [\n        buffer(outputShape, xDtype, allTopKVals),\n        buffer(outputShape, 'int32', allTopKIndices)\n    ];\n}\n//# sourceMappingURL=TopK_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Abs, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function simpleAbsImpl(vals) {\n    const resultValues = new Float32Array(vals.length);\n    for (let i = 0; i < vals.length; ++i) {\n        resultValues[i] = Math.abs(vals[i]);\n    }\n    return resultValues;\n}\nexport const abs = (args) => {\n    const { x } = args.inputs;\n    const cpuBackend = args.backend;\n    assertNotComplex(x, 'abs');\n    let resultValues = new Float32Array(util.sizeFromShape(x.shape));\n    const values = cpuBackend.data.get(x.dataId).values;\n    resultValues = simpleAbsImpl(values);\n    return cpuBackend.makeOutput(resultValues, x.shape, 'float32');\n};\nexport const absConfig = {\n    kernelName: Abs,\n    backendName: 'cpu',\n    kernelFunc: abs,\n};\n//# sourceMappingURL=Abs.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer, util } from '@tensorflow/tfjs-core';\nexport function bincountImpl(xVals, weightsVals, weightsDtype, weightsShape, size) {\n    const weightsSize = util.sizeFromShape(weightsShape);\n    const outVals = util.makeZerosTypedArray(size, weightsDtype);\n    for (let i = 0; i < xVals.length; i++) {\n        const value = xVals[i];\n        if (value < 0) {\n            throw new Error('Input x must be non-negative!');\n        }\n        if (value >= size) {\n            continue;\n        }\n        if (weightsSize > 0) {\n            outVals[value] += weightsVals[i];\n        }\n        else {\n            outVals[value] += 1;\n        }\n    }\n    return outVals;\n}\nexport function bincountReduceImpl(xBuf, weightsBuf, size, binaryOutput = false) {\n    const numRows = xBuf.shape[0];\n    const numCols = xBuf.shape[1];\n    const outBuf = buffer([numRows, size], weightsBuf.dtype);\n    for (let i = 0; i < numRows; i++) {\n        for (let j = 0; j < numCols; j++) {\n            const value = xBuf.get(i, j);\n            if (value < 0) {\n                throw new Error('Input x must be non-negative!');\n            }\n            if (value >= size) {\n                continue;\n            }\n            if (binaryOutput) {\n                outBuf.set(1, i, value);\n            }\n            else {\n                if (weightsBuf.size > 0) {\n                    outBuf.set(outBuf.get(i, value) + weightsBuf.get(i, j), i, value);\n                }\n                else {\n                    outBuf.set(outBuf.get(i, value) + 1, i, value);\n                }\n            }\n        }\n    }\n    return outBuf;\n}\n//# sourceMappingURL=Bincount_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nexport function concatImpl(inputs, outShape, dtype, simplyConcat) {\n    const outVals = util.getArrayFromDType(dtype, util.sizeFromShape(outShape));\n    if (simplyConcat && dtype !== 'string') {\n        // Use built-in TypedArray.set() method for speed.\n        let offset = 0;\n        inputs.forEach(input => {\n            const size = util.sizeFromShape(input.shape);\n            outVals.set(input.vals, offset);\n            offset += size;\n        });\n    }\n    else {\n        let colOffset = 0;\n        inputs.forEach(input => {\n            const decodedData = dtype === 'string' ?\n                backend_util.fromUint8ToStringArray(input.vals) :\n                input.vals;\n            let tIdx = 0;\n            for (let row = 0; row < input.shape[0]; ++row) {\n                const resIdx = row * outShape[1] + colOffset;\n                for (let col = 0; col < input.shape[1]; ++col) {\n                    outVals[resIdx + col] = decodedData[tIdx++];\n                }\n            }\n            colOffset += input.shape[1];\n        });\n    }\n    return outVals;\n}\n//# sourceMappingURL=Concat_impl.js.map","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from '@tensorflow/tfjs-core';\nexport function gatherNdImpl(indicesData, paramsBuf, dtype, numSlices, sliceRank, sliceSize, strides, paramsShape, paramsSize) {\n    const outBuf = buffer([numSlices, sliceSize], dtype);\n    for (let i = 0; i < numSlices; i++) {\n        const index = [];\n        let flattenIndex = 0;\n        for (let j = 0; j < sliceRank; j++) {\n            const dim = indicesData[i * sliceRank + j];\n            flattenIndex += dim * strides[j];\n            index.push(dim);\n        }\n        if (flattenIndex < 0 || flattenIndex >= paramsSize / sliceSize) {\n            throw new Error(`Invalid indices: ${index} does not index into ${paramsShape}`);\n        }\n        for (let k = 0; k < sliceSize; k++) {\n            outBuf.values[i * sliceSize + k] =\n                paramsBuf.get(...paramsBuf.indexToLoc(flattenIndex * sliceSize + k));\n        }\n    }\n    return outBuf;\n}\n//# sourceMappingURL=GatherNd_Impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from '@tensorflow/tfjs-core';\nexport function gatherV2Impl(xBuf, indicesBuf, flattenOutputShape) {\n    const outBuf = buffer(flattenOutputShape, xBuf.dtype);\n    for (let i = 0; i < outBuf.size; ++i) {\n        const newLoc = outBuf.indexToLoc(i);\n        const originalLoc = newLoc.slice();\n        const batchIdx = originalLoc[0];\n        const indicesIdx = originalLoc[2];\n        const indicesIndex = indicesBuf.locToIndex([batchIdx, indicesIdx]);\n        originalLoc[2] = indicesBuf.values[indicesIndex];\n        const originalIndex = xBuf.locToIndex(originalLoc);\n        outBuf.values[i] = xBuf.values[originalIndex];\n    }\n    return outBuf;\n}\n//# sourceMappingURL=GatherV2_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function linSpaceImpl(start, stop, num) {\n    const step = (stop - start) / (num - 1);\n    const values = util.makeZerosTypedArray(num, 'float32');\n    values[0] = start;\n    for (let i = 1; i < values.length; i++) {\n        values[i] = values[i - 1] + step;\n    }\n    return values;\n}\n//# sourceMappingURL=LinSpace_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function maxImpl(aVals, reduceSize, outShape, dtype) {\n    const vals = util.getTypedArrayFromDType(dtype, util.sizeFromShape(outShape));\n    for (let i = 0; i < vals.length; ++i) {\n        const offset = i * reduceSize;\n        let max = aVals[offset];\n        for (let j = 0; j < reduceSize; ++j) {\n            const value = aVals[offset + j];\n            if (Number.isNaN(value) ||\n                value > max) { // comparison with NaN always return false\n                max = value;\n            }\n        }\n        vals[i] = max;\n    }\n    return vals;\n}\n//# sourceMappingURL=Max_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Neg, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { multiplyImpl } from './Multiply';\nexport function negImpl(xVals, xShape, xDtype) {\n    const minusOne = util.createScalarValue(-1, xDtype);\n    return multiplyImpl([], xShape, minusOne, xVals, xDtype);\n}\nexport function neg(args) {\n    const { inputs, backend } = args;\n    const { x } = inputs;\n    assertNotComplex(x, 'neg');\n    const xVals = backend.data.get(x.dataId).values;\n    const [res, newShape] = negImpl(xVals, x.shape, x.dtype);\n    return backend.makeTensorInfo(newShape, x.dtype, res);\n}\nexport const negConfig = {\n    kernelName: Neg,\n    backendName: 'cpu',\n    kernelFunc: neg\n};\n//# sourceMappingURL=Neg.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Prod, upcastType, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { transpose } from './Transpose';\nexport function prodImpl(xShape, xDtype, xVals, reductionAxes) {\n    const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(xShape, reductionAxes);\n    const outDtype = upcastType(xDtype, 'int32');\n    const outVals = util.makeZerosTypedArray(util.sizeFromShape(outShape), outDtype);\n    const reduceSize = util.sizeFromShape(reduceShape);\n    for (let i = 0; i < outVals.length; ++i) {\n        const offset = i * reduceSize;\n        let prod = 1;\n        for (let j = 0; j < reduceSize; ++j) {\n            prod *= xVals[offset + j];\n        }\n        outVals[i] = prod;\n    }\n    return { outVals, outShape, outDtype };\n}\nexport function prod(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { axis, keepDims } = attrs;\n    assertNotComplex(x, 'prod');\n    const xRank = x.shape.length;\n    const axes = util.parseAxisParam(axis, x.shape);\n    const permutation = backend_util.getAxesPermutation(axes, xRank);\n    let reductionAxes = axes;\n    let permutedX = x;\n    const intermediateTensorInfos = [];\n    if (permutation != null) {\n        permutedX = transpose({ inputs: { x }, backend, attrs: { perm: permutation } });\n        intermediateTensorInfos.push(permutedX);\n        reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n    }\n    const xVals = backend.data.get(permutedX.dataId).values;\n    const { outVals, outShape, outDtype } = prodImpl(permutedX.shape, permutedX.dtype, xVals, reductionAxes);\n    let resultShape = outShape;\n    if (keepDims) {\n        resultShape = backend_util.expandShapeToKeepDim(outShape, axes);\n    }\n    intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return backend.makeTensorInfo(resultShape, outDtype, outVals);\n}\nexport const prodConfig = {\n    kernelName: Prod,\n    backendName: 'cpu',\n    kernelFunc: prod\n};\n//# sourceMappingURL=Prod.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function rangeImpl(start, stop, step, dtype) {\n    const sameStartStop = start === stop;\n    const increasingRangeNegativeStep = start < stop && step < 0;\n    const decreasingRangePositiveStep = stop < start && step > 1;\n    if (sameStartStop || increasingRangeNegativeStep ||\n        decreasingRangePositiveStep) {\n        return util.makeZerosTypedArray(0, dtype);\n    }\n    const numElements = Math.abs(Math.ceil((stop - start) / step));\n    const values = util.makeZerosTypedArray(numElements, dtype);\n    if (stop < start && step === 1) {\n        // Auto adjust the step's sign if it hasn't been set\n        // (or was set to 1)\n        step = -1;\n    }\n    values[0] = start;\n    for (let i = 1; i < values.length; i++) {\n        values[i] = values[i - 1] + step;\n    }\n    return values;\n}\n//# sourceMappingURL=Range_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, buffer, Slice, slice_util, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function sliceImpl(vals, begin, size, shape, dtype) {\n    const isContinous = slice_util.isSliceContinous(shape, begin, size);\n    const length = util.sizeFromShape(size);\n    const xStrides = util.computeStrides(shape);\n    if (isContinous) {\n        const flatOffset = slice_util.computeFlatOffset(begin, xStrides);\n        if (dtype === 'string') {\n            return vals.slice(flatOffset, flatOffset + length);\n        }\n        return vals.subarray(flatOffset, flatOffset + length);\n    }\n    const decodedData = dtype === 'string' ?\n        backend_util.fromUint8ToStringArray(vals) :\n        vals;\n    const inBuf = buffer(shape, dtype, decodedData);\n    const outBuf = buffer(size, dtype);\n    for (let i = 0; i < outBuf.size; ++i) {\n        const outLoc = outBuf.indexToLoc(i);\n        const inLoc = outLoc.map((idx, j) => idx + begin[j]);\n        outBuf.set(inBuf.get(...inLoc), ...outLoc);\n    }\n    if (dtype === 'string') {\n        return backend_util.fromStringArrayToUint8(outBuf.values);\n    }\n    return outBuf.values;\n}\nexport function slice(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { begin, size } = attrs;\n    assertNotComplex(x, 'slice');\n    const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n    slice_util.assertParamsValid(x, $begin, $size);\n    const vals = backend.data.get(x.dataId).values;\n    const outVals = sliceImpl(vals, $begin, $size, x.shape, x.dtype);\n    return backend.makeTensorInfo($size, x.dtype, outVals);\n}\nexport const sliceConfig = {\n    kernelName: Slice,\n    backendName: 'cpu',\n    kernelFunc: slice\n};\n//# sourceMappingURL=Slice.js.map","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function sparseFillEmptyRowsImpl(indices, indicesShape, indicesDType, values, valuesDType, denseShape, defaultValue) {\n    const indicesCount = indicesShape[0];\n    const denseRows = denseShape[0];\n    const emptyRowIndicator = new Array(denseRows);\n    const reverseIndexMap = new Array(indicesCount);\n    const rank = indicesShape[1];\n    if (denseRows === 0) {\n        if (indicesCount !== 0) {\n            throw new Error(`Received SparseTensor with denseShape[0] = 0 but\n         indices.shape[0] = ${indicesCount}`);\n        }\n        const outputIndices = util.getArrayFromDType(indicesDType, 0);\n        const outputValues = util.getArrayFromDType(valuesDType, 0);\n        return [\n            outputIndices, [0, rank], outputValues, emptyRowIndicator, reverseIndexMap\n        ];\n    }\n    let rowsAreOrdered = true;\n    let lastIndicesRow = 0;\n    const csrOffset = new Array(denseRows).fill(0);\n    for (let i = 0; i < indicesCount; ++i) {\n        // indices is a 2d tensor with shape of [N, rank]\n        const row = indices[i * rank];\n        if (row < 0) {\n            throw new Error(`indices(${i}, 0) is invalid: ${row} < 0`);\n        }\n        if (row >= denseRows) {\n            throw new Error(`indices(${i}, 0) is invalid: ${row} >= ${denseRows}`);\n        }\n        ++csrOffset[row];\n        rowsAreOrdered = rowsAreOrdered && (row >= lastIndicesRow);\n        lastIndicesRow = row;\n    }\n    let allRowsFull = true;\n    for (let row = 0; row < denseRows; ++row) {\n        // csrOffset here describes the number of elements in this dense row\n        const rowEmpty = (csrOffset[row] === 0);\n        emptyRowIndicator[row] = rowEmpty;\n        allRowsFull = allRowsFull && !rowEmpty;\n        // In filled version, each row has at least one element.\n        csrOffset[row] = Math.max(csrOffset[row], 1);\n        // Update csrOffset to represent the number of elements up to and\n        // including denseRows + 1:\n        //  csrOffset[0] == #{elements of row 0}\n        //  csrOffset[1] == #{elements of row 1} + #{elements of row 0}\n        //  ..\n        //  csrOffset[i] == starting index for elements in row i + 1.\n        if (row > 0) {\n            csrOffset[row] += csrOffset[row - 1];\n        }\n    }\n    if (allRowsFull && rowsAreOrdered) {\n        const outputIndices = indices;\n        const outputValues = values;\n        for (let i = 0; i < indicesCount; ++i) {\n            reverseIndexMap[i] = i;\n        }\n        return [\n            outputIndices, [indicesCount, rank], outputValues, emptyRowIndicator,\n            reverseIndexMap\n        ];\n    }\n    else {\n        const fullIndicesCount = csrOffset[denseRows - 1];\n        const outputIndices = util.getArrayFromDType(indicesDType, fullIndicesCount * rank);\n        const outputValues = util.getArrayFromDType(valuesDType, fullIndicesCount);\n        const filledCount = new Array(denseRows).fill(0);\n        // Fill in values for rows that are not missing\n        for (let i = 0; i < indicesCount; ++i) {\n            // indices is a 2d tensor with shape of [N, rank]\n            const row = indices[i * rank];\n            const offset = filledCount[row];\n            const outputI = ((row === 0) ? 0 : csrOffset[row - 1]) + offset;\n            filledCount[row]++; // Increment the filled count for this row.\n            for (let j = 0; j < rank; ++j) {\n                // indices and outputIndices are 2d tensors with shape of [N, rank]\n                outputIndices[outputI * rank + j] = indices[i * rank + j];\n            }\n            outputValues[outputI] = values[i];\n            // We'll need this reverse index map to backprop correctly.\n            reverseIndexMap[i] = outputI;\n        }\n        // Fill in values for rows that are missing\n        for (let row = 0; row < denseRows; ++row) {\n            const rowCount = filledCount[row];\n            if (rowCount === 0) { // We haven't filled this row\n                const startingIndex = (row === 0) ? 0 : csrOffset[row - 1];\n                // Remaining index values were set to zero already.\n                // Just need to set the row index in the right location.\n                // outputIndices is a 2d tensor with shape of [N, rank]\n                outputIndices[startingIndex * rank + 0] = row;\n                for (let col = 1; col < rank; ++col) {\n                    outputIndices[startingIndex * rank + col] = 0;\n                }\n                outputValues[startingIndex] = defaultValue;\n            }\n        }\n        return [\n            outputIndices, [fullIndicesCount, rank], outputValues, emptyRowIndicator,\n            reverseIndexMap\n        ];\n    }\n}\n//# sourceMappingURL=SparseFillEmptyRows_impl.js.map","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function sparseReshapeImpl(inputIndices, inputIndicesShape, inputDType, inputShape, targetShape) {\n    const denseSize = util.sizeFromShape(inputShape);\n    const nnz = inputIndicesShape[0];\n    const outputRank = targetShape.length;\n    // Compute the output shape. Determine product of specified dimensions, and\n    // find the index of the unspecified one.\n    const outputShape = [];\n    let product = 1;\n    let unknownIndex = -1;\n    for (let d = 0; d < outputRank; ++d) {\n        const size = targetShape[d];\n        if (size === -1) {\n            if (unknownIndex !== -1) {\n                throw new Error(`only one output dimension may be -1, not both ${unknownIndex} and ${d}`);\n            }\n            unknownIndex = d;\n            outputShape.push(1);\n        }\n        else {\n            if (size < 0) {\n                throw new Error(`size ${d} must be non-negative, not ${size}`);\n            }\n            product *= size;\n            outputShape.push(size);\n        }\n    }\n    if (unknownIndex !== -1) {\n        if (product <= 0) {\n            throw new Error('reshape cannot infer the missing ' +\n                'input size for an empty tensor unless all ' +\n                'specified input sizes are non-zero');\n        }\n        const missing = Math.trunc(denseSize / product);\n        if (product * missing !== denseSize) {\n            throw new Error(`Input to reshape is a SparseTensor with ${denseSize}\n          dense values, but the requested shape requires a multiple of ${product}. inputShape=${inputShape} outputShape= ${outputShape}`);\n        }\n        outputShape[unknownIndex] = missing;\n    }\n    const outputSize = util.sizeFromShape(outputShape);\n    if (outputSize !== denseSize) {\n        throw new Error(`Input to reshape is a tensor with ${denseSize} dense values, but the requested shape has ${outputSize}. inputShape=${inputShape} outputShape=${outputShape}`);\n    }\n    const inputRank = inputShape.length;\n    const inputStrides = [];\n    if (inputRank > 0) {\n        inputStrides[inputRank - 1] = 1;\n        for (let d = inputRank - 2; d >= 0; --d) {\n            inputStrides[d] = inputStrides[d + 1] * inputShape[d + 1];\n        }\n    }\n    const outputStrides = [];\n    if (outputRank > 0) {\n        outputStrides[outputRank - 1] = 1;\n        for (let d = outputRank - 2; d >= 0; --d) {\n            outputStrides[d] = outputStrides[d + 1] * outputShape[d + 1];\n        }\n    }\n    const newIndices = util.getArrayFromDType(inputDType, nnz * outputRank);\n    for (let i = 0; i < nnz; ++i) {\n        let id = 0;\n        for (let j = 0; j < inputRank; ++j) {\n            // inputIndices is a 2d tensor with shape of [nnz, inputRank]\n            id += inputIndices[i * inputRank + j] * inputStrides[j];\n        }\n        for (let j = 0; j < outputRank; ++j) {\n            // newIndices is a 2d tensor with shape of [nnz, outputRank]\n            newIndices[i * outputRank + j] = Math.trunc(id / outputStrides[j]);\n            id %= outputStrides[j];\n        }\n    }\n    return [newIndices, [nnz, outputRank], outputShape];\n}\n//# sourceMappingURL=SparseReshape_impl.js.map","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function sparseSegmentReductionImpl(input, inputShape, inputDType, indices, segmentIds, isMean = false, defaultValue = 0) {\n    const numIndices = indices.length;\n    if (numIndices !== segmentIds.length) {\n        throw new Error(`segmentIds and indices should have same size.`);\n    }\n    // Flatten the array to two dimensions\n    const inputFlat = [inputShape[0], input.length / inputShape[0]];\n    const numCol = inputFlat[1];\n    // Note that the current implementation assumes that segmentIds values are\n    // sorted.\n    const lastSegmentIdPlusOne = numIndices > 0 ? segmentIds[numIndices - 1] + 1 : 0;\n    const outputRows = lastSegmentIdPlusOne;\n    if (outputRows < 0) {\n        throw new Error(`segment ids must be >= 0`);\n    }\n    const outputShape = inputShape.slice();\n    outputShape[0] = outputRows;\n    const outputLength = outputShape.reduce((product, value) => product * value, 1);\n    // Output array is initialized with the value 0 by default.\n    const output = util.getArrayFromDType(inputDType, outputLength);\n    // Note that we do not initialize the output buffer with a default value, so\n    // we need to explicitly set missing indices to the default value.\n    if (numIndices === 0) {\n        if (outputRows > 0) {\n            output.fill(defaultValue);\n        }\n        return [output, outputShape];\n    }\n    if (outputRows <= 0) {\n        throw new Error(`segment ids must be >= 0`);\n    }\n    let start = 0, end = 1;\n    // Index from which the output is not initialized.\n    let uninitializedIndex = 0;\n    let outIndex = segmentIds[start];\n    while (true) {\n        // We initialize nextIndex to 0 to avoid may be uninitialized warning\n        let nextIndex = 0;\n        if (end < numIndices) {\n            nextIndex = segmentIds[end];\n            if (outIndex === nextIndex) {\n                ++end;\n                continue;\n            }\n            // We have a new segment here.  Verify that the segment ids are growing.\n            if (outIndex >= nextIndex) {\n                throw new Error(`segment ids are not increasing`);\n            }\n        }\n        if (outIndex < 0 || outIndex >= outputRows) {\n            throw new Error(`Segment id ${outIndex} out of range [0, ${outputRows}), possibly because segmentIds input is not sorted.`);\n        }\n        // If there is a gap between two indices, we need to set that gap to the\n        // default value.\n        if (outIndex > uninitializedIndex) {\n            output.fill(defaultValue, uninitializedIndex * numCol, outIndex * numCol);\n        }\n        for (let i = start; i < end; ++i) {\n            const index = indices[i];\n            if (index < 0 || index >= inputFlat[0]) {\n                throw new Error(`Bad: indices[${i}] == ${indices[i]} out of range [0, ${inputFlat[0]})`);\n            }\n            for (let j = 0; j < numCol; j++) {\n                output[outIndex * numCol + j] += input[index * numCol + j];\n            }\n        }\n        if (isMean) {\n            for (let j = 0; j < numCol; j++) {\n                output[outIndex * numCol + j] /= end - start;\n            }\n        }\n        start = end;\n        ++end;\n        uninitializedIndex = outIndex + 1;\n        outIndex = nextIndex;\n        if (end > numIndices) {\n            break;\n        }\n    }\n    // Fill the gap at the end with the default value.\n    if (uninitializedIndex < outputRows) {\n        output.fill(defaultValue, uninitializedIndex * numCol, outputRows * numCol);\n    }\n    return [output, outputShape];\n}\n//# sourceMappingURL=SparseSegmentReduction_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from '@tensorflow/tfjs-core';\nexport function stridedSliceImpl(outShape, xBuf, strides, begin) {\n    const outBuf = buffer(outShape, xBuf.dtype);\n    for (let i = 0; i < outBuf.size; i++) {\n        const loc = outBuf.indexToLoc(i);\n        const newLoc = new Array(loc.length);\n        for (let j = 0; j < newLoc.length; j++) {\n            newLoc[j] = loc[j] * strides[j] + begin[j];\n        }\n        outBuf.set(xBuf.get(...newLoc), ...loc);\n    }\n    return outBuf;\n}\n//# sourceMappingURL=StridedSlice_impl.js.map","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function stringToHashBucketFastImpl(input, numBuckets) {\n    const output = util.getArrayFromDType('int32', input.length);\n    for (let i = 0; i < input.length; ++i) {\n        output[i] =\n            util.fingerPrint64(input[i]).modulo(numBuckets).getLowBitsUnsigned();\n    }\n    return output;\n}\n//# sourceMappingURL=StringToHashBucketFast_impl.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from '@tensorflow/tfjs-core';\n/**\n * An implementation of the tile kernel shared between webgl and cpu for string\n * tensors only.\n */\nexport function tileImpl(xBuf, reps) {\n    const newShape = new Array(xBuf.rank);\n    for (let i = 0; i < newShape.length; i++) {\n        newShape[i] = xBuf.shape[i] * reps[i];\n    }\n    const result = buffer(newShape, xBuf.dtype);\n    for (let i = 0; i < result.values.length; ++i) {\n        const newLoc = result.indexToLoc(i);\n        const originalLoc = new Array(xBuf.rank);\n        for (let j = 0; j < originalLoc.length; j++) {\n            originalLoc[j] = newLoc[j] % xBuf.shape[j];\n        }\n        const originalIndex = xBuf.locToIndex(originalLoc);\n        result.values[i] = xBuf.values[originalIndex];\n    }\n    return result;\n}\n//# sourceMappingURL=Tile_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function transposeImpl(xVals, xShape, dtype, perm, newShape) {\n    const xRank = xShape.length;\n    const xSize = util.sizeFromShape(xShape);\n    const xStrides = util.computeStrides(xShape);\n    const newStrides = util.computeStrides(newShape);\n    const result = util.getTypedArrayFromDType(dtype, util.sizeFromShape(newShape));\n    for (let i = 0; i < xSize; ++i) {\n        const loc = util.indexToLoc(i, xRank, xStrides);\n        // Permute location.\n        const newLoc = new Array(loc.length);\n        for (let i = 0; i < newLoc.length; i++) {\n            newLoc[i] = loc[perm[i]];\n        }\n        const newIndex = util.locToIndex(newLoc, xRank, newStrides);\n        result[newIndex] = xVals[i];\n    }\n    return result;\n}\n//# sourceMappingURL=Transpose_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { TensorBuffer, util } from '@tensorflow/tfjs-core';\nexport function uniqueImpl(values, axis, shape, dtype) {\n    // Normalize and validate axis.\n    const $axis = util.parseAxisParam(axis, shape)[0];\n    // Calculate the new shape that is suitable for extracting data along the\n    // given axis.\n    //\n    // The rank is 3.\n    // The size of the 1st dimension is the size of all the axes < the given axis.\n    // The size of the 2nd dimension is the same as the size of the given axis.\n    // The size of the 3rd dimension is the size of all the axes > the given axis.\n    //\n    // For example, for a 4D tensor with shape=[2, 3, 5, 4] and axis=2, the\n    // newShape would be: [2*3, 5, 4].\n    //\n    // Note that this is not the final output shape. This will be the shape for an\n    // intermediate TensorBuffer (see inputBuffer below) to allow us to extract\n    // values along the given axis. To demonstrate how it works, consider the\n    // following example:\n    //\n    // Input: a 3D tensor, with shape [1, 2, 3]\n    // [\n    //   [\n    //      [1,2,3],\n    //      [4,5,6]\n    //   ]\n    // ]\n    // Axis: 2 (the last axis).\n    // Along axis 2, we expect to extract 3 tensors: [1,4], [2,5], [3,6].\n    //\n    // For this example, newShape would be: [2, 3, 1], where 2 is calculated from\n    // 1*2. The re-shaped data would look like:\n    //\n    // [\n    //   [\n    //     [1], [2], [3]\n    //   ],\n    //   [\n    //     [4], [5], [6]\n    //   ]\n    // ]\n    //\n    // Then, we can construct a 3-level nested loop by the following dimension\n    // order to extract the values along the axis (dimension1):\n    // i: dimension1       // 0,1,2 (newShape[1])\n    //   m: dimension0     // 0,1   (newShape[0])\n    //     n: dimension2   // 0     (newShape[2])\n    //\n    //                       m, i, n\n    //                      ---------\n    // Iteration 0: data at [0, 0, 0] => \"1\"\n    // Iteration 1: data at [1, 0, 0] => \"4\"\n    // We got [1,4].\n    // Iteration 2: data at [0, 1, 0] => \"2\"\n    // Iteration 3: data at [1, 1, 0] => \"5\"\n    // We got [2,5].\n    // Iteration 4: data at [0, 2, 0] => \"3\"\n    // Iteration 5: data at [1, 2, 0] => \"6\"\n    // We got [3,6].\n    const newShape = [1, shape[0], 1];\n    for (let i = 0; i < $axis; i++) {\n        newShape[0] *= shape[i];\n    }\n    newShape[1] = shape[$axis];\n    for (let i = $axis + 1; i < shape.length; i++) {\n        newShape[2] *= shape[i];\n    }\n    // A map from unique elements (their string representations) to their values\n    // in \"indices\" (below).\n    const uniqueElements = {};\n    // The indices of each unique element in the original tensor along the given\n    // axis. It is 1D and has the same size as the given axis.\n    const indices = new Int32Array(shape[$axis]);\n    // Create a buffer so we can easily extract value at a given location.\n    const inputBuffer = new TensorBuffer(newShape, dtype, values);\n    // The indices along the given axis that have unique elements. This is a\n    // de-duped version of \"indices\" above.\n    const uniqueIndices = [];\n    const is1DTensor = newShape[0] === 1 && newShape[2] === 1;\n    for (let i = 0; i < shape[$axis]; i++) {\n        // Extract values along the axis.\n        let element;\n        if (is1DTensor) {\n            // Fast path for 1D tensor input.\n            element = values[i].toString();\n        }\n        else {\n            const axisValues = [];\n            for (let m = 0; m < newShape[0]; m++) {\n                for (let n = 0; n < newShape[2]; n++) {\n                    axisValues.push(inputBuffer.get(m, i, n));\n                }\n            }\n            element = axisValues.join(',');\n        }\n        // Dedup and update various indices.\n        if (uniqueElements[element] !== undefined) {\n            indices[i] = uniqueElements[element];\n        }\n        else {\n            const uniqueIndex = Object.keys(uniqueElements).length;\n            uniqueElements[element] = uniqueIndex;\n            indices[i] = uniqueIndex;\n            uniqueIndices.push(i);\n        }\n    }\n    // Now we know where each of the unique elements are located along the axis\n    // (uniqueIndices). Extract them from input buffer and store them in the\n    // output buffer.\n    const outputTmpShape = newShape.slice();\n    outputTmpShape[1] = Object.keys(uniqueElements).length;\n    const outputBuffer = new TensorBuffer(outputTmpShape, dtype);\n    uniqueIndices.forEach((uniqueElementIndex, i) => {\n        for (let m = 0; m < newShape[0]; m++) {\n            for (let n = 0; n < newShape[2]; n++) {\n                outputBuffer.set(inputBuffer.get(m, uniqueElementIndex, n), m, i, n);\n            }\n        }\n    });\n    // The output shape can be calculated from the input shape with the size of\n    // the given axis replaced by the number of unique elements along that axis.\n    const outputShape = shape.slice();\n    outputShape[$axis] = outputTmpShape[1];\n    return {\n        outputValues: outputBuffer.values,\n        outputShape,\n        indices,\n    };\n}\n//# sourceMappingURL=Unique_impl.js.map","\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Import shared functionality from tfjs-backend-cpu without triggering\n// side effects.\n// tslint:disable-next-line: no-imports-from-dist\nimport * as shared from '@tensorflow/tfjs-backend-cpu/dist/shared';\n// tslint:disable-next-line: no-imports-from-dist\nimport {SimpleBinaryKernelImpl} from '@tensorflow/tfjs-backend-cpu/dist/shared';\n// tslint:disable-next-line: no-imports-from-dist\nimport {SimpleUnaryImpl} from '@tensorflow/tfjs-backend-cpu/dist/utils/unary_types';\n\nexport type SimpleBinaryKernelImplCPU = SimpleBinaryKernelImpl;\nexport type SimpleUnaryKernelImplCPU = SimpleUnaryImpl;\nconst {\n  addImpl: addImplCPU,\n  bincountImpl: bincountImplCPU,\n  bincountReduceImpl: bincountReduceImplCPU,\n  ceilImpl: ceilImplCPU,\n  concatImpl: concatImplCPU,\n  equalImpl: equalImplCPU,\n  expImpl: expImplCPU,\n  expm1Impl: expm1ImplCPU,\n  floorImpl: floorImplCPU,\n  gatherNdImpl: gatherNdImplCPU,\n  gatherV2Impl: gatherV2ImplCPU,\n  greaterImpl: greaterImplCPU,\n  greaterEqualImpl: greaterEqualImplCPU,\n  lessImpl: lessImplCPU,\n  lessEqualImpl: lessEqualImplCPU,\n  linSpaceImpl: linSpaceImplCPU,\n  logImpl: logImplCPU,\n  maxImpl: maxImplCPU,\n  maximumImpl: maximumImplCPU,\n  minimumImpl: minimumImplCPU,\n  multiplyImpl: multiplyImplCPU,\n  negImpl: negImplCPU,\n  notEqualImpl: notEqualImplCPU,\n  prodImpl: prodImplCPU,\n  rangeImpl: rangeImplCPU,\n  rsqrtImpl: rsqrtImplCPU,\n  simpleAbsImpl: simpleAbsImplCPU,\n  sliceImpl: sliceImplCPU,\n  sparseFillEmptyRowsImpl: sparseFillEmptyRowsImplCPU,\n  sparseReshapeImpl: sparseReshapeImplCPU,\n  sparseSegmentReductionImpl: sparseSegmentReductionImplCPU,\n  stridedSliceImpl: stridedSliceImplCPU,\n  stringNGramsImpl: stringNGramsImplCPU,\n  stringSplitImpl: stringSplitImplCPU,\n  stringToHashBucketFastImpl: stringToHashBucketFastImplCPU,\n  subImpl: subImplCPU,\n  tileImpl: tileImplCPU,\n  topKImpl: topKImplCPU,\n  transposeImpl: transposeImplCPU,\n  uniqueImpl: uniqueImplCPU,\n} = shared;\n\nexport {\n  addImplCPU,\n  bincountImplCPU,\n  bincountReduceImplCPU,\n  ceilImplCPU,\n  concatImplCPU,\n  equalImplCPU,\n  expImplCPU,\n  expm1ImplCPU,\n  floorImplCPU,\n  gatherNdImplCPU,\n  gatherV2ImplCPU,\n  greaterEqualImplCPU,\n  greaterImplCPU,\n  lessEqualImplCPU,\n  lessImplCPU,\n  linSpaceImplCPU,\n  logImplCPU,\n  maxImplCPU,\n  maximumImplCPU,\n  minimumImplCPU,\n  multiplyImplCPU,\n  negImplCPU,\n  notEqualImplCPU,\n  prodImplCPU,\n  simpleAbsImplCPU,\n  sliceImplCPU,\n  sparseFillEmptyRowsImplCPU,\n  sparseReshapeImplCPU,\n  sparseSegmentReductionImplCPU,\n  stridedSliceImplCPU,\n  stringNGramsImplCPU,\n  stringSplitImplCPU,\n  stringToHashBucketFastImplCPU,\n  subImplCPU,\n  rangeImplCPU,\n  rsqrtImplCPU,\n  tileImplCPU,\n  topKImplCPU,\n  transposeImplCPU,\n  uniqueImplCPU,\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport function getVecChannels(name: string, rank: number): string[] {\n  return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank).map(d => `${name}.${d}`);\n}\n\nexport function getChannels(name: string, rank: number): string[] {\n  if (rank === 1) {\n    return [name];\n  }\n  return getVecChannels(name, rank);\n}\n\nexport function getSourceCoords(rank: number, dims: string[]): string {\n  if (rank === 1) {\n    return 'rc';\n  }\n\n  let coords = '';\n  for (let i = 0; i < rank; i++) {\n    coords += dims[i];\n    if (i < rank - 1) {\n      coords += ',';\n    }\n  }\n  return coords;\n}","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class PackProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = false;\n  packedOutput = true;\n\n  constructor(\n      outputShape:\n          number[]) {  // TODO(https://github.com/tensorflow/tfjs/issues/893):\n                       // Only input / output 3D tensors.\n    this.outputShape = outputShape;\n    const rank = outputShape.length;\n\n    if (rank === 0) {\n      this.userCode = `\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      `;\n    } else {\n      const channels = getChannels('rc', rank);\n      const dtype = getCoordsDataType(rank);\n      const outOfBoundsCondition =\n          getOutOfBoundsCondition(rank, outputShape, channels);\n      const setup = getSetup(\n          rank, outputShape[outputShape.length - 1],\n          outputShape[outputShape.length - 2], channels);\n      const output = getOutput(outputShape, channels);\n\n      this.userCode = `\n        void main() {\n          ${dtype} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            setOutput(vec4(0));\n          } else {\n            ${setup}\n\n            setOutput(vec4(${output}));\n          }\n        }\n      `;\n    }\n  }\n}\n\nfunction getSourceCoordsArr(rank: number, dims: string[]): string[] {\n  const coords = [];\n\n  for (let row = 0; row <= 1; row++) {\n    for (let col = 0; col <= 1; col++) {\n      let coord = `${row === 0 ? 'r' : 'rp1'}, ${col === 0 ? 'c' : 'cp1'}`;\n\n      for (let d = 2; d < rank; d++) {\n        coord = `${dims[dims.length - 1 - d]},` + coord;\n      }\n\n      coords.push(coord);\n    }\n  }\n  return coords;\n}\n\nfunction getOutOfBoundsCondition(\n    rank: number, shape: number[], dims: string[]): string {\n  if (rank === 1) {\n    return `rc > ${shape[0]}`;\n  }\n\n  let cond = '';\n  for (let i = rank - 2; i < rank; i++) {\n    cond += `${dims[i]} >= ${shape[i]}`;\n    if (i < rank - 1) {\n      cond += '||';\n    }\n  }\n\n  return cond;\n}\n\nfunction getSetup(\n    rank: number, cols: number, rows: number, dims: string[]): string {\n  if (rank === 1) {\n    return '';\n  }\n\n  const innerDims = dims.slice(-2);\n\n  return `\n    int r = ${innerDims[0]};\n    int c = ${innerDims[1]};\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= ${cols};\n    bool rEdge = rp1 >= ${rows};\n  `;\n}\n\nfunction getOutput(shape: number[], dims: string[]): string {\n  const rank = shape.length;\n  const sourceCoords = getSourceCoordsArr(rank, dims);\n  if (rank === 1) {\n    return `getA(rc),\n            rc + 1 >= ${shape[0]} ? 0. : getA(rc + 1),\n            0, 0`;\n  }\n\n  return `getA(${sourceCoords[0]}),\n          cEdge ? 0. : getA(${sourceCoords[1]}),\n          rEdge ? 0. : getA(${sourceCoords[2]}),\n          rEdge || cEdge ? 0. : getA(${sourceCoords[3]})`;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n\nexport class ReshapePackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(outputShape: [number, number, number], inputShape: [\n    number, number, number\n  ]) {\n    this.outputShape = outputShape;\n\n    let mainLoop = ``;\n    for (let i = 0; i < 4; i++) {\n      let thisRC = `thisRC = rc;`;\n      if (i % 2 === 1) {\n        thisRC += `thisRC.z += 1;`;\n      }\n      if (i > 1) {\n        thisRC += `thisRC.y += 1;`;\n      }\n\n      mainLoop += `\n        ${thisRC}\n        ${i > 0 ? `if(thisRC.y < rows && thisRC.z < cols){` : ''}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${i > 0 ? '}' : ''}\n      `;\n    }\n\n    this.userCode = `\n      ${getReshapedInputCoords(inputShape)}\n      ${shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${outputShape[1]};\n        int cols = ${outputShape[2]};\n\n        ${mainLoop}\n\n        setOutput(result);\n      }\n    `;\n  }\n}\n\nfunction getReshapedInputCoords(shape: [number, number, number]): string {\n  const coordsFromIndexSnippet =\n      shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n\n  return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '@tensorflow/tfjs-core';\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {getInternalFormatForFloat16MatrixTexture, getInternalFormatForFloat16PackedMatrixTexture, getInternalFormatForFloat32MatrixTexture, getInternalFormatForPackedMatrixTexture, getInternalFormatForUnsignedBytesMatrixTexture} from './gpgpu_util';\nimport {getPackedMatrixTextureShapeWidthHeight, getUnpackedMatrixTextureShapeWidthHeight, PhysicalTextureType, TextureConfig, TextureUsage} from './tex_util';\n\nexport class TextureManager {\n  private numUsedTextures = 0;\n  private numFreeTextures = 0;\n  private _numBytesAllocated = 0;\n  private _numBytesFree = 0;  // How many bytes that have been allocated\n                              // are available for reuse.\n  private freeTextures: {[shape: string]: WebGLTexture[]} = {};\n  private logEnabled = false;\n  private usedTextures: {[shape: string]: WebGLTexture[]} = {};\n\n  constructor(private gpgpu: GPGPUContext) {}\n\n  acquireTexture(\n      shapeRC: [number, number], usage: TextureUsage,\n      isPacked: boolean): WebGLTexture {\n    const physicalTexType = getPhysicalFromLogicalTextureType(usage, isPacked);\n\n    const shapeKey = getKeyFromTextureShape(shapeRC, physicalTexType, isPacked);\n    if (!(shapeKey in this.freeTextures)) {\n      this.freeTextures[shapeKey] = [];\n    }\n    if (!(shapeKey in this.usedTextures)) {\n      this.usedTextures[shapeKey] = [];\n    }\n\n    const texBytes = computeBytes(\n        shapeRC, physicalTexType, this.gpgpu.gl, this.gpgpu.textureConfig,\n        isPacked);\n\n    if (this.freeTextures[shapeKey].length > 0) {\n      this.numFreeTextures--;\n      this.numUsedTextures++;\n      this._numBytesFree -= texBytes;\n      this.log();\n      const newTexture = this.freeTextures[shapeKey].shift();\n      this.usedTextures[shapeKey].push(newTexture);\n      return newTexture;\n    }\n\n    let newTexture: WebGLTexture;\n    if (physicalTexType === PhysicalTextureType.PACKED_2X2_FLOAT32) {\n      newTexture = this.gpgpu.createPackedMatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (physicalTexType === PhysicalTextureType.PACKED_2X2_FLOAT16) {\n      newTexture =\n          this.gpgpu.createFloat16PackedMatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (physicalTexType === PhysicalTextureType.UNPACKED_FLOAT32) {\n      newTexture =\n          this.gpgpu.createFloat32MatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (physicalTexType === PhysicalTextureType.UNPACKED_FLOAT16) {\n      newTexture =\n          this.gpgpu.createFloat16MatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (\n        physicalTexType === PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE) {\n      newTexture =\n          this.gpgpu.createUnsignedBytesMatrixTexture(shapeRC[0], shapeRC[1]);\n    }\n    this.usedTextures[shapeKey].push(newTexture);\n\n    this.numUsedTextures++;\n    this._numBytesAllocated += texBytes;\n    this.log();\n\n    return newTexture;\n  }\n\n  releaseTexture(\n      texture: WebGLTexture, shape: [number, number],\n      logicalTexType: TextureUsage, isPacked: boolean): void {\n    if (this.freeTextures == null) {\n      // Already disposed.\n      return;\n    }\n    const physicalTexType =\n        getPhysicalFromLogicalTextureType(logicalTexType, isPacked);\n    const shapeKey = getKeyFromTextureShape(shape, physicalTexType, isPacked);\n    if (!(shapeKey in this.freeTextures)) {\n      this.freeTextures[shapeKey] = [];\n    }\n\n    const texBytes = computeBytes(\n        shape, physicalTexType, this.gpgpu.gl, this.gpgpu.textureConfig,\n        isPacked);\n    const deleteTexThreshold = env().get('WEBGL_DELETE_TEXTURE_THRESHOLD');\n    if (deleteTexThreshold !== -1 &&\n        this._numBytesAllocated > deleteTexThreshold) {\n      this.gpgpu.deleteMatrixTexture(texture);\n      this._numBytesAllocated -= texBytes;\n    } else {\n      this.freeTextures[shapeKey].push(texture);\n      this.numFreeTextures++;\n      this._numBytesFree += texBytes;\n    }\n\n    this.numUsedTextures--;\n\n    const texList = this.usedTextures[shapeKey];\n    const texIndex = texList.indexOf(texture);\n    if (texIndex < 0) {\n      throw new Error(\n          'Cannot release a texture that was never provided by this ' +\n          'texture manager');\n    }\n    texList.splice(texIndex, 1);\n    this.log();\n  }\n\n  private log() {\n    if (!this.logEnabled) {\n      return;\n    }\n    const total = this.numFreeTextures + this.numUsedTextures;\n    console.log(\n        'Free/Used', `${this.numFreeTextures} / ${this.numUsedTextures}`,\n        `(${total})`);\n    const freeRatio = this._numBytesFree / this._numBytesAllocated;\n    console.log(`Bytes allocated: ${this._numBytesAllocated}`);\n    console.log(`Bytes unused: ${this._numBytesFree} (${\n        Math.round(100 * freeRatio)}%)`);\n  }\n\n  get numBytesAllocated(): number {\n    return this._numBytesAllocated;\n  }\n\n  get numBytesFree(): number {\n    return this._numBytesFree;\n  }\n\n  getNumUsedTextures(): number {\n    return this.numUsedTextures;\n  }\n\n  getNumFreeTextures(): number {\n    return this.numFreeTextures;\n  }\n\n  dispose() {\n    if (this.freeTextures == null) {\n      // Already disposed.\n      return;\n    }\n    for (const texShape in this.freeTextures) {\n      this.freeTextures[texShape].forEach(tex => {\n        this.gpgpu.deleteMatrixTexture(tex);\n      });\n    }\n    for (const texShape in this.usedTextures) {\n      this.usedTextures[texShape].forEach(tex => {\n        this.gpgpu.deleteMatrixTexture(tex);\n      });\n    }\n    this.freeTextures = null;\n    this.usedTextures = null;\n    this.numUsedTextures = 0;\n    this.numFreeTextures = 0;\n    this._numBytesAllocated = 0;\n    this._numBytesFree = 0;\n  }\n}\n\nfunction numBytesForInternalFormat(\n    gl: WebGLRenderingContext, internalFormat: number): number {\n  // tslint:disable-next-line:no-any\n  const glany = gl as any;\n  if (internalFormat === glany.R32F) {\n    return 4;\n  } else if (internalFormat === glany.R16F) {\n    return 2;\n  } else if (internalFormat === glany.RGBA32F) {\n    return 16;\n  } else if (internalFormat === gl.RGBA) {\n    return 16;\n  } else if (internalFormat === glany.RGBA16F) {\n    return 8;\n  }\n  throw new Error(`Unknown internal format ${internalFormat}`);\n}\n\nexport function computeBytes(\n    shape: [number, number], physicalTexType: PhysicalTextureType,\n    gl: WebGLRenderingContext, textureConfig: TextureConfig,\n    isPacked: boolean): number {\n  // It is not possible to infer packed status from the texture type because\n  // depending on the textureConfig, different  texture types may resolve to the\n  // same internal format (e.g. in WebGL1, the internal format for\n  // UNPACKED_FLOAT16 textures is gl.RGBA). Therefore we pass in `isPacked`\n  // explicitly.\n  const internalFormat =\n      internalFormatForPhysicalTexType(physicalTexType, textureConfig);\n\n  let numElements: number;\n  if (isPacked) {\n    const [packedWidth, packedHeight] =\n        getPackedMatrixTextureShapeWidthHeight(shape[0], shape[1]);\n    numElements = packedWidth * packedHeight;\n\n  } else {\n    const [width, height] =\n        getUnpackedMatrixTextureShapeWidthHeight(shape[0], shape[1]);\n    numElements = width * height;\n  }\n\n  const bytesPerElement = numBytesForInternalFormat(gl, internalFormat);\n  return numElements * bytesPerElement;\n}\n\nfunction internalFormatForPhysicalTexType(\n    physicalTexType: PhysicalTextureType,\n    textureConfig: TextureConfig): number {\n  switch (physicalTexType) {\n    case PhysicalTextureType.PACKED_2X2_FLOAT32:\n      return getInternalFormatForPackedMatrixTexture(textureConfig);\n    case PhysicalTextureType.PACKED_2X2_FLOAT16:\n      return getInternalFormatForFloat16PackedMatrixTexture(textureConfig);\n    case PhysicalTextureType.UNPACKED_FLOAT32:\n      return getInternalFormatForFloat32MatrixTexture(textureConfig);\n    case PhysicalTextureType.UNPACKED_FLOAT16:\n      return getInternalFormatForFloat16MatrixTexture(textureConfig);\n    case PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE:\n      return getInternalFormatForUnsignedBytesMatrixTexture(textureConfig);\n    default:\n      throw new Error(`Unknown physical texture type ${physicalTexType}`);\n  }\n}\n\nfunction getPhysicalTextureForRendering(isPacked: boolean):\n    PhysicalTextureType {\n  if (env().getBool('WEBGL_RENDER_FLOAT32_ENABLED')) {\n    if (isPacked) {\n      return PhysicalTextureType.PACKED_2X2_FLOAT32;\n    }\n    return PhysicalTextureType.UNPACKED_FLOAT32;\n  }\n\n  if (isPacked) {\n    return PhysicalTextureType.PACKED_2X2_FLOAT16;\n  }\n  return PhysicalTextureType.UNPACKED_FLOAT16;\n}\n\nfunction getPhysicalFromLogicalTextureType(\n    logicalTexType: TextureUsage, isPacked: boolean): PhysicalTextureType {\n  if (logicalTexType === TextureUsage.UPLOAD) {\n    return PhysicalTextureType.PACKED_2X2_FLOAT32;\n  } else if (logicalTexType === TextureUsage.RENDER || logicalTexType == null) {\n    return getPhysicalTextureForRendering(isPacked);\n  } else if (\n      logicalTexType === TextureUsage.DOWNLOAD ||\n      logicalTexType === TextureUsage.PIXELS) {\n    return PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE;\n  }\n  throw new Error(`Unknown logical texture type ${logicalTexType}`);\n}\n\nfunction getKeyFromTextureShape(\n    shapeRowsCol: [number, number], physicalTexType: PhysicalTextureType,\n    isPacked: boolean): string {\n  return `${shapeRowsCol[0]}_${shapeRowsCol[1]}_${physicalTexType}_${isPacked}`;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport class UnaryOpProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  enableShapeUniforms: boolean;\n\n  constructor(aShape: number[], opSnippet: string) {\n    this.outputShape = aShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    this.userCode = `\n      float unaryOperation(float x) {\n        ${opSnippet}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `;\n  }\n}\n\nexport const CHECK_NAN_SNIPPET = `if (isnan(x)) return x;`;\n\nexport const LINEAR = `return x;`;\n\nexport const ABS = `return abs(x);`;\n\nexport function STEP(alpha = 0.0) {\n  return CHECK_NAN_SNIPPET + `\n    return x > 0.0 ? 1.0 : float(${alpha});\n  `;\n}\n\nexport const ELU = `return (x >= 0.0) ? x : (exp(x) - 1.0);`;\nexport const RELU = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : x;\n`;\n\nexport const RELU6 = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n`;\n\nexport const CLONE = 'return x;';\n\nexport const SIGMOID = `return 1.0 / (1.0 + exp(-1.0 * x));`;\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport const LINEAR = `return x;`;\n\nexport const ELU = `\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n`;\n\nexport const RELU = `\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\nexport const RELU6 = `\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\nexport const SIGMOID = `return 1.0 / (1.0 + exp(-1.0 * x));`;\n\nexport class UnaryOpPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  enableShapeUniforms: boolean;\n  outputShape: number[];\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(aShape: number[], opSnippet: string) {\n    this.outputShape = aShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    this.userCode = `\n      vec4 unaryOperation(vec4 x) {\n        ${opSnippet}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels, getSourceCoords} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class UnpackProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = false;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(outputShape: number[]) {\n    this.outputShape = outputShape;\n    const rank = outputShape.length;\n\n    const channels = getChannels('rc', rank);\n    const dtype = getCoordsDataType(rank);\n    const sourceCoords = getSourceCoords(rank, channels);\n    const innerDims = channels.slice(-2);\n    const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\n\n    this.userCode = `\n      void main() {\n        ${dtype} rc = getOutputCoords();\n        vec4 packedInput = getA(${sourceCoords});\n\n        setOutput(getChannel(packedInput, ${coords}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Import webgl flags.\nimport './flags_webgl';\n\nimport * as tf from '@tensorflow/tfjs-core';\nimport {backend_util, BackendValues, buffer, DataId, DataStorage, DataType, DataValues, engine, env, kernel_impls, KernelBackend, MemoryInfo, NumericDataType, Rank, RecursiveArray, scalar, ShapeMap, Tensor, Tensor2D, TensorBuffer, TensorInfo, tidy, TimingInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {getWebGLContext} from './canvas_util';\nimport {DecodeMatrixProgram} from './decode_matrix_gpu';\nimport {DecodeMatrixPackedProgram} from './decode_matrix_packed_gpu';\nimport {EncodeFloatProgram} from './encode_float_gpu';\nimport {EncodeFloatPackedProgram} from './encode_float_packed_gpu';\nimport {EncodeMatrixProgram} from './encode_matrix_gpu';\nimport {EncodeMatrixPackedProgram} from './encode_matrix_packed_gpu';\nimport {GPGPUContext} from './gpgpu_context';\nimport * as gpgpu_math from './gpgpu_math';\nimport {GPGPUBinary, GPGPUProgram, TensorData} from './gpgpu_math';\nimport {simpleAbsImplCPU} from './kernel_utils/shared';\nimport {PackProgram} from './pack_gpu';\nimport {ReshapePackedProgram} from './reshape_packed_gpu';\nimport * as tex_util from './tex_util';\nimport {TextureData, TextureUsage} from './tex_util';\nimport {TextureManager} from './texture_manager';\nimport * as unary_op from './unaryop_gpu';\nimport {UnaryOpProgram} from './unaryop_gpu';\nimport {UnaryOpPackedProgram} from './unaryop_packed_gpu';\nimport {UnpackProgram} from './unpack_gpu';\nimport * as webgl_util from './webgl_util';\n\nconst whereImpl = kernel_impls.whereImpl;\n\nexport const EPSILON_FLOAT32 = 1e-7;\nexport const EPSILON_FLOAT16 = 1e-4;\n\ntype KernelInfo = {\n  name: string; query: Promise<number>;\n};\n\nexport type TimerNode = RecursiveArray<KernelInfo>|KernelInfo;\nexport interface CPUTimerQuery {\n  startMs: number;\n  endMs?: number;\n}\n\nexport interface WebGLMemoryInfo extends MemoryInfo {\n  numBytesInGPU: number;\n  // Tracks the total number of bytes allocated on the GPU, accounting for the\n  // physical texture type.\n  numBytesInGPUAllocated: number;\n  // Tracks byte size of textures that were created and then made available for\n  // reuse (disposed).\n  numBytesInGPUFree: number;\n  unreliable: boolean;\n}\n\nexport interface WebGLTimingInfo extends TimingInfo {\n  uploadWaitMs: number;\n  downloadWaitMs: number;\n}\n\nconst binaryCaches: {[webGLVersion: string]: {[key: string]: GPGPUBinary}} = {};\n\nexport function getBinaryCache(webGLVersion: number) {\n  if (webGLVersion in binaryCaches) {\n    return binaryCaches[webGLVersion];\n  }\n  binaryCaches[webGLVersion] = {};\n  return binaryCaches[webGLVersion];\n}\n\n// Empirically determined constant used to determine size threshold for handing\n// off execution to the CPU.\nconst CPU_HANDOFF_SIZE_THRESHOLD =\n    env().getNumber('CPU_HANDOFF_SIZE_THRESHOLD');\n\n// Empirically determined constant used to decide the number of MB on GPU\n// before we warn about high memory use. The MB are this constant * screen area\n// * dpi / 1024 / 1024.\nconst BEFORE_PAGING_CONSTANT = 600;\nfunction numMBBeforeWarning(): number {\n  if (env().global.screen == null) {\n    return 1024;  // 1 GB.\n  }\n  return (env().global.screen.height * env().global.screen.width *\n          window.devicePixelRatio) *\n      BEFORE_PAGING_CONSTANT / 1024 / 1024;\n}\n\nexport class MathBackendWebGL extends KernelBackend {\n  texData: DataStorage<TextureData>;\n  gpgpu: GPGPUContext;\n\n  private static nextDataId = 0;\n  private nextDataId(): number {\n    return MathBackendWebGL.nextDataId++;\n  }\n  // Maps data ids that have a pending read operation, to list of subscribers.\n  private pendingRead = new WeakMap<DataId, Array<(arr: TypedArray) => void>>();\n  // List of data ids that are scheduled for disposal, but are waiting on a\n  // pending read operation.\n  private pendingDisposal = new WeakSet<DataId>();\n\n  // Used to count the number of 'shallow' sliced tensors that point to the\n  // same data id.\n  dataRefCount = new WeakMap<DataId, number>();\n  private numBytesInGPU = 0;\n\n  private canvas: HTMLCanvasElement|OffscreenCanvas;\n\n  private programTimersStack: TimerNode[];\n  private activeTimers: TimerNode[];\n  // Accumulated time spent (including blocking) in uploading data to webgl.\n  private uploadWaitMs = 0;\n  // Accumulated time spent (including blocking in downloading data from webgl.\n  private downloadWaitMs = 0;\n\n  // record the last manual GL Flush time.\n  private lastGlFlushTime = 0;\n\n  // Number of bits of precision of this backend.\n  private floatPrecisionValue: 32|16;\n\n  private textureManager: TextureManager;\n  private binaryCache: {[key: string]: GPGPUBinary};\n  private gpgpuCreatedLocally: boolean;\n  private numMBBeforeWarning: number;\n  private warnedAboutMemory = false;\n\n  constructor(gpgpu?: GPGPUContext) {\n    super();\n    if (!env().getBool('HAS_WEBGL')) {\n      throw new Error('WebGL is not supported on this device');\n    }\n\n    if (gpgpu == null) {\n      const gl = getWebGLContext(env().getNumber('WEBGL_VERSION'));\n      this.binaryCache = getBinaryCache(env().getNumber('WEBGL_VERSION'));\n      this.gpgpu = new GPGPUContext(gl);\n      this.canvas = gl.canvas;\n      this.gpgpuCreatedLocally = true;\n    } else {\n      this.gpgpu = gpgpu;\n      this.binaryCache = {};\n      this.gpgpuCreatedLocally = false;\n      this.canvas = gpgpu.gl.canvas;\n    }\n    this.textureManager = new TextureManager(this.gpgpu);\n    this.numMBBeforeWarning = numMBBeforeWarning();\n\n    this.texData = new DataStorage(this, engine());\n  }\n\n  numDataIds() {\n    return this.texData.numDataIds() - this.pendingDeletes;\n  }\n\n  write(values: BackendValues, shape: number[], dtype: DataType): DataId {\n    if (env().getBool('WEBGL_CHECK_NUMERICAL_PROBLEMS') ||\n        env().getBool('DEBUG')) {\n      this.checkNumericalProblems(values);\n    }\n    if (dtype === 'complex64' && values != null) {\n      throw new Error(\n          `Cannot write to a complex64 dtype. ` +\n          `Please use tf.complex(real, imag).`);\n    }\n    const dataId = {id: this.nextDataId()};\n    this.texData.set(\n        dataId,\n        {shape, dtype, values, usage: TextureUsage.UPLOAD, refCount: 1});\n    return dataId;\n  }\n\n  /** Return refCount of a `TensorData`. */\n  refCount(dataId: DataId): number {\n    if (this.texData.has(dataId)) {\n      const tensorData = this.texData.get(dataId);\n      return tensorData.refCount;\n    }\n    return 0;\n  }\n\n  /** Increase refCount of a `TextureData`. */\n  incRef(dataId: DataId): void {\n    const texData = this.texData.get(dataId);\n    texData.refCount++;\n  }\n\n  /** Decrease refCount of a `TextureData`. */\n  decRef(dataId: DataId): void {\n    if (this.texData.has(dataId)) {\n      const texData = this.texData.get(dataId);\n      texData.refCount--;\n    }\n  }\n\n  move(\n      dataId: DataId, values: BackendValues, shape: number[], dtype: DataType,\n      refCount: number): void {\n    if (env().getBool('DEBUG')) {\n      this.checkNumericalProblems(values);\n    }\n    if (dtype === 'complex64') {\n      throw new Error(\n          `Cannot write to a complex64 dtype. ` +\n          `Please use tf.complex(real, imag).`);\n    }\n    this.texData.set(\n        dataId, {shape, dtype, values, usage: TextureUsage.UPLOAD, refCount});\n  }\n\n  disposeIntermediateTensorInfo(tensorInfo: TensorInfo): void {\n    this.disposeData(tensorInfo.dataId);\n  }\n\n  readSync(dataId: DataId): BackendValues {\n    const texData = this.texData.get(dataId);\n    const {values, dtype, complexTensorInfos, slice, shape, isPacked} = texData;\n\n    // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res =\n          this.runWebGLProgram(program, [{dataId, shape, dtype}], dtype);\n      const data = this.readSync(res.dataId);\n      this.disposeIntermediateTensorInfo(res);\n      return data;\n    }\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n    if (dtype === 'string') {\n      return values;\n    }\n    const shouldTimeProgram = this.activeTimers != null;\n    let start: number;\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n\n    let result: Float32Array;\n    if (dtype === 'complex64') {\n      const realValues =\n          this.readSync(complexTensorInfos.real.dataId) as Float32Array;\n      const imagValues =\n          this.readSync(complexTensorInfos.imag.dataId) as Float32Array;\n      result = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n    } else {\n      result = this.getValuesFromTexture(dataId);\n    }\n\n    if (shouldTimeProgram) {\n      this.downloadWaitMs += util.now() - start;\n    }\n    return this.convertAndCacheOnCPU(dataId, result);\n  }\n\n  async read(dataId: DataId): Promise<BackendValues> {\n    if (this.pendingRead.has(dataId)) {\n      const subscribers = this.pendingRead.get(dataId);\n      return new Promise<TypedArray>(resolve => subscribers.push(resolve));\n    }\n    const texData = this.texData.get(dataId);\n    const {values, shape, slice, dtype, complexTensorInfos, isPacked} = texData;\n\n    // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res =\n          this.runWebGLProgram(program, [{dataId, shape, dtype}], dtype);\n      const data = this.read(res.dataId);\n      this.disposeIntermediateTensorInfo(res);\n      return data;\n    }\n\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n\n    if (!env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') &&\n        env().getNumber('WEBGL_VERSION') === 2) {\n      throw new Error(\n          `tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and ` +\n          `WEBGL_VERSION=2 not yet supported.`);\n    }\n\n    let buffer: WebGLBuffer = null;\n    let tmpDownloadTarget: TensorInfo;\n\n    if (dtype !== 'complex64' && env().get('WEBGL_BUFFER_SUPPORTED')) {\n      // Possibly copy the texture into a buffer before inserting a fence.\n      tmpDownloadTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpDownloadTarget.dataId);\n\n      buffer = this.gpgpu.createBufferFromTexture(\n          tmpData.texture, ...tex_util.getDenseTexShape(shape));\n    }\n\n    this.pendingRead.set(dataId, []);\n\n    if (dtype !== 'complex64') {\n      // Create a fence and wait for it to resolve.\n      await this.gpgpu.createAndWaitForFence();\n    }\n\n    // Download the values from the GPU.\n    let vals: Float32Array;\n    if (dtype === 'complex64') {\n      const ps = await Promise.all([\n        this.read(complexTensorInfos.real.dataId),\n        this.read(complexTensorInfos.imag.dataId)\n      ]);\n\n      const realValues = ps[0];\n      const imagValues = ps[1];\n      vals = backend_util.mergeRealAndImagArrays(\n          realValues as Float32Array, imagValues as Float32Array);\n    } else if (buffer == null) {\n      vals = this.getValuesFromTexture(dataId);\n    } else {\n      const size = util.sizeFromShape(shape);\n      vals = this.gpgpu.downloadFloat32MatrixFromBuffer(buffer, size);\n    }\n    if (tmpDownloadTarget != null) {\n      this.disposeIntermediateTensorInfo(tmpDownloadTarget);\n    }\n    if (buffer != null) {\n      const gl = this.gpgpu.gl;\n      webgl_util.callAndCheck(gl, () => gl.deleteBuffer(buffer));\n    }\n    const dTypeVals = this.convertAndCacheOnCPU(dataId, vals);\n\n    const subscribers = this.pendingRead.get(dataId);\n    this.pendingRead.delete(dataId);\n\n    // Notify all pending reads.\n    subscribers.forEach(resolve => resolve(dTypeVals));\n    if (this.pendingDisposal.has(dataId)) {\n      this.pendingDisposal.delete(dataId);\n      if (this.disposeData(dataId)) {\n        engine().removeDataId(dataId, this);\n      }\n      this.pendingDeletes--;\n    }\n    return dTypeVals;\n  }\n\n  bufferSync<R extends Rank>(t: TensorInfo): TensorBuffer<R> {\n    const data = this.readSync(t.dataId);\n    let decodedData = data as DataValues;\n    if (t.dtype === 'string') {\n      try {\n        // Decode the bytes into string.\n        decodedData = (data as Uint8Array[]).map(d => util.decodeString(d));\n      } catch {\n        throw new Error('Failed to decode encoded string bytes into utf-8');\n      }\n    }\n    return buffer(t.shape as ShapeMap[R], t.dtype, decodedData) as\n        TensorBuffer<R>;\n  }\n\n  private checkNumericalProblems(values: BackendValues): void {\n    if (values == null) {\n      return;\n    }\n    for (let i = 0; i < values.length; i++) {\n      const num = values[i] as number;\n      if (!webgl_util.canBeRepresented(num)) {\n        if (env().getBool('WEBGL_RENDER_FLOAT32_CAPABLE')) {\n          throw Error(\n              `The value ${num} cannot be represented with your ` +\n              `current settings. Consider enabling float32 rendering: ` +\n              `'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);\n        }\n        throw Error(`The value ${num} cannot be represented on this device.`);\n      }\n    }\n  }\n\n  private getValuesFromTexture(dataId: DataId): Float32Array {\n    const {shape, dtype, isPacked} = this.texData.get(dataId);\n    const size = util.sizeFromShape(shape);\n    if (env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED')) {\n      const tmpTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpTarget.dataId);\n      const vals = this.gpgpu\n                       .downloadMatrixFromPackedTexture(\n                           tmpData.texture, ...tex_util.getDenseTexShape(shape))\n                       .subarray(0, size);\n\n      this.disposeIntermediateTensorInfo(tmpTarget);\n\n      return vals;\n    }\n\n    const shouldUsePackedProgram =\n        env().getBool('WEBGL_PACK') && isPacked === true;\n    const outputShape =\n        shouldUsePackedProgram ? webgl_util.getShapeAs3D(shape) : shape;\n    const program = shouldUsePackedProgram ?\n        new EncodeFloatPackedProgram(outputShape as [number, number, number]) :\n        new EncodeFloatProgram(outputShape);\n    const output = this.runWebGLProgram(\n        program, [{shape: outputShape, dtype, dataId}], 'float32');\n    const tmpData = this.texData.get(output.dataId);\n    const vals =\n        this.gpgpu\n            .downloadByteEncodedFloatMatrixFromOutputTexture(\n                tmpData.texture, tmpData.texShape[0], tmpData.texShape[1])\n            .subarray(0, size);\n    this.disposeIntermediateTensorInfo(output);\n\n    return vals;\n  }\n\n  timerAvailable(): boolean {\n    return env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0;\n  }\n\n  async time(f: () => void): Promise<WebGLTimingInfo> {\n    const oldActiveTimers = this.activeTimers;\n    const newActiveTimers: TimerNode[] = [];\n\n    let outerMostTime = false;\n    if (this.programTimersStack == null) {\n      this.programTimersStack = newActiveTimers;\n      outerMostTime = true;\n    } else {\n      this.activeTimers.push(newActiveTimers);\n    }\n    this.activeTimers = newActiveTimers;\n\n    f();\n\n    // needing to split these up because util.flatten only accepts certain types\n    const flattenedActiveTimerQueries =\n        util.flatten(this.activeTimers.map((d: KernelInfo) => d.query))\n            .filter(d => d != null);\n    const flattenedActiveTimerNames =\n        util.flatten(this.activeTimers.map((d: KernelInfo) => d.name))\n            .filter(d => d != null);\n\n    this.activeTimers = oldActiveTimers;\n\n    if (outerMostTime) {\n      this.programTimersStack = null;\n    }\n\n    const res: WebGLTimingInfo = {\n      uploadWaitMs: this.uploadWaitMs,\n      downloadWaitMs: this.downloadWaitMs,\n      kernelMs: null,\n      wallMs: null  // will be filled by the engine\n    };\n\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      const kernelMs = await Promise.all(flattenedActiveTimerQueries);\n\n      res['kernelMs'] = util.sum(kernelMs);\n      res['getExtraProfileInfo'] = () =>\n          kernelMs.map((d, i) => ({name: flattenedActiveTimerNames[i], ms: d}))\n              .map(d => `${d.name}: ${d.ms}`)\n              .join(', ');\n    } else {\n      res['kernelMs'] = {\n        error: 'WebGL query timers are not supported in this environment.'\n      };\n    }\n\n    this.uploadWaitMs = 0;\n    this.downloadWaitMs = 0;\n    return res;\n  }\n  memory(): WebGLMemoryInfo {\n    return {\n      unreliable: false,\n      numBytesInGPU: this.numBytesInGPU,\n      numBytesInGPUAllocated: this.textureManager.numBytesAllocated,\n      numBytesInGPUFree: this.textureManager.numBytesFree\n    } as WebGLMemoryInfo;\n  }\n\n  private startTimer(): WebGLQuery|CPUTimerQuery {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      return this.gpgpu.beginQuery();\n    }\n    return {startMs: util.now(), endMs: null};\n  }\n\n  private endTimer(query: WebGLQuery|CPUTimerQuery): WebGLQuery|CPUTimerQuery {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      this.gpgpu.endQuery();\n      return query;\n    }\n    (query as CPUTimerQuery).endMs = util.now();\n    return query;\n  }\n\n  private async getQueryTime(query: WebGLQuery|CPUTimerQuery): Promise<number> {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      return this.gpgpu.waitForQueryAndGetTime(query as WebGLQuery);\n    }\n    const timerQuery = query as CPUTimerQuery;\n    return timerQuery.endMs - timerQuery.startMs;\n  }\n\n  private pendingDeletes = 0;\n\n  /**\n   * Decrease the RefCount on the dataId and dispose the memory if the dataId\n   * has 0 refCount. If there are pending read on the data, the disposal would\n   * added to the pending delete queue. Return true if the dataId is removed\n   * from backend or the backend does not contain the dataId, false if the\n   * dataId is not removed. Memory may or may not be released even when dataId\n   * is removed, which also depends on dataRefCount, see `releaseGPU`.\n   * @param dataId\n   * @oaram force Optional, remove the data regardless of refCount\n   */\n  disposeData(dataId: DataId, force = false): boolean {\n    if (this.pendingDisposal.has(dataId)) {\n      return false;\n    }\n\n    // No-op if already disposed.\n    if (!this.texData.has(dataId)) {\n      return true;\n    }\n\n    // if force flag is set, change refCount to 0, this would ensure disposal\n    // when added to the pendingDisposal queue. Memory may or may not be\n    // released, which also depends on dataRefCount, see `releaseGPU`.\n    if (force) {\n      this.texData.get(dataId).refCount = 0;\n    } else {\n      this.texData.get(dataId).refCount--;\n    }\n\n    if (!force && this.texData.get(dataId).refCount > 0) {\n      return false;\n    }\n\n    if (this.pendingRead.has(dataId)) {\n      this.pendingDisposal.add(dataId);\n      this.pendingDeletes++;\n      return false;\n    }\n\n    this.releaseGPUData(dataId);\n    const {complexTensorInfos} = this.texData.get(dataId);\n    if (complexTensorInfos != null) {\n      this.disposeData(complexTensorInfos.real.dataId, force);\n      this.disposeData(complexTensorInfos.imag.dataId, force);\n    }\n\n    this.texData.delete(dataId);\n\n    return true;\n  }\n\n  private releaseGPUData(dataId: DataId): void {\n    const {texture, dtype, texShape, usage, isPacked, slice} =\n        this.texData.get(dataId);\n    const key = slice && slice.origDataId || dataId;\n    const refCount = this.dataRefCount.get(key);\n\n    if (refCount > 1) {\n      this.dataRefCount.set(key, refCount - 1);\n    } else {\n      this.dataRefCount.delete(key);\n      if (texture != null) {\n        this.numBytesInGPU -= this.computeBytes(texShape, dtype);\n        this.textureManager.releaseTexture(texture, texShape, usage, isPacked);\n      }\n    }\n\n    const texData = this.texData.get(dataId);\n    texData.texture = null;\n    texData.texShape = null;\n    texData.isPacked = false;\n    texData.slice = null;\n  }\n\n  getTexture(dataId: DataId): WebGLTexture {\n    this.uploadToGPU(dataId);\n    return this.texData.get(dataId).texture;\n  }\n\n  /**\n   * Returns internal information for the specific data bucket. Used in unit\n   * tests.\n   */\n  getDataInfo(dataId: DataId): TextureData {\n    return this.texData.get(dataId);\n  }\n\n  /*\n  Tests whether all the inputs to an op are small and on the CPU. This heuristic\n  determines when it would be faster to execute a kernel on the CPU. WebGL\n  kernels opt into running this check and forwarding when appropriate.\n  TODO(https://github.com/tensorflow/tfjs/issues/872): Develop a more\n  sustainable strategy for optimizing backend execution of ops.\n   */\n  shouldExecuteOnCPU(\n      inputs: TensorInfo[],\n      sizeThreshold = CPU_HANDOFF_SIZE_THRESHOLD): boolean {\n    return env().getBool('WEBGL_CPU_FORWARD') &&\n        inputs.every(\n            input => this.texData.get(input.dataId).texture == null &&\n                util.sizeFromShape(input.shape) < sizeThreshold);\n  }\n\n  getGPGPUContext(): GPGPUContext {\n    return this.gpgpu;\n  }\n\n  where(condition: Tensor): Tensor2D {\n    backend_util.warn(\n        'tf.where() in webgl locks the UI thread. ' +\n        'Call tf.whereAsync() instead');\n    const condVals = condition.dataSync();\n    return whereImpl(condition.shape, condVals);\n  }\n\n  private packedUnaryOp(x: TensorInfo, op: string, dtype: DataType) {\n    const program = new UnaryOpPackedProgram(x.shape, op);\n    const outInfo = this.compileAndRun(program, [x], dtype);\n    return engine().makeTensorFromDataId(\n        outInfo.dataId, outInfo.shape, outInfo.dtype);\n  }\n\n  // TODO(msoulanille) remove this once the backend has been modularized\n  // a copy is needed here to break a circular dependency.\n  // Also remove the op from unary_op.\n  abs<T extends Tensor>(x: T): T {\n    // TODO: handle cases when x is complex.\n    if (this.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {\n      const outValues =\n          simpleAbsImplCPU(this.texData.get(x.dataId).values as TypedArray);\n      return this.makeOutput(x.shape, x.dtype, outValues);\n    }\n\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_op.ABS, x.dtype) as T;\n    }\n\n    const program = new UnaryOpProgram(x.shape, unary_op.ABS);\n    const outInfo = this.compileAndRun(program, [x]);\n    return engine().makeTensorFromDataId(\n               outInfo.dataId, outInfo.shape, outInfo.dtype) as T;\n  }\n\n  makeTensorInfo(\n      shape: number[], dtype: DataType,\n      values?: BackendValues|string[]): TensorInfo {\n    let dataId;\n    if (dtype === 'string' && values != null && values.length > 0 &&\n        util.isString(values[0])) {\n      const encodedValues =\n          (values as {} as string[]).map(d => util.encodeString(d));\n\n      dataId = this.write(encodedValues, shape, dtype);\n    } else {\n      dataId = this.write(values as TypedArray, shape, dtype);\n    }\n\n    this.texData.get(dataId).usage = null;\n    return {dataId, shape, dtype};\n  }\n\n  private makeOutput<T extends Tensor>(\n      shape: number[], dtype: DataType, values?: BackendValues): T {\n    const {dataId} = this.makeTensorInfo(shape, dtype, values);\n    return engine().makeTensorFromDataId(dataId, shape, dtype, this) as T;\n  }\n\n  unpackTensor(input: TensorInfo): TensorInfo {\n    const program = new UnpackProgram(input.shape);\n    return this.runWebGLProgram(program, [input], input.dtype);\n  }\n\n  packTensor(input: TensorInfo): TensorInfo {\n    const program = new PackProgram(input.shape);\n    const preventEagerUnpackingOutput = true;\n    return this.runWebGLProgram(\n        program, [input], input.dtype, null /* customUniformValues */,\n        preventEagerUnpackingOutput);\n  }\n\n  private packedReshape(input: TensorInfo, afterShape: number[]): TensorInfo {\n    const input3DShape = [\n      webgl_util.getBatchDim(input.shape),\n      ...webgl_util.getRowsCols(input.shape)\n    ] as [number, number, number];\n    const input3D: TensorInfo = {\n      dtype: input.dtype,\n      shape: input3DShape,\n      dataId: input.dataId\n    };\n    const afterShapeAs3D = [\n      webgl_util.getBatchDim(afterShape), ...webgl_util.getRowsCols(afterShape)\n    ] as [number, number, number];\n\n    const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n    const preventEagerUnpackingOfOutput = true;\n    const output = this.runWebGLProgram(\n        program, [input3D], input.dtype, null /* customUniformValues */,\n        preventEagerUnpackingOfOutput);\n    return {dataId: output.dataId, shape: afterShape, dtype: output.dtype};\n  }\n\n  private decode(dataId: DataId): TensorInfo {\n    const texData = this.texData.get(dataId);\n    const {isPacked, shape, dtype} = texData;\n    const shapeAs3D =\n        webgl_util.getShapeAs3D(shape) as [number, number, number];\n    let program;\n    if (isPacked) {\n      program = new DecodeMatrixPackedProgram(shapeAs3D);\n    } else {\n      program = new DecodeMatrixProgram(shapeAs3D);\n    }\n    const preventEagerUnpackingOfOutput = true;\n    const out = this.runWebGLProgram(\n        program, [{shape: shapeAs3D, dtype, dataId}], dtype,\n        null /* customUniformValues */, preventEagerUnpackingOfOutput);\n    return {dtype, shape, dataId: out.dataId};\n  }\n\n  runWebGLProgram(\n      program: GPGPUProgram, inputs: TensorInfo[], outputDtype: DataType,\n      customUniformValues?: number[][],\n      preventEagerUnpackingOfOutput = false): TensorInfo {\n    const output = this.makeTensorInfo(program.outputShape, outputDtype);\n    const outData = this.texData.get(output.dataId);\n    if (program.packedOutput) {\n      outData.isPacked = true;\n    }\n    if (program.outPackingScheme === tex_util.PackingScheme.DENSE) {\n      const texelShape = tex_util.getDenseTexShape(program.outputShape);\n      // For a densely packed output, we explicitly set texShape\n      // so it doesn't get assigned later according to our typical packing\n      // scheme wherein a single texel can only contain values from adjacent\n      // rows/cols.\n      outData.texShape = texelShape.map(d => d * 2) as [number, number];\n    }\n    if (program.outTexUsage != null) {\n      outData.usage = program.outTexUsage;\n    }\n    if (util.sizeFromShape(output.shape) === 0) {\n      // Short-circuit the computation since the result is empty (has 0 in its\n      // shape).\n      outData.values =\n          util.getTypedArrayFromDType(output.dtype as 'float32', 0);\n      return output;\n    }\n\n    const dataToDispose: TensorInfo[] = [];\n    const inputsData: TensorData[] = inputs.map(input => {\n      if (input.dtype === 'complex64') {\n        throw new Error(\n            `GPGPUProgram does not support complex64 input. For complex64 ` +\n            `dtypes, please separate the program into real and imaginary ` +\n            `parts.`);\n      }\n\n      let texData = this.texData.get(input.dataId);\n\n      if (texData.texture == null) {\n        if (!program.packedInputs &&\n            util.sizeFromShape(input.shape) <=\n                env().getNumber('WEBGL_SIZE_UPLOAD_UNIFORM')) {\n          // Upload small tensors that live on the CPU as uniforms, not as\n          // textures. Do this only when the environment supports 32bit floats\n          // due to problems when comparing 16bit floats with 32bit floats.\n          // TODO(https://github.com/tensorflow/tfjs/issues/821): Make it\n          // possible for packed shaders to sample from uniforms.\n          return {\n            shape: input.shape,\n            texData: null,\n            isUniform: true,\n            uniformValues: texData.values as TypedArray\n          };\n        }\n\n        // This ensures that if a packed program's inputs have not yet been\n        // uploaded to the GPU, they get uploaded as packed right off the bat.\n        if (program.packedInputs) {\n          texData.isPacked = true;\n          texData.shape = input.shape;\n        }\n      } else if (!!texData.isPacked !== !!program.packedInputs) {\n        input = texData.isPacked ? this.unpackTensor(input) :\n                                   this.packTensor(input);\n        dataToDispose.push(input);\n        texData = this.texData.get(input.dataId);\n      } else if (\n          texData.isPacked &&\n          !webgl_util.isReshapeFree(texData.shape, input.shape)) {\n        // This is a special case where a texture exists for a tensor\n        // but the shapes are incompatible (due to packing constraints) because\n        // the tensor did not have a chance to go through the packed reshape\n        // shader. This only happens when we reshape the *same* tensor to form\n        // *distinct* inputs to an op, e.g. dotting a vector with itself. This\n        // case will disappear once packed uploading is the default.\n\n        const savedInput = input;\n        const targetShape = input.shape;\n\n        input.shape = texData.shape;\n        input = this.packedReshape(input as Tensor, targetShape);\n        dataToDispose.push(input);\n        texData = this.texData.get(input.dataId);\n\n        savedInput.shape = targetShape;\n      }\n\n      this.uploadToGPU(input.dataId);\n      return {shape: input.shape, texData, isUniform: false};\n    });\n\n    this.uploadToGPU(output.dataId);\n    const outputData:\n        TensorData = {shape: output.shape, texData: outData, isUniform: false};\n    const key = gpgpu_math.makeShaderKey(program, inputsData, outputData);\n    const binary = this.getAndSaveBinary(key, () => {\n      return gpgpu_math.compileProgram(\n          this.gpgpu, program, inputsData, outputData);\n    });\n    const shouldTimeProgram = this.activeTimers != null;\n    let query: WebGLQuery|CPUTimerQuery;\n    if (shouldTimeProgram) {\n      query = this.startTimer();\n    }\n\n    gpgpu_math.runProgram(\n        this.gpgpu, binary, inputsData, outputData, customUniformValues);\n\n    dataToDispose.forEach(info => this.disposeIntermediateTensorInfo(info));\n\n    if (shouldTimeProgram) {\n      query = this.endTimer(query);\n      this.activeTimers.push(\n          {name: program.constructor.name, query: this.getQueryTime(query)});\n    }\n\n    const glFlushThreshold = env().get('WEBGL_FLUSH_THRESHOLD');\n    // Manually GL flush requested\n    if (glFlushThreshold > 0) {\n      const time = util.now();\n      if ((time - this.lastGlFlushTime) > glFlushThreshold) {\n        this.gpgpu.gl.flush();\n        this.lastGlFlushTime = time;\n      }\n    }\n\n    if (!env().getBool('WEBGL_LAZILY_UNPACK') && outData.isPacked &&\n        preventEagerUnpackingOfOutput === false) {\n      const unpacked = this.unpackTensor(output);\n      this.disposeIntermediateTensorInfo(output);\n      return unpacked;\n    }\n    return output;\n  }\n\n  compileAndRun(\n      program: GPGPUProgram, inputs: TensorInfo[], outputDtype?: DataType,\n      customUniformValues?: number[][],\n      preventEagerUnpackingOfOutput = false): TensorInfo {\n    outputDtype = outputDtype || inputs[0].dtype;\n    const outInfo = this.runWebGLProgram(\n        program, inputs, outputDtype, customUniformValues,\n        preventEagerUnpackingOfOutput);\n    return outInfo;\n  }\n\n  private getAndSaveBinary(key: string, getBinary: () => GPGPUBinary):\n      GPGPUBinary {\n    if (!(key in this.binaryCache)) {\n      this.binaryCache[key] = getBinary();\n    }\n    return this.binaryCache[key];\n  }\n\n  getTextureManager(): TextureManager {\n    return this.textureManager;\n  }\n\n  private disposed = false;\n\n  dispose() {\n    if (this.disposed) {\n      return;\n    }\n    // Avoid disposing the compiled webgl programs during unit testing because\n    // it slows down test execution.\n    if (!env().getBool('IS_TEST')) {\n      const allKeys = Object.keys(this.binaryCache);\n      allKeys.forEach(key => {\n        this.gpgpu.deleteProgram(this.binaryCache[key].webGLProgram);\n        delete this.binaryCache[key];\n      });\n    }\n    this.textureManager.dispose();\n    if (this.canvas != null &&\n        (typeof (HTMLCanvasElement) !== 'undefined' &&\n         this.canvas instanceof HTMLCanvasElement)) {\n      this.canvas.remove();\n    } else {\n      this.canvas = null;\n    }\n    if (this.gpgpuCreatedLocally) {\n      this.gpgpu.program = null;\n      this.gpgpu.dispose();\n    }\n    this.disposed = true;\n  }\n\n  floatPrecision(): 16|32 {\n    if (this.floatPrecisionValue == null) {\n      this.floatPrecisionValue = tidy(() => {\n        if (!env().get('WEBGL_RENDER_FLOAT32_ENABLED')) {\n          // Momentarily switching DEBUG flag to false so we don't throw an\n          // error trying to upload a small value.\n          const debugFlag = env().getBool('DEBUG');\n          env().set('DEBUG', false);\n          const underflowCheckValue = this.abs(scalar(1e-8)).dataSync()[0];\n          env().set('DEBUG', debugFlag);\n\n          if (underflowCheckValue > 0) {\n            return 32;\n          }\n        }\n        return 16;\n      });\n    }\n    return this.floatPrecisionValue;\n  }\n\n  /** Returns the smallest representable number.  */\n  epsilon(): number {\n    return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n  }\n\n  uploadToGPU(dataId: DataId): void {\n    const texData = this.texData.get(dataId);\n    const {shape, dtype, values, texture, usage, isPacked} = texData;\n\n    if (texture != null) {\n      // Array is already on GPU. No-op.\n      return;\n    }\n    const shouldTimeProgram = this.activeTimers != null;\n    let start: number;\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n\n    let texShape = texData.texShape;\n    if (texShape == null) {\n      texShape = webgl_util.getTextureShapeFromLogicalShape(shape, isPacked);\n      texData.texShape = texShape;\n    }\n\n    if (values != null) {\n      const shapeAs3D = webgl_util.getShapeAs3D(shape);\n\n      let program;\n      let width = texShape[1], height = texShape[0];\n      const isByteArray = values instanceof Uint8Array;\n\n      if (isPacked) {\n        [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(\n            texShape[0], texShape[1]);\n        program = new EncodeMatrixPackedProgram(\n            shapeAs3D, [height, width], isByteArray);\n      } else {\n        program =\n            new EncodeMatrixProgram(shapeAs3D, [height, width], isByteArray);\n      }\n\n      const tempDenseInputHandle = this.makeTensorInfo([height, width], dtype);\n      if (isByteArray) {\n        this.texData.get(tempDenseInputHandle.dataId).usage =\n            TextureUsage.PIXELS;\n      } else {\n        this.texData.get(tempDenseInputHandle.dataId).usage =\n            TextureUsage.UPLOAD;\n      }\n      this.gpgpu.uploadDenseMatrixToTexture(\n          this.getTexture(tempDenseInputHandle.dataId), width, height,\n          values as TypedArray);\n\n      // We want the output to remain packed regardless of the value of\n      // WEBGL_PACK.\n      const preventEagerUnpacking = true;\n      const encodedOutputTarget = this.runWebGLProgram(\n          program, [tempDenseInputHandle], dtype, null, preventEagerUnpacking);\n\n      // Have the original texture assume the identity of the encoded output.\n      const outputTexData = this.texData.get(encodedOutputTarget.dataId);\n      texData.texture = outputTexData.texture;\n      texData.texShape = outputTexData.texShape;\n      texData.isPacked = outputTexData.isPacked;\n      texData.usage = outputTexData.usage;\n\n      this.disposeIntermediateTensorInfo(tempDenseInputHandle);\n      this.texData.delete(encodedOutputTarget.dataId);\n\n      // Once uploaded, don't store the values on cpu.\n      texData.values = null;\n      if (shouldTimeProgram) {\n        this.uploadWaitMs += util.now() - start;\n      }\n    } else {\n      const newTexture = this.acquireTexture(texShape, usage, dtype, isPacked);\n      texData.texture = newTexture;\n    }\n  }\n\n  private convertAndCacheOnCPU(dataId: DataId, float32Values?: Float32Array):\n      TypedArray {\n    const texData = this.texData.get(dataId);\n    const {dtype} = texData;\n\n    this.releaseGPUData(dataId);\n\n    if (float32Values != null) {\n      texData.values = float32ToTypedArray(float32Values, dtype as 'float32');\n    }\n    return texData.values as TypedArray;\n  }\n\n  private acquireTexture(\n      texShape: [number, number], texType: TextureUsage, dtype: DataType,\n      isPacked: boolean): WebGLTexture {\n    this.numBytesInGPU += this.computeBytes(texShape, dtype);\n    if (!this.warnedAboutMemory &&\n        this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {\n      const mb = (this.numBytesInGPU / 1024 / 1024).toFixed(2);\n      this.warnedAboutMemory = true;\n      console.warn(\n          `High memory usage in GPU: ${mb} MB, ` +\n          `most likely due to a memory leak`);\n    }\n    return this.textureManager.acquireTexture(texShape, texType, isPacked);\n  }\n\n  private computeBytes(shape: [number, number], dtype: DataType) {\n    return shape[0] * shape[1] * util.bytesPerElement(dtype);\n  }\n}\n\nfunction float32ToTypedArray<D extends NumericDataType>(\n    a: Float32Array, dtype: D): tf.DataTypeMap[D] {\n  if (dtype === 'float32' || dtype === 'complex64') {\n    return a as tf.DataTypeMap[D];\n  } else if (dtype === 'int32' || dtype === 'bool') {\n    const result = (dtype === 'int32') ? new Int32Array(a.length) :\n                                         new Uint8Array(a.length);\n    for (let i = 0; i < result.length; ++i) {\n      result[i] = Math.round(a[i]);\n    }\n    return result as tf.DataTypeMap[D];\n  } else {\n    throw new Error(`Unknown dtype ${dtype}`);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '@tensorflow/tfjs-core';\n\nimport * as gpgpu_util from './gpgpu_util';\nimport * as webgl_util from './webgl_util';\n\nexport {MathBackendWebGL, WebGLMemoryInfo, WebGLTimingInfo} from './backend_webgl';\nexport {setWebGLContext} from './canvas_util';\nexport {GPGPUContext} from './gpgpu_context';\nexport {GPGPUProgram} from './gpgpu_math';\n// WebGL specific utils.\nexport {gpgpu_util, webgl_util};\n\n/**\n * Enforce use of half precision textures if available on the platform.\n *\n * @doc {heading: 'Environment', namespace: 'webgl'}\n */\nexport function forceHalfFloat(): void {\n  env().set('WEBGL_FORCE_F16_TEXTURES', true);\n}\n","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// base.ts is the webgl backend without auto kernel registration.\n\nimport {device_util, registerBackend} from '@tensorflow/tfjs-core';\nimport {MathBackendWebGL} from './backend_webgl';\nexport {version as version_webgl} from './version';\n\nif (device_util.isBrowser()) {\n  registerBackend('webgl', () => new MathBackendWebGL(), 2 /* priority */);\n}\n\n// Export webgl utilities\nexport * from './webgl';\n\n// Export forceHalfFlost under webgl namespace for the union bundle.\nimport {forceHalfFloat} from './webgl';\nexport const webgl = {forceHalfFloat};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport const CHECK_NAN_SNIPPET = `\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n`;\n\nexport const SQUARED_DIFFERENCE = 'return (a - b) * (a - b);';\nexport class BinaryOpProgram implements GPGPUProgram {\n  variableNames = ['A', 'B'];\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n\n  constructor(op: string, aShape: number[], bShape: number[]) {\n    this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    this.userCode = `\n      float binaryOperation(float a, float b) {\n        ${op}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport const CHECK_NAN_SNIPPET = `\n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n`;\n\nexport const ELU_DER = `\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n`;\n\nexport const NOT_EQUAL = `\n  return vec4(notEqual(a, b));\n`;\n\nexport class BinaryOpPackedProgram implements GPGPUProgram {\n  variableNames = ['A', 'B'];\n  outputShape: number[];\n  userCode: string;\n  supportsBroadcasting = true;\n  packedInputs = true;\n  packedOutput = true;\n  enableShapeUniforms: boolean;\n\n  constructor(\n      op: string, aShape: number[], bShape: number[],\n      checkOutOfBounds = false) {\n    this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    const rank = this.outputShape.length;\n    this.enableShapeUniforms = useShapeUniforms(rank);\n    let checkOutOfBoundsString = '';\n    if (checkOutOfBounds) {\n      if (rank === 0 || util.sizeFromShape(this.outputShape) === 1) {\n        checkOutOfBoundsString = `\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        `;\n      } else {\n        const dtype = getCoordsDataType(rank);\n        checkOutOfBoundsString = `\n          ${dtype} coords = getOutputCoords();\n        `;\n        if (rank === 1) {\n          if (this.enableShapeUniforms) {\n            checkOutOfBoundsString += `\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;\n          } else {\n            checkOutOfBoundsString += `\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;\n          }\n        } else {\n          const channels = getChannels('coords', rank);\n          if (this.enableShapeUniforms) {\n            checkOutOfBoundsString += `\n            bool nextRowOutOfBounds =\n              (${channels[rank - 2]} + 1) >= outShape[${rank} - 2];\n            bool nextColOutOfBounds =\n              (${channels[rank - 1]} + 1) >= outShape[${rank} - 1];\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `;\n          } else {\n            checkOutOfBoundsString += `\n            bool nextRowOutOfBounds =\n              (${channels[rank - 2]} + 1) >= ${this.outputShape[rank - 2]};\n            bool nextColOutOfBounds =\n              (${channels[rank - 1]} + 1) >= ${this.outputShape[rank - 1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `;\n          }\n        }\n      }\n    }\n\n    this.userCode = `\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${op}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${checkOutOfBoundsString}\n\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Identity, IdentityInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function identity(\n    args: {inputs: IdentityInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  backend.incRef(x.dataId);\n\n  return {dataId: x.dataId, shape: x.shape, dtype: x.dtype};\n}\n\nexport const identityConfig: KernelConfig = {\n  kernelName: Identity,\n  backendName: 'webgl',\n  kernelFunc: identity as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Complex, ComplexInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {identity} from './Identity';\n\n/**\n * In WebGL data is stored in GPU textures which can't be efficiently copied, so\n * complex tensors share data with their real and imaginary components. Complex\n * tensors' reference to the components is tracked by refCount on the individual\n * component. The refCounts are increased by the identity call.\n *\n * When a complex tensor is disposed, it will reduce the refCount on the\n * components by calling disposeData on each.\n */\nexport function complex(\n    args: {inputs: ComplexInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {real, imag} = inputs;\n\n  const complexInfo = backend.makeTensorInfo(real.shape, 'complex64');\n  const complex = backend.texData.get(complexInfo.dataId);\n\n  const realTensorInfo = identity({inputs: {x: real}, backend});\n\n  const imagTensorInfo = identity({inputs: {x: imag}, backend});\n\n  complex.complexTensorInfos = {real: realTensorInfo, imag: imagTensorInfo};\n\n  return complexInfo;\n}\n\nexport const complexConfig: KernelConfig = {\n  kernelName: Complex,\n  backendName: 'webgl',\n  kernelFunc: complex as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, LeakyRelu, LeakyReluAttrs, LeakyReluInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\n\nexport const LEAKYRELU = `return (a < 0.) ? b * a : a;`;\nexport const LEAKYRELU_PACKED = `\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n`;\n\nexport function leakyRelu(args: {\n  inputs: LeakyReluInputs,\n  backend: MathBackendWebGL,\n  attrs: LeakyReluAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {alpha} = attrs;\n\n  const $alpha = backend.makeTensorInfo(\n      [], 'float32',\n      util.createScalarValue(alpha as {} as 'float32', 'float32'));\n\n  const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n      new BinaryOpPackedProgram(LEAKYRELU_PACKED, x.shape, $alpha.shape) :\n      new BinaryOpProgram(LEAKYRELU, x.shape, $alpha.shape);\n  const result = backend.runWebGLProgram(program, [x, $alpha], x.dtype);\n\n  backend.disposeIntermediateTensorInfo($alpha);\n\n  return result;\n}\n\nexport const leakyReluConfig: KernelConfig = {\n  kernelName: LeakyRelu,\n  backendName: 'webgl',\n  kernelFunc: leakyRelu as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, Prelu, PreluInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\n\nexport const PRELU = `return (a < 0.) ? b * a : a;`;\nexport const PRELU_PACKED = `\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n`;\n\nexport function prelu(args: {inputs: PreluInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x, alpha} = inputs;\n\n  const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n      new BinaryOpPackedProgram(PRELU_PACKED, x.shape, alpha.shape) :\n      new BinaryOpProgram(PRELU, x.shape, alpha.shape);\n  return backend.runWebGLProgram(program, [x, alpha], x.dtype);\n}\n\nexport const preluConfig: KernelConfig = {\n  kernelName: Prelu,\n  backendName: 'webgl',\n  kernelFunc: prelu as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BinaryInputs, DataType, env, KernelFunc, TypedArray, UnaryInputs, upcastType} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\nimport {complex} from '../kernels/Complex';\nimport {LEAKYRELU, LEAKYRELU_PACKED} from '../kernels/LeakyRelu';\nimport {PRELU, PRELU_PACKED} from '../kernels/Prelu';\nimport * as unary_op from '../unaryop_gpu';\nimport {UnaryOpProgram} from '../unaryop_gpu';\nimport * as unary_packed_op from '../unaryop_packed_gpu';\nimport {UnaryOpPackedProgram} from '../unaryop_packed_gpu';\n\nimport {SimpleBinaryKernelImplCPU, SimpleUnaryKernelImplCPU} from './shared';\n\nexport const CHECK_NAN_SNIPPET_UNARY = `if (isnan(x)) return x;`;\n\nexport const CHECK_NAN_SNIPPET_BINARY = `\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n`;\n\nexport const CHECK_NAN_SNIPPET_BINARY_PACKED = `\n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n`;\n\ntype UnaryKernelFuncConfig = {\n  opSnippet: string,\n  packedOpSnippet?: string,\n  cpuKernelImpl?: SimpleUnaryKernelImplCPU,\n  dtype?: DataType\n};\n\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param opSnippet Op snippet to create `UnaryOpProgram`.\n * @param packedOpSnippet Op snippet to create `UnaryOpPackedProgram`.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function unaryKernelFunc(\n    {opSnippet, packedOpSnippet, cpuKernelImpl, dtype}: UnaryKernelFuncConfig):\n    KernelFunc {\n  return ({inputs, backend}) => {\n    const {x} = inputs as UnaryInputs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    const $dtype = dtype || x.dtype;\n    if (webglBackend.shouldExecuteOnCPU([x]) && cpuKernelImpl != null) {\n      const xData = webglBackend.texData.get(x.dataId);\n      const outValues = cpuKernelImpl(xData.values as TypedArray, $dtype);\n      return webglBackend.makeTensorInfo(x.shape, $dtype, outValues);\n    }\n\n    const shouldUsePackedProgram =\n        env().getBool('WEBGL_PACK_UNARY_OPERATIONS') && packedOpSnippet != null;\n    let program: UnaryOpProgram|UnaryOpPackedProgram;\n    if (shouldUsePackedProgram) {\n      program = new UnaryOpPackedProgram(x.shape, packedOpSnippet);\n    } else {\n      program = new UnaryOpProgram(x.shape, opSnippet);\n    }\n\n    return webglBackend.runWebGLProgram(program, [x], $dtype);\n  };\n}\n\ntype BinaryKernelFuncConfig = {\n  opSnippet: string,\n  packedOpSnippet?: string,\n  checkOutOfBounds?: boolean,\n  supportsComplex?: boolean,\n  cpuKernelImpl?: SimpleBinaryKernelImplCPU,\n  dtype?: DataType\n};\n\n/**\n * Template that creates a `KernelFunc` for binary ops.\n * @param opSnippet Op snippet to create `BinaryOpProgram`.\n * @param packedOpSnippet Op snippet to create `BinaryOpPackedProgram`.\n * @param checkOutOfBoundsForPackedProgram Whether to set checkOutOfBounds=true\n *     when creating BinaryOpPackedProgram.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function binaryKernelFunc({\n  opSnippet,\n  packedOpSnippet,\n  checkOutOfBounds = false,\n  supportsComplex = false,\n  cpuKernelImpl,\n  dtype\n}: BinaryKernelFuncConfig): KernelFunc {\n  return ({inputs, backend}) => {\n    const {a, b} = inputs as BinaryInputs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    if (supportsComplex && a.dtype === 'complex64') {\n      const aData = webglBackend.texData.get(a.dataId);\n      const bData = webglBackend.texData.get(b.dataId);\n\n      const [real, imag] = [\n        [aData.complexTensorInfos.real, bData.complexTensorInfos.real],\n        [aData.complexTensorInfos.imag, bData.complexTensorInfos.imag]\n      ].map(complexParts => {\n        const [aPart, bPart] = complexParts;\n\n        const aHandle = {\n          dataId: aPart.dataId,\n          dtype: aPart.dtype,\n          shape: a.shape\n        };\n        const bHandle = {\n          dataId: bPart.dataId,\n          dtype: bPart.dtype,\n          shape: b.shape\n        };\n\n        const program = new BinaryOpProgram(opSnippet, a.shape, b.shape);\n        return webglBackend.runWebGLProgram(\n            program, [aHandle, bHandle], upcastType(aPart.dtype, bPart.dtype));\n      });\n\n      const complexOutput =\n          complex({inputs: {real, imag}, backend: webglBackend});\n\n      webglBackend.disposeIntermediateTensorInfo(real);\n      webglBackend.disposeIntermediateTensorInfo(imag);\n\n      // TODO(annxingyuan): Implement CPU forwarding for complex inputs.\n\n      return complexOutput;\n    }\n\n    const $dtype = dtype || upcastType(a.dtype, b.dtype);\n    if ((a.dtype === 'string' || b.dtype === 'string' ||\n         webglBackend.shouldExecuteOnCPU([a, b])) &&\n        cpuKernelImpl != null) {\n      const aVals = webglBackend.texData.get(a.dataId).values as TypedArray;\n      const bVals = webglBackend.texData.get(b.dataId).values as TypedArray;\n\n      const decodedAVals = a.dtype === 'string' ?\n          // tslint:disable-next-line: no-any\n          backend_util.fromUint8ToStringArray(aVals as any as Uint8Array[]) :\n          aVals;\n      const decodedBVals = a.dtype === 'string' ?\n          // tslint:disable-next-line: no-any\n          backend_util.fromUint8ToStringArray(bVals as any as Uint8Array[]) :\n          bVals;\n      const [outValues, outShape] =\n          cpuKernelImpl(a.shape, b.shape, decodedAVals, decodedBVals, $dtype);\n\n      const out = webglBackend.makeTensorInfo(outShape, $dtype);\n      const outData = webglBackend.texData.get(out.dataId);\n      outData.values = outValues;\n      return out;\n    }\n\n    const shouldUsePackedProgram =\n        env().getBool('WEBGL_PACK_BINARY_OPERATIONS') &&\n        packedOpSnippet != null;\n    let program: BinaryOpProgram|BinaryOpPackedProgram;\n    if (shouldUsePackedProgram) {\n      program = new BinaryOpPackedProgram(\n          packedOpSnippet, a.shape, b.shape, checkOutOfBounds);\n    } else {\n      program = new BinaryOpProgram(opSnippet, a.shape, b.shape);\n    }\n\n    return webglBackend.runWebGLProgram(program, [a, b], $dtype);\n  };\n}\n\nexport function mapActivationToShaderProgram(\n    activation: backend_util.Activation, packed = false): string {\n  if (activation === 'linear') {\n    if (packed) {\n      return unary_packed_op.LINEAR;\n    }\n    return unary_op.LINEAR;\n  } else if (activation === 'relu') {\n    if (packed) {\n      return unary_packed_op.RELU;\n    }\n    return unary_op.RELU;\n  } else if (activation === 'elu') {\n    if (packed) {\n      return unary_packed_op.ELU;\n    }\n    return unary_op.ELU;\n  } else if (activation === 'relu6') {\n    if (packed) {\n      return unary_packed_op.RELU6;\n    }\n    return unary_op.RELU6;\n  } else if (activation === 'prelu') {\n    if (packed) {\n      return PRELU_PACKED;\n    }\n    return PRELU;\n  } else if (activation === 'leakyrelu') {\n    if (packed) {\n      return LEAKYRELU_PACKED;\n    }\n    return LEAKYRELU;\n  } else if (activation === 'sigmoid') {\n    if (packed) {\n      return unary_packed_op.SIGMOID;\n    }\n    return unary_op.SIGMOID;\n  }\n  throw new Error(`Activation ${\n      activation} has not been implemented for the WebGL backend.`);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class MatMulPackedProgram implements GPGPUProgram {\n  variableNames = ['matrixA', 'matrixB'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      aShape: [number, number, number], bShape: [number, number, number],\n      outputShape: [number, number, number], transposeA = false,\n      transposeB = false, addBias = false, activation: string = null,\n      hasPreluActivation = false, hasLeakyreluActivation = false) {\n    this.outputShape = outputShape;\n\n    const sharedDim = transposeA ? aShape[1] : aShape[2];\n    const sharedDimensionPacked = Math.ceil(sharedDim / 2);\n\n    const aSample = transposeA ? 'i * 2, rc.y' : 'rc.y, i * 2';\n    const bSample = transposeB ? 'rc.z, i * 2' : 'i * 2, rc.z';\n    const aSwizzle = transposeA ? ['a.xxyy', 'a.zzww'] : ['a.xxzz', 'a.yyww'];\n    const bSwizzle = transposeB ? ['b.xzxz', 'b.ywyw'] : ['b.xyxy', 'b.zwzw'];\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivation) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else if (hasLeakyreluActivation) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `vec4 activation(vec4 x) {\n          ${activation}\n        }`;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    if (hasLeakyreluActivation) {\n      this.variableNames.push('leakyreluAlpha');\n    }\n\n    let batchASnippet = 'rc.x';\n    let batchBSnippet = 'rc.x';\n    if (aShape[0] < bShape[0]) {\n      batchASnippet = `int(min(float(rc.x), ${aShape[0] - 1}.))`;\n    } else if (bShape[0] < aShape[0]) {\n      batchBSnippet = `int(min(float(rc.x), ${bShape[0] - 1}.))`;\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      const float sharedDimension = ${sharedDimensionPacked}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${sharedDimensionPacked}; i++) {\n          int batchA = ${batchASnippet};\n          int batchB = ${batchBSnippet};\n          vec4 a = getMatrixA(batchA, ${aSample});\n          vec4 b = getMatrixB(batchB, ${bSample});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${aSwizzle[0]} * ${bSwizzle[0]});\n          result += (${aSwizzle[1]} * ${bSwizzle[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${addBiasSnippet}\n\n        ${applyActivationSnippet}\n\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\n// (Ar + Ai)(Br + Bi) =\n// ArBr + ArBi + AiBr + AiBi = ArBr - AB + ArBi + AiBr\n// Yr = ArBr - AB\n// Yi = ArBi + AiBr\nexport const COMPLEX_MULTIPLY = {\n  REAL: 'return areal * breal - aimag * bimag;',\n  IMAG: 'return areal * bimag + aimag * breal;'\n};\n\nexport class BinaryOpComplexProgram implements GPGPUProgram {\n  variableNames = ['AReal', 'AImag', 'BReal', 'BImag'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(op: string, aShape: number[], bShape: number[]) {\n    this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n\n    this.userCode = `\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${op}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BinaryInputs, env, KernelConfig, Multiply, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport * as binaryop_complex_gpu from '../binaryop_complex_gpu';\nimport {BinaryOpComplexProgram} from '../binaryop_complex_gpu';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\nimport {multiplyImplCPU as cpuMultiply} from '../kernel_utils/shared';\n\nimport {complex} from './Complex';\n\nconst MUL = 'return a * b;';\n\nexport function multiply(\n    args: {inputs: BinaryInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {a, b} = inputs;\n  const dtype = backend_util.upcastType(a.dtype, b.dtype);\n\n  if (a.dtype === 'complex64') {\n    const aData = backend.texData.get(a.dataId);\n    const bData = backend.texData.get(b.dataId);\n\n    const realProgram = new BinaryOpComplexProgram(\n        binaryop_complex_gpu.COMPLEX_MULTIPLY.REAL, a.shape, b.shape);\n    const imagProgram = new BinaryOpComplexProgram(\n        binaryop_complex_gpu.COMPLEX_MULTIPLY.IMAG, a.shape, b.shape);\n\n    const inputs = [\n      {\n        dataId: aData.complexTensorInfos.real.dataId,\n        dtype: aData.complexTensorInfos.real.dtype,\n        shape: a.shape\n      },\n      {\n        dataId: aData.complexTensorInfos.imag.dataId,\n        dtype: aData.complexTensorInfos.imag.dtype,\n        shape: a.shape\n      },\n      {\n        dataId: bData.complexTensorInfos.real.dataId,\n        dtype: bData.complexTensorInfos.real.dtype,\n        shape: b.shape\n      },\n      {\n        dataId: bData.complexTensorInfos.imag.dataId,\n        dtype: bData.complexTensorInfos.imag.dtype,\n        shape: b.shape\n      }\n    ];\n\n    const realPart = backend.runWebGLProgram(realProgram, inputs, 'float32');\n    const imagPart = backend.runWebGLProgram(imagProgram, inputs, 'float32');\n\n    const complexOutput =\n        complex({inputs: {real: realPart, imag: imagPart}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(imagPart);\n\n    // TODO(annxingyuan): CPU forwarding for complex inputs.\n    return complexOutput;\n  }\n\n  if (backend.shouldExecuteOnCPU([a, b])) {\n    const aData = backend.texData.get(a.dataId);\n    const bData = backend.texData.get(b.dataId);\n    const [outValues, outShape] = cpuMultiply(\n        a.shape, b.shape, aData.values as TypedArray,\n        bData.values as TypedArray, dtype);\n\n    const out = backend.makeTensorInfo(outShape, dtype);\n    const outData = backend.texData.get(out.dataId);\n    outData.values = outValues;\n    return out;\n  }\n\n  let program: BinaryOpProgram|BinaryOpPackedProgram;\n  if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n    program = new BinaryOpPackedProgram(MUL, a.shape, b.shape);\n  } else {\n    program = new BinaryOpProgram(MUL, a.shape, b.shape);\n  }\n\n  return backend.runWebGLProgram(program, [a, b], dtype);\n}\n\nexport const multiplyConfig: KernelConfig = {\n  kernelName: Multiply,\n  backendName: 'webgl',\n  kernelFunc: multiply\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Reshape, ReshapeAttrs, ReshapeInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {packedReshape} from '../kernel_utils/reshape';\nimport {isReshapeFree} from '../webgl_util';\n\nexport function reshape(args: {\n  inputs: ReshapeInputs,\n  backend: MathBackendWebGL,\n  attrs: ReshapeAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {shape} = attrs;\n  const webglBackend = backend;\n\n  const xSize = util.sizeFromShape(x.shape);\n  const $shape = util.inferFromImplicitShape(shape, xSize);\n  const $xSize = util.sizeFromShape($shape);\n\n  util.assert(\n      xSize === $xSize,\n      () => `The new shape (${$shape}) has ${$xSize} elements and the old ` +\n          `shape (${x.shape}) has ${xSize} elements. The new shape and old ` +\n          `shape must have the same number of elements.`);\n\n  const xTexData = webglBackend.texData.get(x.dataId);\n  if (xTexData.isPacked && !isReshapeFree(x.shape, $shape) &&\n      !(xTexData.texture !== null && isReshapeFree(xTexData.shape, $shape))) {\n    return packedReshape(x, $shape, webglBackend);\n  }\n\n  webglBackend.incRef(x.dataId);\n\n  return {dataId: x.dataId, shape: $shape, dtype: x.dtype};\n}\n\nexport const reshapeConfig: KernelConfig = {\n  kernelName: Reshape,\n  backendName: 'webgl',\n  kernelFunc: reshape as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ReshapePackedProgram} from '../reshape_packed_gpu';\nimport {getBatchDim, getRowsCols} from '../webgl_util';\n\nexport function packedReshape(\n    input: TensorInfo, afterShape: number[],\n    backend: MathBackendWebGL): TensorInfo {\n  const input3DShape =\n      [getBatchDim(input.shape),\n       ...getRowsCols(input.shape)] as [number, number, number];\n  const input3D: TensorInfo = {\n    dtype: input.dtype,\n    shape: input3DShape,\n    dataId: input.dataId\n  };\n  const afterShapeAs3D =\n      [getBatchDim(afterShape),\n       ...getRowsCols(afterShape)] as [number, number, number];\n\n  const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n  const preventEagerUnpackingOfOutput = true;\n  const output = backend.runWebGLProgram(\n      program, [input3D], input.dtype, null /* customSetup */,\n      preventEagerUnpackingOfOutput);\n  return {dataId: output.dataId, shape: afterShape, dtype: output.dtype};\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class MeanProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(reduceInfo: backend_util.ReduceInfo, divisor?: number) {\n    const {windowSize, batchSize, inSize, outSize} = reduceInfo;\n    this.outputShape = [batchSize, outSize];\n\n    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n    const windowSizeVec4Remainder = windowSize % 4;\n\n    let updateSnippet = `sumValue += dot(values, ones);`;\n    if (divisor != null) {\n      const denominator = 1 / divisor;\n      updateSnippet = `sumValue += dot(values * ${\n          util.isInt(denominator) ? denominator.toPrecision(2) :\n                                    denominator}, ones);`;\n    }\n\n    let checkOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return 0.0;\n        }\n      `;\n    }\n\n    this.userCode = `\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${checkOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${updateSnippet}\n        }\n        setOutput(sumValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ReduceProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      reduceInfo: backend_util.ReduceInfo,\n      reduceType: 'all'|'any'|'max'|'min'|'sum'|'prod') {\n    const {windowSize, batchSize, inSize, outSize} = reduceInfo;\n    this.outputShape = [batchSize, outSize];\n\n    let initializationValue = '0.0';\n    let compareOp = ``;\n\n    if (reduceType === 'prod') {\n      initializationValue = '1.0';\n    } else if (reduceType === 'min') {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '1.0 / 1e-20';\n      compareOp = `min`;\n    } else if (reduceType === 'max') {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '-1.0 / 1e-20';\n      compareOp = `max`;\n    }\n\n    let returnValue = `${reduceType}(${reduceType}(${reduceType}(` +\n        'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n\n    if (reduceType === 'sum') {\n      returnValue = `sumValue`;\n    } else if (reduceType === 'prod') {\n      returnValue = `prodValue`;\n    } else if (reduceType === 'all') {\n      returnValue = `allValue`;\n    } else if (reduceType === 'any') {\n      returnValue = `anyValue`;\n    }\n\n    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n    const windowSizeVec4Remainder = windowSize % 4;\n\n    let updateSnippet = `\n      if (${reduceType === 'sum'}) {\n        sumValue += dot(values, ones);\n      } else if (${reduceType === 'prod'}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n        if (${reduceType === 'min'} || ${reduceType === 'max'}) {\n          minMaxValue = ${compareOp}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `;\n\n    let vecType = `vec4`;\n\n    if (reduceType === 'all') {\n      initializationValue = '1.0';\n      updateSnippet = `\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      `;\n      vecType = `bvec4`;\n    } else if (reduceType === 'any') {\n      initializationValue = '0.0';\n      updateSnippet = `\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      `;\n      vecType = `bvec4`;\n    }\n\n    let checkOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return initializationValue;\n        }\n      `;\n    }\n    this.userCode = `\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${checkOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        vec4 minMaxValue = vec4(${initializationValue});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${updateSnippet}\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MeanProgram} from '../mean_gpu';\nimport {ReduceProgram} from '../reduce_gpu';\n\ntype ReduceTypes = 'all'|'any'|'max'|'min'|'sum'|'prod'|'mean';\n\n// Returns an array of configuration objects that describe each stage of the\n// reduction.\nfunction getReductionStages(inShape: number[]):\n    Array<{inSize: number, windowSize: number, outSize: number}> {\n  const stages = [];\n\n  while (stages.length === 0 || stages[stages.length - 1].outSize !== 1) {\n    const outSize: number =\n        stages.length ? stages[stages.length - 1].outSize : inShape[1];\n    const windowSize = backend_util.computeOptimalWindowSize(outSize);\n    stages.push({\n      inSize: outSize,\n      windowSize,\n      outSize: Math.ceil(outSize / windowSize)\n    });\n  }\n\n  return stages;\n}\n\nexport function reduce(\n    x: TensorInfo, dtype: DataType, reductionType: ReduceTypes,\n    backend: MathBackendWebGL): TensorInfo {\n  const reductionStages = getReductionStages(x.shape);\n\n  let result = x;\n  for (let i = 0; i < reductionStages.length; i++) {\n    const {inSize, windowSize, outSize} = reductionStages[i];\n\n    let program: ReduceProgram|MeanProgram;\n    let previousResult: TensorInfo;\n    if (reductionType === 'mean') {\n      program = i === 0 ?\n          new MeanProgram(\n              {windowSize, inSize, batchSize: x.shape[0], outSize}, inSize) :\n          new MeanProgram({windowSize, inSize, batchSize: x.shape[0], outSize});\n    } else {\n      program = new ReduceProgram(\n          {windowSize, inSize, batchSize: x.shape[0], outSize}, reductionType);\n    }\n\n    previousResult = result;\n    result = backend.runWebGLProgram(program, [result], dtype);\n\n    if (previousResult.dataId !== x.dataId) {\n      backend.disposeIntermediateTensorInfo(previousResult);\n    }\n  }\n\n  return result;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class TransposeProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  constructor(aShape: number[], newDim: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[newDim[i]];\n    }\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const switched = getSwitchedCoords(newDim);\n\n    this.userCode = `\n    void main() {\n      ${dtype} resRC = getOutputCoords();\n      setOutput(getA(${switched}));\n    }\n    `;\n  }\n}\n\nfunction getSwitchedCoords(newDim: number[]): string {\n  const rank = newDim.length;\n  if (rank > 6) {\n    throw Error(`Transpose for rank ${rank} is not yet supported`);\n  }\n  const originalOrder =\n      ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u', 'resRC.v'];\n  const switchedCoords = new Array(rank);\n  for (let i = 0; i < newDim.length; i++) {\n    switchedCoords[newDim[i]] = originalOrder[i];\n  }\n  return switchedCoords.join();\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getVecChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class TransposePackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(aShape: number[], newDim: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[newDim[i]];\n    }\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    if (this.rank > 6) {\n      throw Error(\n          `Packed transpose for rank ${this.rank} is not yet supported.`);\n    }\n    const dtype = getCoordsDataType(this.rank);\n\n    const outputOrder = getVecChannels('rc', this.rank);\n    const switchedOrder = new Array(this.rank);\n    for (let i = 0; i < newDim.length; i++) {\n      switchedOrder[newDim[i]] = outputOrder[i];\n    }\n    const innerDims = `vec2(${switchedOrder.slice(-2).join()})`;\n    const nextColumn =\n        `++${outputOrder[this.rank - 1]} < ${outputShape[this.rank - 1]}`;\n    const getc = `getChannel(getA(${switchedOrder.join()}), ${innerDims})`;\n\n    this.userCode = `\n    void main() {\n      ${dtype} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${getc};\n      if(${nextColumn}) {\n        result[1] = ${getc};\n      }\n      --${outputOrder[this.rank - 1]};\n      if(++${outputOrder[this.rank - 2]} < ${outputShape[this.rank - 2]}) {\n        result[2] = ${getc};\n        if(${nextColumn}) {\n          result[3] = ${getc};\n        }\n      }\n      setOutput(result);\n    }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {transposeImplCPU} from '../kernel_utils/shared';\nimport {TransposeProgram} from '../transpose_gpu';\nimport {TransposePackedProgram} from '../transpose_packed_gpu';\n\nexport function transposeImpl(\n    x: TensorInfo, perm: number[], backend: MathBackendWebGL): TensorInfo {\n  const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n      new TransposePackedProgram(x.shape, perm) :\n      new TransposeProgram(x.shape, perm);\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport {transposeImplCPU};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Sum, SumAttrs, SumInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {sumImpl} from './Sum_impl';\n\nexport function sum(\n    args: {inputs: SumInputs, attrs: SumAttrs, backend: MathBackendWebGL}) {\n  const {inputs, backend, attrs} = args;\n\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  return sumImpl(x, axis, keepDims, backend);\n}\n\nexport const sumConfig: KernelConfig = {\n  kernelName: Sum,\n  backendName: 'webgl',\n  kernelFunc: sum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, sumOutType, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {reshape} from './Reshape';\n\nimport {transposeImpl} from './Transpose_impl';\n\nexport function sumImpl(\n    x: TensorInfo, axis: number|number[], keepDims: boolean,\n    backend: MathBackendWebGL): TensorInfo {\n  const reductionIndices = axis;\n\n  const xRank = x.shape.length;\n\n  const origAxes = util.parseAxisParam(reductionIndices, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  const sumInputIsTransposed = permutedAxes != null;\n\n  let sumInput = x;\n  if (sumInputIsTransposed) {\n    sumInput = transposeImpl(x, permutedAxes, backend);\n\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('sum', axes, xRank);\n  const [sumOutShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(sumInput.shape, axes);\n\n  let outShape = sumOutShape;\n  if (keepDims) {\n    // rather than reshape at the end, set the target shape here.\n    outShape = backend_util.expandShapeToKeepDim(sumOutShape, origAxes);\n  }\n\n  const inSize = util.sizeFromShape(reduceShape);\n  const xSize = util.sizeFromShape(x.shape);\n  const batchSize = xSize / inSize;\n  const reshapedInput = reshape(\n      {inputs: {x: sumInput}, attrs: {shape: [batchSize, inSize]}, backend});\n\n  const outType = sumOutType(x.dtype);\n\n  const reduced = reduce(reshapedInput, outType, 'sum', backend);\n  const out =\n      reshape({inputs: {x: reduced}, attrs: {shape: outShape}, backend});\n\n  backend.disposeIntermediateTensorInfo(reshapedInput);\n  backend.disposeIntermediateTensorInfo(reduced);\n  if (sumInputIsTransposed) {\n    backend.disposeIntermediateTensorInfo(sumInput);\n  }\n\n  return out;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Transpose, TransposeAttrs, TransposeInputs, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {transposeImpl} from './Transpose_impl';\nimport {transposeImplCPU as cpuTranspose} from './Transpose_impl';\n\nexport function transpose(args: {\n  inputs: TransposeInputs,\n  attrs: TransposeAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {perm} = attrs;\n  const webglBackend = backend;\n\n  const xRank = x.shape.length;\n\n  const newShape: number[] = new Array(xRank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = x.shape[perm[i]];\n  }\n\n  let out: TensorInfo;\n  if (webglBackend.shouldExecuteOnCPU([x])) {\n    const xTexData = webglBackend.texData.get(x.dataId);\n    const values = xTexData.values as TypedArray;\n    const outValues = cpuTranspose(values, x.shape, x.dtype, perm, newShape);\n\n    out = webglBackend.makeTensorInfo(newShape, x.dtype);\n    const outData = webglBackend.texData.get(out.dataId);\n    outData.values = outValues;\n  } else {\n    out = transposeImpl(x, perm, webglBackend);\n  }\n  return out;\n}\n\nexport const transposeConfig: KernelConfig = {\n  kernelName: Transpose,\n  backendName: 'webgl',\n  kernelFunc: transpose as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, TensorInfo, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {mapActivationToShaderProgram} from '../kernel_utils/kernel_funcs_utils';\nimport {MatMulPackedProgram} from '../mulmat_packed_gpu';\n\nimport {multiply} from './Multiply';\nimport {reshape} from './Reshape';\nimport {sum} from './Sum';\nimport {transpose} from './Transpose';\n\n// Empirically determined minimal shared dimension in matmul before we forward\n// to a.mul(b).sum() in order to take advantage of GPU parallelism. See\n// https://github.com/tensorflow/tfjs-core/pull/1379 for benchmarks.\nexport const MATMUL_SHARED_DIM_THRESHOLD = 1000;\n\ntype BatchMatMulConfig = {\n  a: TensorInfo,\n  b: TensorInfo,\n  transposeA: boolean,\n  transposeB: boolean,\n  backend: MathBackendWebGL,\n  bias?: TensorInfo,\n  preluActivationWeights?: TensorInfo,\n  leakyreluAlpha?: number,\n  activation?: backend_util.Activation\n};\n\nexport function batchMatMulImpl({\n  a,\n  b,\n  transposeA,\n  transposeB,\n  backend,\n  bias = null,\n  preluActivationWeights = null,\n  leakyreluAlpha = 0,\n  activation = null\n}: BatchMatMulConfig): TensorInfo {\n  const aRank = a.shape.length;\n  const bRank = b.shape.length;\n\n  const innerShapeA = transposeA ? a.shape[aRank - 2] : a.shape[aRank - 1];\n  const innerShapeB = transposeB ? b.shape[bRank - 1] : b.shape[bRank - 2];\n\n  const outerShapeA = transposeA ? a.shape[aRank - 1] : a.shape[aRank - 2];\n  const outerShapeB = transposeB ? b.shape[bRank - 2] : b.shape[bRank - 1];\n\n  const outerDimsA = a.shape.slice(0, -2);\n  const outerDimsB = b.shape.slice(0, -2);\n\n  const batchDimA = util.sizeFromShape(outerDimsA);\n  const batchDimB = util.sizeFromShape(outerDimsB);\n\n  const batchDimsCompatible =\n      batchDimA === batchDimB || batchDimA === 1 || batchDimB === 1;\n\n  util.assert(\n      aRank >= 2 && bRank >= 2 && batchDimsCompatible,\n      () => `Error in matMul: the input batch dimensions must either be the ` +\n          `same or at least one input batch dimension must be 1. Got input ` +\n          `batch dimensions of (${outerDimsA}) and (${outerDimsB}).`);\n\n  const outShapeOuterDims =\n      batchDimA > batchDimB ? a.shape.slice(0, -2) : b.shape.slice(0, -2);\n  const outShape = outShapeOuterDims.concat([outerShapeA, outerShapeB]);\n\n  util.assert(\n      innerShapeA === innerShapeB,\n      () => `Error in matMul: inner shapes (${innerShapeA}) and (` +\n          `${innerShapeB}) of Tensors with shapes ${a.shape} and ` +\n          `${b.shape} and transposeA=${transposeA}` +\n          ` and transposeB=${transposeB} must match.`);\n\n  const a3dShape: [number, number, number] = transposeA ?\n      [batchDimA, innerShapeA, outerShapeA] :\n      [batchDimA, outerShapeA, innerShapeA];\n  const b3dShape: [number, number, number] = transposeB ?\n      [batchDimB, outerShapeB, innerShapeB] :\n      [batchDimB, innerShapeB, outerShapeB];\n\n  // The rest of the implementation is designed to operate on rank-3 tensors\n  const a3d = reshape({inputs: {x: a}, backend, attrs: {shape: a3dShape}});\n  const b3d = reshape({inputs: {x: b}, backend, attrs: {shape: b3dShape}});\n\n  const intermediates: TensorInfo[] = [a3d, b3d];\n\n  const batchDim = Math.max(batchDimA, batchDimB);\n  const sharedDim = transposeA ? a3d.shape[1] : a3d.shape[2];\n\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const hasLeakyreluAlpha = activation === 'leakyrelu';\n  const fusedActivation = activation != null ?\n      mapActivationToShaderProgram(activation, true) :\n      null;\n  const containsFusedOps = hasBias || hasPreluActivationWeights ||\n      hasLeakyreluAlpha || fusedActivation != null;\n  let out: TensorInfo;\n\n  // Since the matrices are vectors, it is faster to call mul().sum()\n  // because sum() is O(sqrt(N)) due to divide-and-conquer.\n  if ((outerShapeA === 1 || outerShapeB === 1) &&\n      sharedDim > MATMUL_SHARED_DIM_THRESHOLD && containsFusedOps === false) {\n    let aVec = a3d;\n    let bVec = b3d;\n    if (transposeA) {\n      aVec = transpose({inputs: {x: a3d}, backend, attrs: {perm: [0, 2, 1]}});\n      intermediates.push(aVec);\n    }\n    if (transposeB) {\n      bVec = transpose({inputs: {x: b3d}, backend, attrs: {perm: [0, 2, 1]}});\n      intermediates.push(bVec);\n    }\n\n    const shouldReshapeA = outerShapeB !== 1;\n    const shouldReshapeB = outerShapeB === 1;\n\n    let aVec3d = aVec;\n    if (shouldReshapeA) {\n      aVec3d = reshape({\n        inputs: {x: aVec},\n        backend,\n        attrs: {shape: [batchDim, sharedDim, 1]}\n      });\n\n      intermediates.push(aVec3d);\n    }\n\n    const axis = outerShapeB === 1 ? 2 : 1;\n\n    let bVec3d = bVec;\n    if (shouldReshapeB) {\n      bVec3d = reshape({\n        inputs: {x: bVec},\n        backend,\n        attrs: {shape: [batchDim, 1, sharedDim]}\n      });\n\n      intermediates.push(bVec3d);\n    }\n\n    const product = multiply({inputs: {a: aVec3d, b: bVec3d}, backend});\n    out = sum({inputs: {x: product}, backend, attrs: {axis, keepDims: true}});\n    intermediates.push(product);\n  } else {\n    const dtype = upcastType(a.dtype, b.dtype);\n\n    const program = new MatMulPackedProgram(\n        a3dShape, b3dShape, [batchDim, outerShapeA, outerShapeB], transposeA,\n        transposeB, hasBias, fusedActivation, hasPreluActivationWeights,\n        hasLeakyreluAlpha);\n\n    const inputs: TensorInfo[] = [a3d, b3d];\n    if (bias != null) {\n      inputs.push(bias);\n    }\n    if (hasPreluActivationWeights) {\n      inputs.push(preluActivationWeights);\n    }\n    if (hasLeakyreluAlpha) {\n      const $leakyreluAlpha = backend.makeTensorInfo(\n          [], 'float32',\n          util.createScalarValue(leakyreluAlpha as {} as 'float32', 'float32'));\n      inputs.push($leakyreluAlpha);\n      intermediates.push($leakyreluAlpha);\n    }\n\n    out = backend.runWebGLProgram(program, inputs, dtype);\n  }\n\n  const outReshaped =\n      reshape({inputs: {x: out}, backend, attrs: {shape: outShape}});\n  intermediates.push(out);\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n  return outReshaped;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {_FusedMatMul, _FusedMatMulAttrs, _FusedMatMulInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {batchMatMulImpl} from './BatchMatMul_impl';\n\nexport function _fusedMatMul(args: {\n  inputs: _FusedMatMulInputs,\n  attrs: _FusedMatMulAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b, bias, preluActivationWeights} = inputs;\n  const {transposeA, transposeB, activation, leakyreluAlpha} = attrs;\n\n  return batchMatMulImpl({\n    a,\n    b,\n    transposeA,\n    transposeB,\n    backend,\n    bias,\n    preluActivationWeights,\n    leakyreluAlpha,\n    activation\n  });\n}\n\nexport const _fusedMatMulConfig: KernelConfig = {\n  kernelName: _FusedMatMul,\n  backendName: 'webgl',\n  kernelFunc: _fusedMatMul as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Abs, AbsInputs, env, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {simpleAbsImplCPU} from '../kernel_utils/shared';\nimport {UnaryOpProgram} from '../unaryop_gpu';\nimport {UnaryOpPackedProgram} from '../unaryop_packed_gpu';\n\nconst ABS = `return abs(x);`;\n\nexport function abs(args: {inputs: AbsInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  // TODO: handle cases when x is complex. Once the cpu implementation\n  // can handle complex values, refactor to use unaryKernelFunc.\n  if (backend.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {\n    const xData = backend.texData.get(x.dataId);\n    const outValues = simpleAbsImplCPU(xData.values as TypedArray);\n    return backend.makeTensorInfo(x.shape, x.dtype, outValues);\n  }\n\n  let program: UnaryOpProgram|UnaryOpPackedProgram;\n  if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n    program = new UnaryOpPackedProgram(x.shape, ABS);\n  } else {\n    program = new UnaryOpProgram(x.shape, ABS);\n  }\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const absConfig: KernelConfig = {\n  kernelName: Abs,\n  backendName: 'webgl',\n  kernelFunc: abs as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Acos, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ACOS = CHECK_NAN_SNIPPET + `\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n`;\n\nexport const acos = unaryKernelFunc({opSnippet: ACOS});\n\nexport const acosConfig: KernelConfig = {\n  kernelName: Acos,\n  backendName: 'webgl',\n  kernelFunc: acos,\n};\n","\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Acosh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ACOSH = CHECK_NAN_SNIPPET + `\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));`;\n\nexport const acosh = unaryKernelFunc({opSnippet: ACOSH});\n\nexport const acoshConfig: KernelConfig = {\n  kernelName: Acosh,\n  backendName: 'webgl',\n  kernelFunc: acosh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Add, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {addImplCPU as cpuAdd} from '../kernel_utils/shared';\n\nconst ADD = 'return a + b;';\n\nexport const addKernelFunc = binaryKernelFunc({\n  opSnippet: ADD,\n  packedOpSnippet: ADD,\n  supportsComplex: true,\n  cpuKernelImpl: cpuAdd\n});\n\nexport const addConfig: KernelConfig = {\n  kernelName: Add,\n  backendName: 'webgl',\n  kernelFunc: addKernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class AddNProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(outputShape: number[], shapes: number[][]) {\n    this.outputShape = outputShape;\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const snippets: string[] = [];\n    // Get target elements from every input tensor.\n    this.variableNames.forEach(variable => {\n      snippets.push(`float v${variable} = get${variable}AtOutCoords();`);\n    });\n\n    // Calculate the sum of all elements.\n    const operation = this.variableNames\n                          .map(variable => {\n                            return `v${variable}`;\n                          })\n                          .join(' + ');\n\n    this.userCode = `\n      void main() {\n        ${snippets.join('\\n        ')}\n\n        float result = ${operation};\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class AddNPackedProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(outputShape: number[], shapes: number[][]) {\n    this.outputShape = outputShape;\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const snippets: string[] = [];\n    // Get target elements from every input tensor.\n    this.variableNames.forEach(variable => {\n      snippets.push(`vec4 v${variable} = get${variable}AtOutCoords();`);\n    });\n\n    // Calculate the sum of all elements.\n    const operation = this.variableNames\n                          .map(variable => {\n                            return `v${variable}`;\n                          })\n                          .join(' + ');\n\n    this.userCode = `\n      void main() {\n        ${snippets.join('\\n        ')}\n\n        vec4 result = ${operation};\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AddN, AddNInputs, env, KernelConfig, KernelFunc, TensorInfo, upcastType} from '@tensorflow/tfjs-core';\n\nimport {AddNProgram} from '../addn_gpu';\nimport {AddNPackedProgram} from '../addn_packed_gpu';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {identity} from './Identity';\n\nexport function addN(args: {inputs: AddNInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n\n  const tensors = inputs;\n  if (tensors.length === 1) {\n    return identity({inputs: {x: tensors[0]}, backend});\n  }\n\n  // Limit the number of uploaded textures for optimization.\n  if (tensors.length > env().get('WEBGL_MAX_TEXTURES_IN_SHADER')) {\n    const midIndex = Math.floor(tensors.length / 2);\n    const leftSide = addN({inputs: tensors.slice(0, midIndex), backend});\n    const rightSide = addN({inputs: tensors.slice(midIndex), backend});\n    return addN({inputs: [leftSide, rightSide], backend});\n  }\n\n  const dtype =\n      tensors.map(t => t.dtype).reduce((d1, d2) => upcastType(d1, d2));\n  const shapes = tensors.map(t => t.shape);\n  // We can make sure shapes are identical in op level.\n  const usePackedOp = env().getBool('WEBGL_PACK');\n  const program = usePackedOp ?\n      new AddNPackedProgram(tensors[0].shape, shapes) :\n      new AddNProgram(tensors[0].shape, shapes);\n  return backend.runWebGLProgram(program, tensors, dtype);\n}\n\nexport const addNConfig: KernelConfig = {\n  kernelName: AddN,\n  backendName: 'webgl',\n  kernelFunc: addN as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {All, AllAttrs, AllInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\n\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function all(\n    args: {inputs: AllInputs, backend: MathBackendWebGL, attrs: AllAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const xRank = x.shape.length;\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let permutedX = x;\n  if (permutedAxes != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('all', axes, xRank);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n  const inSize = util.sizeFromShape(reduceShape);\n\n  const a2D =\n      reshape({inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n  const reduced = reduce(a2D, a2D.dtype, 'all', backend);\n\n  let res;\n  if (keepDims) {\n    const newShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: newShape}});\n  } else {\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n  }\n\n  backend.disposeIntermediateTensorInfo(a2D);\n  backend.disposeIntermediateTensorInfo(reduced);\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo(permutedX);\n  }\n\n  return res;\n}\n\nexport const allConfig: KernelConfig = {\n  kernelName: All,\n  backendName: 'webgl',\n  kernelFunc: all as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Any, AnyAttrs, AnyInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function any(\n    args: {inputs: AnyInputs, backend: MathBackendWebGL, attrs: AnyAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const xRank = x.shape.length;\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let permutedX = x;\n  if (permutedAxes != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('any', axes, xRank);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n  const inSize = util.sizeFromShape(reduceShape);\n\n  const a2D =\n      reshape({inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n  const reduced = reduce(a2D, a2D.dtype, 'any', backend);\n\n  let res;\n  if (keepDims) {\n    const newShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: newShape}});\n  } else {\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n  }\n\n  backend.disposeIntermediateTensorInfo(a2D);\n  backend.disposeIntermediateTensorInfo(reduced);\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo(permutedX);\n  }\n\n  return res;\n}\n\nexport const anyConfig: KernelConfig = {\n  kernelName: Any,\n  backendName: 'webgl',\n  kernelFunc: any as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ArgMinMaxProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      reduceInfo: backend_util.ReduceInfo, op: 'max'|'min',\n      firstPass: boolean) {\n    const {windowSize, batchSize, outSize} = reduceInfo;\n    if (!firstPass) {\n      this.variableNames.push('bestIndicesA');\n    }\n    this.outputShape = [batchSize, outSize];\n    const compOp = (op === 'max') ? '>' : '<';\n    const indexSnippet = firstPass ?\n        'inOffset + i;' :\n        'round(getBestIndicesA(batch, inOffset + i));';\n\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${windowSize}; i++) {\n          int inIdx = ${indexSnippet};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${compOp} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ArgMinMaxPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(\n      shape: number[], windowSize: number, op: 'max'|'min',\n      firstPass: boolean) {\n    util.assert(\n        shape.length > 2,\n        () => `Packed arg${\n            op.charAt(0).toUpperCase() +\n            op.slice(1)} supports only inputs with rank above 2.`);\n    const inSize = shape[shape.length - 1];\n    const outSize = Math.ceil(inSize / windowSize);\n    this.outputShape = shape.slice(0, -1);\n    if (outSize > 1) {\n      this.outputShape.push(outSize);\n    }\n    if (!firstPass) {\n      this.variableNames.push('bestIndicesA');\n    }\n    const outShape = this.outputShape;\n    const rank = outShape.length;\n    const dtype = getCoordsDataType(rank);\n    const coords = getChannels('coords', rank);\n\n    let sourceLocSetup;\n    let sourceRank;\n    if (outSize === 1) {\n      sourceRank = rank + 1;\n      const sourceLocDType = getCoordsDataType(sourceRank);\n      sourceLocSetup = `\n        ${sourceLocDType} sourceLocR = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 1]};\n        ${sourceLocDType} sourceLocG = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 2]};\n        ${sourceLocDType} sourceLocA = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 1]};\n        ${sourceLocDType} sourceLocB = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 2]};`;\n    } else {\n      sourceRank = rank;\n      sourceLocSetup = `\n        ${dtype} sourceLocR = coords;\n        ++${coords[rank - 1]};\n        ${dtype} sourceLocG = coords;\n        ++${coords[rank - 2]};\n        ${dtype} sourceLocA = coords;\n        --${coords[rank - 1]};\n        ${dtype} sourceLocB = coords;\n        --${coords[rank - 2]};`;\n    }\n    const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, sourceRank);\n    const inChannel = '.' + channels[sourceRank - 1];  // e.g. \".b\" for rank 3.\n    const intChannels = channels.map(x => 'int ' + x);\n    const srcRCoords =\n        getChannels('sourceLocR', sourceRank - 1).concat('inIdx.r');\n    const srcGCoords =\n        getChannels('sourceLocG', sourceRank - 1).concat('inIdx.g');\n    const srcBCoords =\n        getChannels('sourceLocB', sourceRank - 1).concat('inIdx.b');\n    const srcACoords =\n        getChannels('sourceLocA', sourceRank - 1).concat('inIdx.a');\n\n    const compOp = (op === 'max') ? 'greaterThan' : 'lessThan';\n    const fetchCandidateIdx = firstPass ? '' : `\n          inIdx = round(vec4(getBestIndicesAChannel(${srcRCoords.join()}),\n                             getBestIndicesAChannel(${srcGCoords.join()}),\n                             getBestIndicesAChannel(${srcBCoords.join()}),\n                             getBestIndicesAChannel(${srcACoords.join()})));`;\n\n    const fetchValue = `vec4(\n            getAChannel(${srcRCoords.join()}),\n            hasNextCol ? getAChannel(${srcGCoords.join()}) : 0.,\n            hasNextRow ? getAChannel(${srcBCoords.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${srcACoords.join()}) : 0.)`;\n\n    const getBestIndicesAChannelSnippet = firstPass ? '' : `\n      float getBestIndicesAChannel(${intChannels.join()}) {\n        return getChannel(getBestIndicesA(${channels.join()}),\n                                          vec2(${channels.slice(-2).join()}));\n      }`;\n\n    this.userCode = `\n      float getAChannel(${intChannels.join()}) {\n        return getChannel(getA(${channels.join()}),\n                               vec2(${channels.slice(-2).join()}));\n      }\n      ${getBestIndicesAChannelSnippet}\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        bool hasNextCol = ${coords[rank - 1]} < ${outShape[rank - 1] - 1};\n        bool hasNextRow = ${coords[rank - 2]} < ${outShape[rank - 2] - 1};\n        ${sourceLocSetup}\n        ivec4 srcIdx = ivec4(sourceLocR${inChannel}, sourceLocG${inChannel},\n          sourceLocB${inChannel}, sourceLocA${inChannel}) * ${windowSize};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${fetchValue};\n\n        for (int i = 0; i < ${windowSize}; i++) {\n          inIdx = srcIdx;\n          ${fetchCandidateIdx}\n          vec4 candidate = ${fetchValue};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${compOp}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {ArgMinMaxProgram} from '../argminmax_gpu';\nimport {ArgMinMaxPackedProgram} from '../argminmax_packed_gpu';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reshape} from '../kernels/Reshape';\n\nfunction argReduce(\n    backend: MathBackendWebGL, x: TensorInfo, reduceType: 'max'|'min',\n    bestIndicesA: TensorInfo = null): TensorInfo {\n  let batchSize = x.shape[0];\n  let inSize = x.shape[1];\n  if (bestIndicesA != null) {\n    batchSize = bestIndicesA.shape[0];\n    inSize = bestIndicesA.shape[1];\n  }\n  const windowSize = backend_util.computeOptimalWindowSize(inSize);\n  const reduceInfo =\n      {windowSize, inSize, batchSize, outSize: Math.ceil(inSize / windowSize)};\n  const program =\n      new ArgMinMaxProgram(reduceInfo, reduceType, bestIndicesA == null);\n  const inputs = [x];\n  if (bestIndicesA != null) {\n    inputs.push(bestIndicesA);\n  }\n  const output = backend.runWebGLProgram(program, inputs, 'int32');\n  // No need to run another GPGPU program.\n  if (output.shape[1] === 1) {\n    return output;\n  }\n  const result = argReduce(backend, x, reduceType, output);\n  backend.disposeIntermediateTensorInfo(output);\n  return result;\n}\n\nfunction argReducePacked(\n    backend: MathBackendWebGL, x: TensorInfo, reduceType: 'max'|'min',\n    bestIndicesA: TensorInfo = null): TensorInfo {\n  const inShape = bestIndicesA != null ? bestIndicesA.shape : x.shape;\n  const inSize = inShape[inShape.length - 1];\n  const windowSize = backend_util.computeOptimalWindowSize(inSize);\n  const program = new ArgMinMaxPackedProgram(\n      inShape, windowSize, reduceType, bestIndicesA == null);\n  const inputs = bestIndicesA == null ? [x] : [x, bestIndicesA];\n  const output = backend.runWebGLProgram(program, inputs, 'int32');\n  if (output.shape.length === x.shape.length) {\n    const result = argReducePacked(backend, x, reduceType, output);\n    backend.disposeIntermediateTensorInfo(output);\n    return result;\n  }\n  return output;\n}\n\nexport function argMinMaxReduce(\n    backend: MathBackendWebGL, x: TensorInfo, axis: number,\n    reduceType: 'min'|'max'): TensorInfo {\n  const axes = [axis];\n  backend_util.assertAxesAreInnerMostDims(\n      'arg' + reduceType.charAt(0).toUpperCase() + reduceType.slice(1), axes,\n      x.shape.length);\n  if (!env().getBool('WEBGL_PACK_REDUCE') || x.shape.length <= 2) {\n    const intermediateTensorInfos = [];\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(x.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = reshape({inputs: {x}, backend, attrs: {shape: [-1, inSize]}});\n    intermediateTensorInfos.push(a2D);\n\n    const reduced = argReduce(backend, a2D, reduceType);\n    intermediateTensorInfos.push(reduced);\n    const reshaped =\n        reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n\n    intermediateTensorInfos.forEach(\n        t => backend.disposeIntermediateTensorInfo(t));\n    return reshaped;\n  }\n  return argReducePacked(backend, x, reduceType);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMax, ArgMaxAttrs, ArgMaxInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {argMinMaxReduce} from '../kernel_utils/arg_min_max';\n\nimport {transpose} from './Transpose';\n\nexport function argMax(\n    args:\n        {inputs: ArgMaxInputs, backend: MathBackendWebGL, attrs: ArgMaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('argMax', [axes[0]], $x.shape.length);\n  const out = argMinMaxReduce(backend, $x, axes[0], 'max');\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n  return out;\n}\n\nexport const argMaxConfig: KernelConfig = {\n  kernelName: ArgMax,\n  backendName: 'webgl',\n  kernelFunc: argMax as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMin, ArgMinAttrs, ArgMinInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {argMinMaxReduce} from '../kernel_utils/arg_min_max';\nimport {transpose} from './Transpose';\n\nexport function argMin(\n    args:\n        {inputs: ArgMinInputs, backend: MathBackendWebGL, attrs: ArgMinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('argMin', [axes[0]], $x.shape.length);\n\n  const out = argMinMaxReduce(backend, $x, axes[0], 'min');\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n  return out;\n}\n\nexport const argMinConfig: KernelConfig = {\n  kernelName: ArgMin,\n  backendName: 'webgl',\n  kernelFunc: argMin as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Asin, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ASIN = CHECK_NAN_SNIPPET + `\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n`;\n\nexport const asin = unaryKernelFunc({opSnippet: ASIN});\n\nexport const asinConfig: KernelConfig = {\n  kernelName: Asin,\n  backendName: 'webgl',\n  kernelFunc: asin,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Asinh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ASINH = CHECK_NAN_SNIPPET + `return log(x + sqrt(x * x + 1.0));`;\n\nexport const asinh = unaryKernelFunc({opSnippet: ASINH});\n\nexport const asinhConfig: KernelConfig = {\n  kernelName: Asinh,\n  backendName: 'webgl',\n  kernelFunc: asinh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ATAN = CHECK_NAN_SNIPPET + `\n  return atan(x);\n`;\n\nexport const atan = unaryKernelFunc({opSnippet: ATAN});\n\nexport const atanConfig: KernelConfig = {\n  kernelName: Atan,\n  backendName: 'webgl',\n  kernelFunc: atan,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan2} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc, CHECK_NAN_SNIPPET_BINARY, CHECK_NAN_SNIPPET_BINARY_PACKED} from '../kernel_utils/kernel_funcs_utils';\n\nconst ATAN2 = CHECK_NAN_SNIPPET_BINARY + `\n  return atan(a, b);\n`;\n\nconst ATAN2_PACKED = `\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  ` +\n    CHECK_NAN_SNIPPET_BINARY_PACKED + `\n  return result;\n`;\n\nexport const atan2 =\n    binaryKernelFunc({opSnippet: ATAN2, packedOpSnippet: ATAN2_PACKED});\n\nexport const atan2Config: KernelConfig = {\n  kernelName: Atan2,\n  backendName: 'webgl',\n  kernelFunc: atan2,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atanh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ATANH = CHECK_NAN_SNIPPET + `\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;`;\n\nexport const atanh = unaryKernelFunc({opSnippet: ATANH});\n\nexport const atanhConfig: KernelConfig = {\n  kernelName: Atanh,\n  backendName: 'webgl',\n  kernelFunc: atanh,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Pool2DProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, poolType: 'max'|'avg',\n      computePositions: boolean, flattenPositions = false,\n      includeBatchInIndex = false) {\n    if (poolType === 'avg' && computePositions) {\n      throw new Error('Cannot compute positions for average pool.');\n    }\n\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    this.outputShape = convInfo.outShape;\n\n    const isAvgPool = poolType === 'avg';\n    const batchFlattenPositionStr = `((batch  * ${convInfo.inHeight} + xR) * ${\n        convInfo.inWidth} + xC) * ${convInfo.inChannels} + d`;\n    const flattenPositionStr =\n        `(xR * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + d`;\n\n    let initializationValue = '0.0';\n    if (!isAvgPool) {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '-1.0 / 1e-20';\n    }\n\n    if (computePositions) {\n      const compareOp = '>=';\n\n      this.userCode = `\n        const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n        const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${compareOp} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${\n          flattenPositions ? (includeBatchInIndex ? batchFlattenPositionStr :\n                                                    flattenPositionStr) :\n                             `wR * ${effectiveFilterWidth} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `;\n      return;\n    }\n\n    const compareOp = 'max';\n\n    let returnValue = `${poolType}(${poolType}(${poolType}(` +\n        'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n    if (poolType === 'avg') {\n      returnValue = `avgValue / count`;\n    }\n\n    const filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;\n    const filterWidthVec4Remainder = filterWidth % 4;\n\n    const updateSnippet = `\n      if (${isAvgPool}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n      }\n    `;\n\n    this.userCode = `\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${convInfo.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${initializationValue});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${convInfo.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidthNearestVec4}; wC += 4) {\n            int xC = xCCorner + wC * ${dilationWidth};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              getValue(batch, xR, xC + 2 * ${dilationWidth}, d),\n              getValue(batch, xR, xC + 3 * ${dilationWidth}, d)\n            );\n\n            ${updateSnippet}\n          }\n\n          int xC = xCCorner + ${filterWidthNearestVec4};\n          if (${filterWidthVec4Remainder === 1}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${updateSnippet}\n          } else if (${filterWidthVec4Remainder === 2}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${updateSnippet}\n          } else if (${filterWidthVec4Remainder === 3}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              getValue(batch, xR, xC + 2 * ${dilationWidth}, d),\n              initializationValue\n            );\n\n            ${updateSnippet}\n          }\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n}\n\nexport class Pool3DProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: backend_util.Conv3DInfo, poolType: 'max'|'avg',\n      computePositions: boolean, flattenPositions = false,\n      includeBatchInIndex = false) {\n    if (poolType === 'avg' && computePositions) {\n      throw new Error('Cannot compute positions for average pool.');\n    }\n\n    const filterWidth = convInfo.filterWidth;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    this.outputShape = convInfo.outShape;\n\n    const isAvgPool = poolType === 'avg';\n\n    let initializationValue = '0.0';\n    if (!isAvgPool) {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '-1.0 / 1e-20';\n    }\n\n    if (computePositions) {\n      const compareOp = '>=';\n\n      this.userCode = `\n        const ivec3 strides =\n            ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});\n        const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${effectiveFilterDepth};\n              wD += ${dilationDepth}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${convInfo.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${effectiveFilterHeight};\n                wR += ${dilationHeight}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${convInfo.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${effectiveFilterWidth};\n                  wC += ${dilationWidth}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${compareOp} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${\n          flattenPositions ?\n              (includeBatchInIndex ?\n                   `(((batch * ${convInfo.inDepth} + xD) * ${\n                       convInfo.inHeight} + xR) * ${convInfo.inWidth} + xC) * ${\n                       convInfo.inChannels} + ch` :\n                   `((xD * ${convInfo.inHeight} + xR) * ${\n                       convInfo.inWidth} + xC) * ${convInfo.inChannels} + ch`) :\n              `wD * ${effectiveFilterHeight} * ${effectiveFilterWidth} +\n                      wR * ${effectiveFilterWidth} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `;\n      return;\n    }\n\n    const compareOp = 'max';\n\n    let returnValue = `${poolType}(${poolType}(${poolType}(` +\n        'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n    if (poolType === 'avg') {\n      returnValue = `avgValue / count`;\n    }\n\n    const filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;\n    const filterWidthVec4Remainder = filterWidth % 4;\n\n    const updateSnippet = `\n      if (${isAvgPool}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n      }\n    `;\n\n    this.userCode = `\n      const ivec3 strides =\n        ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${convInfo.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${initializationValue});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n            wD += ${dilationDepth}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${convInfo.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${filterWidthNearestVec4}; wC += 4) {\n              int xC = xCCorner + wC * ${dilationWidth};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${dilationWidth}, ch)\n              );\n\n              ${updateSnippet}\n            }\n\n            int xC = xCCorner + ${filterWidthNearestVec4};\n            if (${filterWidthVec4Remainder === 1}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${updateSnippet}\n            } else if (${filterWidthVec4Remainder === 2}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${updateSnippet}\n            } else if (${filterWidthVec4Remainder === 3}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${dilationWidth}, ch),\n                initializationValue\n              );\n\n              ${updateSnippet}\n            }\n          }\n          setOutput(${returnValue});\n        }\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPool, AvgPoolAttrs, AvgPoolInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool2DProgram} from '../pool_gpu';\nimport {assertNotComplex} from '../webgl_util';\nimport {identity} from './Identity';\n\nexport function avgPool(args: {\n  inputs: AvgPoolInputs,\n  backend: MathBackendWebGL,\n  attrs: AvgPoolAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  assertNotComplex(x, 'avgPool');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in avgPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    return identity({inputs: {x}, backend});\n  }\n  const avgPoolProgram = new Pool2DProgram(convInfo, 'avg', false);\n  return backend.runWebGLProgram(avgPoolProgram, [x], 'float32');\n}\n\nexport const avgPoolConfig: KernelConfig = {\n  kernelName: AvgPool,\n  backendName: 'webgl',\n  kernelFunc: avgPool as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPool3D, AvgPool3DAttrs, AvgPool3DInputs, backend_util, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool3DProgram} from '../pool_gpu';\n\nexport function avgPool3D(args: {\n  inputs: AvgPool3DInputs,\n  backend: MathBackendWebGL,\n  attrs: AvgPool3DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode, dataFormat} = attrs;\n  const dilations: [number, number, number] = [1, 1, 1];\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode, dataFormat);\n  const avgPoolProgram = new Pool3DProgram(convInfo, 'avg', false);\n  return backend.runWebGLProgram(avgPoolProgram, [x], 'float32');\n}\n\nexport const avgPool3DConfig: KernelConfig = {\n  kernelName: AvgPool3D,\n  backendName: 'webgl',\n  kernelFunc: avgPool3D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class AvgPool2DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const avgMultiplier = 1 / (filterHeight * filterWidth);\n\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float avgMultiplier = float(${avgMultiplier});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${effectiveFilterWidth};\n            wC+= ${dilationWidth}) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class AvgPool3DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.inShape;\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);\n\n    this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n      const float avgMultiplier = float(${avgMultiplier});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n            wD += ${dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPool3DGrad, AvgPool3DGradAttrs, AvgPool3DGradInputs, backend_util, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {AvgPool3DBackpropProgram} from '../avg_pool_backprop_gpu';\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function avgPool3DGrad(args: {\n  inputs: AvgPool3DGradInputs,\n  backend: MathBackendWebGL,\n  attrs: AvgPool3DGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations: [number, number, number] = [1, 1, 1];\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  const avgPoolBackpropProgram = new AvgPool3DBackpropProgram(convInfo);\n  return backend.runWebGLProgram(avgPoolBackpropProgram, [dy], x.dtype);\n}\n\nexport const avgPoolGrad3DConfig: KernelConfig = {\n  kernelName: AvgPool3DGrad,\n  backendName: 'webgl',\n  kernelFunc: avgPool3DGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPoolGrad, AvgPoolGradAttrs, AvgPoolGradInputs, backend_util, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {AvgPool2DBackpropProgram} from '../avg_pool_backprop_gpu';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {assertNotComplex} from '../webgl_util';\n\nexport function avgPoolGrad(args: {\n  inputs: AvgPoolGradInputs,\n  backend: MathBackendWebGL,\n  attrs: AvgPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  assertNotComplex([dy, input], 'avgPoolGrad');\n  const {filterSize, strides, pad} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad);\n  const avgPoolBackpropProgram = new AvgPool2DBackpropProgram(convInfo);\n  return backend.runWebGLProgram(avgPoolBackpropProgram, [dy], x.dtype);\n}\n\nexport const avgPoolGradConfig: KernelConfig = {\n  kernelName: AvgPoolGrad,\n  backendName: 'webgl',\n  kernelFunc: avgPoolGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BatchMatMul, BatchMatMulAttrs, BatchMatMulInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {batchMatMulImpl} from './BatchMatMul_impl';\n\nexport function batchMatMul(args: {\n  inputs: BatchMatMulInputs,\n  attrs: BatchMatMulAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b} = inputs;\n  const {transposeA, transposeB} = attrs;\n\n  return batchMatMulImpl({a, b, transposeA, transposeB, backend});\n}\n\nexport const batchMatMulConfig: KernelConfig = {\n  kernelName: BatchMatMul,\n  backendName: 'webgl',\n  kernelFunc: batchMatMul as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class BatchNormProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      xShape: number[], meanShape: number[], varianceShape: number[],\n      offsetShape: number[]|null, scaleShape: number[]|null,\n      varianceEpsilon: number) {\n    this.variableNames = ['x', 'mean', 'variance'];\n    backend_util.assertAndGetBroadcastShape(xShape, meanShape);\n    backend_util.assertAndGetBroadcastShape(xShape, varianceShape);\n\n    let offsetSnippet = '0.0';\n    if (offsetShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, offsetShape);\n      this.variableNames.push('offset');\n      offsetSnippet = 'getOffsetAtOutCoords()';\n    }\n\n    let scaleSnippet = '1.0';\n    if (scaleShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, scaleShape);\n      this.variableNames.push('scale');\n      scaleSnippet = 'getScaleAtOutCoords()';\n    }\n\n    this.outputShape = xShape;\n    this.userCode = `\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${offsetSnippet};\n        float scale = ${scaleSnippet};\n        float inv = scale * inversesqrt(variance + float(${varianceEpsilon}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class BatchNormPackedProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(\n      xShape: number[], meanShape: number[], varianceShape: number[],\n      offsetShape: number[]|null, scaleShape: number[]|null,\n      varianceEpsilon: number) {\n    this.variableNames = ['x', 'mean', 'variance'];\n    backend_util.assertAndGetBroadcastShape(xShape, meanShape);\n    backend_util.assertAndGetBroadcastShape(xShape, varianceShape);\n\n    let offsetSnippet = 'vec4(0.0)';\n    if (offsetShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, offsetShape);\n      this.variableNames.push('offset');\n      offsetSnippet = 'getOffsetAtOutCoords()';\n    }\n\n    let scaleSnippet = 'vec4(1.0)';\n    if (scaleShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, scaleShape);\n      this.variableNames.push('scale');\n      scaleSnippet = 'getScaleAtOutCoords()';\n    }\n\n    this.outputShape = xShape;\n    this.userCode = `\n      void main() {\n        vec4 offset = ${offsetSnippet};\n        vec4 scale = ${scaleSnippet};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${varianceEpsilon}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `;\n  }\n}\n","\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, FusedBatchNorm, FusedBatchNormAttrs, FusedBatchNormInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BatchNormProgram} from '../batchnorm_gpu';\nimport {BatchNormPackedProgram} from '../batchnorm_packed_gpu';\n\nexport const batchNorm: (params: {\n  inputs: FusedBatchNormInputs,\n  backend: MathBackendWebGL,\n  attrs: FusedBatchNormAttrs\n}) => TensorInfo = ({inputs, backend, attrs}) => {\n  const {x, mean, variance, offset, scale} = inputs;\n\n  util.assert(\n      mean.shape.length === variance.shape.length,\n      () => 'Batch normalization gradient requires mean and variance to have ' +\n          'equal ranks.');\n  util.assert(\n      offset == null || mean.shape.length === offset.shape.length,\n      () => 'Batch normalization gradient requires mean and offset to have ' +\n          'equal ranks.');\n  util.assert(\n      scale == null || mean.shape.length === scale.shape.length,\n      () => 'Batch normalization gradient requires mean and scale to have ' +\n          'equal ranks.');\n\n  let {varianceEpsilon} = attrs;\n  if (varianceEpsilon == null) {\n    varianceEpsilon = 0.001;\n  }\n\n  const finalInputs = [x, mean, variance];\n\n  let offsetShape = null;\n  if (offset != null) {\n    offsetShape = offset.shape;\n    finalInputs.push(offset);\n  }\n\n  let scaleShape = null;\n  if (scale != null) {\n    scaleShape = scale.shape;\n    finalInputs.push(scale);\n  }\n\n  const program = env().getBool('WEBGL_PACK_NORMALIZATION') ?\n      new BatchNormPackedProgram(\n          x.shape, mean.shape, variance.shape, offsetShape, scaleShape,\n          varianceEpsilon) :\n      new BatchNormProgram(\n          x.shape, mean.shape, variance.shape, offsetShape, scaleShape,\n          varianceEpsilon);\n  const output =\n      backend.runWebGLProgram(program, finalInputs, finalInputs[0].dtype);\n\n  return output;\n};\n\nexport const batchNormConfig: KernelConfig = {\n  kernelName: FusedBatchNorm,\n  backendName: 'webgl',\n  kernelFunc: batchNorm as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType, UniformType} from './shader_compiler';\n\nexport class SliceProgram implements GPGPUProgram {\n  variableNames = ['source'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n  customUniforms: Array<{name: string; arrayIndex: number; type: UniformType;}>;\n\n  constructor(destSize: number[]) {\n    this.outputShape = destSize;\n    this.rank = destSize.length;\n\n    const dtype = getCoordsDataType(this.rank);\n    this.customUniforms = [{name: 'start', arrayIndex: this.rank, type: 'int'}];\n    const sourceCoords = getCoords(this.rank);\n\n    let body: string;\n    const coordSum = destSize.map((_, i) => {\n      return `sourceLoc.${coords[i]} = start[${i}] + coords.${coords[i]};`;\n    });\n    body = `\n        ${dtype} sourceLoc;\n        ${dtype} coords = getOutputCoords();\n        ${coordSum.join('\\n')}\n      `;\n    this.userCode = `\n      void main() {\n        ${body}\n        setOutput(getSource(${sourceCoords}));\n      }\n    `;\n  }\n}\n\nconst coords = ['x', 'y', 'z', 'w', 'u', 'v'];\n\nfunction getCoords(rank: number): string {\n  if (rank === 1) {\n    return 'sourceLoc';\n  } else if (rank <= 6) {\n    return coords.slice(0, rank).map(x => 'sourceLoc.' + x).join(',');\n  } else {\n    throw Error(`Slicing for rank ${rank} is not yet supported`);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType, UniformType} from './shader_compiler';\n\nexport class SlicePackedProgram implements GPGPUProgram {\n  variableNames = ['source'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n  customUniforms: Array<{name: string; arrayIndex: number; type: UniformType;}>;\n\n  constructor(destSize: number[]) {\n    this.outputShape = destSize;\n    this.rank = destSize.length;\n    this.customUniforms = [{name: 'start', arrayIndex: this.rank, type: 'int'}];\n    const dtype = getCoordsDataType(this.rank);\n    const coords = getChannels('coords', this.rank);\n    const sourceLoc = getChannels('sourceLoc', this.rank);\n\n    const innerDims =\n        this.rank === 1 ? 'sourceLoc' : `vec2(${sourceLoc.slice(-2).join()})`;\n    const getChannel =\n        `getChannel(getSource(${sourceLoc.join()}), ${innerDims})`;\n    const upperRow = `\n      result.x = ${getChannel};\n      if (++${coords[this.rank - 1]} < ${destSize[this.rank - 1]}) {\n        ++${sourceLoc[this.rank - 1]};\n        result.y = ${getChannel};\n        --${sourceLoc[this.rank - 1]};\n      }\n    `;\n    const lowerRow = this.rank === 1 ? '' : `\n      --${coords[this.rank - 1]};\n      if (++${coords[this.rank - 2]} < ${destSize[this.rank - 2]}) {\n        ++${sourceLoc[this.rank - 2]};\n        result.z = ${getChannel};\n        if (++${coords[this.rank - 1]} < ${destSize[this.rank - 1]}) {\n          ++${sourceLoc[this.rank - 1]};\n          result.w = ${getChannel};\n        }\n      }\n    `;\n\n    const sourceLocSetup = this.rank <= 4 ?\n        `sourceLoc = coords +\n            ${dtype}(${destSize.map((_, i) => `start[${i}]`).join()});` :\n        destSize.map((_, i) => `${sourceLoc[i]} = ${coords[i]} + start[${i}];`)\n            .join('\\n');\n    this.userCode = `\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        ${dtype} sourceLoc;\n        ${sourceLocSetup}\n        vec4 result = vec4(0.);\n        ${upperRow}\n        ${lowerRow}\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, Slice, slice_util, SliceAttrs, SliceInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {sliceImplCPU} from '../kernel_utils/shared';\nimport {SliceProgram} from '../slice_gpu';\nimport {SlicePackedProgram} from '../slice_packed_gpu';\n\nfunction shallowSlice(\n    x: TensorInfo, begin: number[], size: number[], backend: MathBackendWebGL) {\n  const xTexData = backend.texData.get(x.dataId);\n  const t = backend.makeTensorInfo(size, x.dtype);\n  const newTexData = backend.texData.get(t.dataId);\n  // Copy texture data from the original tensor.\n  Object.assign(newTexData, xTexData);\n  newTexData.refCount = 1;\n  newTexData.shape = size;\n  newTexData.dtype = x.dtype;\n  let flatOffset =\n      slice_util.computeFlatOffset(begin, util.computeStrides(x.shape));\n  if (xTexData.slice) {\n    // We are slicing an already sliced tensor, so we have to accumulate\n    // the offset.\n    flatOffset += xTexData.slice.flatOffset;\n  }\n  newTexData.slice = {\n    flatOffset,\n    // Point to the original dataId, which is used to do ref counting.\n    origDataId: xTexData.slice && xTexData.slice.origDataId || x.dataId\n  };\n\n  // Increase the ref count for that data bucket.\n  const refCount = backend.dataRefCount.get(newTexData.slice.origDataId) || 1;\n  backend.dataRefCount.set(newTexData.slice.origDataId, refCount + 1);\n  return t;\n}\n\nexport function slice(\n    args: {inputs: SliceInputs, backend: MathBackendWebGL, attrs: SliceAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {begin, size} = attrs;\n\n  const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n  slice_util.assertParamsValid(x, $begin, $size);\n\n  if (util.sizeFromShape($size) === 0) {\n    return backend.makeTensorInfo($size, x.dtype, []);\n  }\n\n  // Run on cpu if dtype is string. For string, the backend represents it\n  // as Uint8Array[], where each Uint8Array is a character. Given that the\n  // computation is only on the outer array, uploading the whole data onto\n  // gpu is wasteful. Also, currently webgl doesn't have a design to\n  // upload and retrieve Uint8Array[] between cpu and gpu. Therefore, we\n  // just run the kernel on cpu if dtype is string.\n  if (backend.shouldExecuteOnCPU([x]) || x.dtype === 'string') {\n    const xTexData = backend.texData.get(x.dataId);\n    const outValues = sliceImplCPU(\n        xTexData.values as TypedArray, $begin, $size, x.shape, x.dtype);\n    return backend.makeTensorInfo($size, x.dtype, outValues);\n  }\n\n  const {isPacked} = backend.texData.get(x.dataId);\n  const isContinous = slice_util.isSliceContinous(x.shape, $begin, $size);\n  if (isPacked || !isContinous) {\n    const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n        new SlicePackedProgram($size) :\n        new SliceProgram($size);\n    const customValues = [$begin];\n    return backend.runWebGLProgram(program, [x], x.dtype, customValues);\n  }\n  backend.uploadToGPU(x.dataId);\n  return shallowSlice(x, $begin, $size, backend);\n}\n\nexport const sliceConfig: KernelConfig = {\n  kernelName: Slice,\n  backendName: 'webgl',\n  kernelFunc: slice as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BatchToSpaceND, BatchToSpaceNDAttrs, BatchToSpaceNDInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\nimport {transpose} from './Transpose';\n\nexport const batchToSpaceND = (args: {\n  inputs: BatchToSpaceNDInputs,\n  backend: MathBackendWebGL,\n  attrs: BatchToSpaceNDAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, crops} = attrs;\n\n  util.assert(\n      x.shape.length <= 4,\n      () => 'batchToSpaceND for rank > 4 with a WebGL backend not ' +\n          'implemented yet');\n  const prod = blockShape.reduce((a, b) => a * b);\n\n  const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n  const permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n  const reshapedPermuted =\n      backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n  const sliceBeginCoords =\n      backend_util.getSliceBeginCoords(crops, blockShape.length);\n  const sliceSize =\n      backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n\n  const toDispose = [];\n\n  const reshapedIntermediate =\n      reshape({inputs: {x}, backend, attrs: {shape: reshaped}});\n  const transposedIntermediate = transpose(\n      {inputs: {x: reshapedIntermediate}, backend, attrs: {perm: permuted}});\n  const reshapedIntermediate2 = reshape({\n    inputs: {x: transposedIntermediate},\n    backend,\n    attrs: {shape: reshapedPermuted}\n  });\n  const sliced = slice({\n    inputs: {x: reshapedIntermediate2},\n    backend,\n    attrs: {begin: sliceBeginCoords, size: sliceSize}\n  });\n\n  toDispose.push(reshapedIntermediate);\n  toDispose.push(transposedIntermediate);\n  toDispose.push(reshapedIntermediate2);\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return sliced;\n};\n\nexport const batchToSpaceNDConfig: KernelConfig = {\n  kernelName: BatchToSpaceND,\n  backendName: 'webgl',\n  kernelFunc: batchToSpaceND as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Bincount, BincountAttrs, BincountInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {bincountImplCPU} from '../kernel_utils/shared';\n\nexport function bincount(args: {\n  inputs: BincountInputs,\n  backend: MathBackendWebGL,\n  attrs: BincountAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size} = attrs;\n\n  const xVals = backend.readSync(x.dataId) as TypedArray;\n  const weightsVals = backend.readSync(weights.dataId) as TypedArray;\n\n  const outVals =\n      bincountImplCPU(xVals, weightsVals, weights.dtype, weights.shape, size);\n\n  return backend.makeTensorInfo([size], weights.dtype, outVals);\n}\n\nexport const bincountConfig: KernelConfig = {\n  kernelName: Bincount,\n  backendName: 'webgl',\n  kernelFunc: bincount as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NotEqual} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {notEqualImplCPU} from '../kernel_utils/shared';\n\nconst NOT_EQUAL = `return float(a != b);`;\n\nexport const notEqual = binaryKernelFunc(\n    {opSnippet: NOT_EQUAL, cpuKernelImpl: notEqualImplCPU, dtype: 'bool'});\n\nexport const notEqualConfig: KernelConfig = {\n  kernelName: NotEqual,\n  backendName: 'webgl',\n  kernelFunc: notEqual,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Real, RealInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {identity} from './Identity';\n\nexport function real(args: {inputs: RealInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n  const inputData = backend.texData.get(input.dataId);\n\n  return identity({inputs: {x: inputData.complexTensorInfos.real}, backend});\n}\n\nexport const realConfig: KernelConfig = {\n  kernelName: Real,\n  backendName: 'webgl',\n  kernelFunc: real as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as tf from '@tensorflow/tfjs-core';\nimport {BinaryInputs, Cast, CastAttrs, CastInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {complex} from './Complex';\nimport {identity} from './Identity';\nimport {notEqual} from './NotEqual';\nimport {real} from './Real';\n\nimport {int} from '../kernel_utils/int';\n\nexport function cast(\n    args: {inputs: CastInputs, backend: MathBackendWebGL, attrs: CastAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dtype} = attrs;\n\n  // Casting to complex64.\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return identity({inputs: {x}, backend});\n    }\n\n    // TODO(annxingyuan): Import kernel function once zeros is modularized.\n    const zerosTensor = tf.zeros(x.shape);\n    const floatX = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n\n    const result =\n        complex({inputs: {real: floatX, imag: zerosTensor}, backend});\n\n    zerosTensor.dispose();\n    backend.disposeIntermediateTensorInfo(floatX);\n\n    return result;\n  }\n\n  // Casting from complex64\n  if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const result = cast({inputs: {x: realPart}, backend, attrs: {dtype}});\n    backend.disposeIntermediateTensorInfo(realPart);\n    return result;\n  }\n\n  if (!util.hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    const result = identity({inputs: {x}, backend});\n    return {dataId: result.dataId, shape: result.shape, dtype};\n  }\n\n  if (dtype === 'int32') {\n    return int(x, backend);\n  }\n\n  if (dtype === 'bool') {\n    const zerosTensorInfo = backend.makeTensorInfo(\n        [], 'bool', util.getTypedArrayFromDType('bool', 1));\n\n    const binaryInputs: BinaryInputs = {a: x, b: zerosTensorInfo};\n\n    const result = notEqual({inputs: binaryInputs, backend}) as TensorInfo;\n    backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n    return result;\n  }\n\n  throw new Error(`Error in Cast: failed to cast ${x.dtype} to ${dtype}`);\n}\n\nexport const castConfig: KernelConfig = {\n  kernelName: Cast,\n  backendName: 'webgl',\n  kernelFunc: cast as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {UnaryOpProgram} from '../unaryop_gpu';\n\nconst TO_INT = `return float(int(x));`;\n\nexport function int(input: TensorInfo, backend: MathBackendWebGL): TensorInfo {\n  const program = new UnaryOpProgram(input.shape, TO_INT);\n  const output = backend.runWebGLProgram(program, [input], 'int32');\n  return {dataId: output.dataId, shape: output.shape, dtype: output.dtype};\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Ceil, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {ceilImplCPU} from '../kernel_utils/shared';\n\nconst CEIL = `return ceil(x);`;\n\nexport const ceil = unaryKernelFunc(\n    {opSnippet: CEIL, packedOpSnippet: CEIL, cpuKernelImpl: ceilImplCPU});\n\nexport const ceilConfig: KernelConfig = {\n  kernelName: Ceil,\n  backendName: 'webgl',\n  kernelFunc: ceil as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\nexport class ClipProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  customUniforms = [\n    {name: 'minVal', type: 'float' as UniformType},\n    {name: 'maxVal', type: 'float' as UniformType}\n  ];\n\n  constructor(aShape: number[]) {\n    this.outputShape = aShape;\n    this.userCode = `\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\nexport class ClipPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  userCode: string;\n  outputShape: number[];\n  customUniforms = [\n    {name: 'minVal', type: 'float' as UniformType},\n    {name: 'maxVal', type: 'float' as UniformType}\n  ];\n\n  constructor(aShape: number[]) {\n    this.outputShape = aShape;\n    this.userCode = `\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ClipByValue, ClipByValueAttrs, ClipByValueInputs, env, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ClipProgram} from '../clip_gpu';\nimport {ClipPackedProgram} from '../clip_packed_gpu';\n\nexport function clipByValue(args: {\n  inputs: ClipByValueInputs,\n  backend: MathBackendWebGL,\n  attrs: ClipByValueAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {clipValueMin, clipValueMax} = attrs;\n\n  let program;\n  if (env().getBool('WEBGL_PACK_CLIP')) {\n    program = new ClipPackedProgram(x.shape);\n  } else {\n    program = new ClipProgram(x.shape);\n  }\n  const customValues = [[clipValueMin], [clipValueMax]];\n  return backend.runWebGLProgram(program, [x], x.dtype, customValues);\n}\n\nexport const clipByValueConfig: KernelConfig = {\n  kernelName: ClipByValue,\n  backendName: 'webgl',\n  kernelFunc: clipByValue as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ComplexAbsProgram implements GPGPUProgram {\n  variableNames = ['real', 'imag'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(shape: number[]) {\n    this.outputShape = shape;\n    this.userCode = `\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ComplexAbs, ComplexAbsInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ComplexAbsProgram} from '../complex_abs_gpu';\n\n// Returns a TensorInfo with the complex shape and the dataId of the\n// underlying part. We need to do this because a reshaped complex tensor is\n// not reflected in its parts.\nfunction makeComplexComponentTensorInfo(\n    complexTensor: TensorInfo, complexPart: TensorInfo): TensorInfo {\n  return {\n    dataId: complexPart.dataId,\n    dtype: complexPart.dtype,\n    shape: complexTensor.shape\n  };\n}\n\nexport function complexAbs(\n    args: {inputs: ComplexAbsInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  const xData = backend.texData.get(x.dataId);\n\n  const program = new ComplexAbsProgram(x.shape);\n  const programInputs = [\n    makeComplexComponentTensorInfo(x, xData.complexTensorInfos.real),\n    makeComplexComponentTensorInfo(x, xData.complexTensorInfos.imag),\n  ];\n\n  return backend.runWebGLProgram(\n      program, programInputs, programInputs[0].dtype);\n}\n\nexport const complexAbsConfig: KernelConfig = {\n  kernelName: ComplexAbs,\n  backendName: 'webgl',\n  kernelFunc: complexAbs as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ConcatProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n\n  // Concats 2d tensors along axis=1. See comments in MathBackendWebGL.concat().\n  constructor(shapes: Array<[number, number]>) {\n    this.outputShape = backend_util.computeOutShape(shapes, 1 /* axis */);\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const offsets: number[] = new Array(shapes.length - 1);\n    offsets[0] = shapes[0][1];\n    for (let i = 1; i < offsets.length; i++) {\n      offsets[i] = offsets[i - 1] + shapes[i][1];\n    }\n\n    const snippets = [`if (yC < ${offsets[0]}) setOutput(getT0(yR, yC));`];\n    for (let i = 1; i < offsets.length; i++) {\n      const shift = offsets[i - 1];\n      snippets.push(\n          `else if (yC < ${offsets[i]}) ` +\n          `setOutput(getT${i}(yR, yC-${shift}));`);\n    }\n    const lastIndex = offsets.length;\n    const lastShift = offsets[offsets.length - 1];\n    snippets.push(`else setOutput(getT${lastIndex}(yR, yC-${lastShift}));`);\n\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${snippets.join('\\n        ')}\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ConcatPackedProgram implements GPGPUProgram {\n  variableNames: string[];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(shapes: number[][], axis: number) {\n    this.outputShape = backend_util.computeOutShape(shapes, axis);\n    const shape = this.outputShape;\n    const rank = shape.length;\n    const dtype = getCoordsDataType(rank);\n    const coords = getChannels('coords', rank);\n    const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const offsets: number[] = new Array(shapes.length - 1);\n    offsets[0] = shapes[0][axis];\n    for (let i = 1; i < offsets.length; i++) {\n      offsets[i] = offsets[i - 1] + shapes[i][axis];\n    }\n\n    const channel = channels[axis];\n    const lastChannels = channels.slice(-2);\n    const allChannels = channels.join();\n\n    let getValueSnippet = `if (${channel} < ${offsets[0]}) {\n        return getChannel(\n            getT0(${allChannels}), vec2(${lastChannels.join()}));\n        }`;\n    for (let i = 1; i < offsets.length; i++) {\n      const shift = offsets[i - 1];\n      // Note: the >= comparison below may seem unnecessary given the check\n      // above but is needed to workaround branch execution issues on some\n      // devices. It makes all the conditions exclusive without relying on\n      // execution order.\n      getValueSnippet += `\n        if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\n          return getChannel(\n            getT${i}(${shiftedChannels(channels, channel, shift)}),\n            vec2(${shiftedChannels(lastChannels, channel, shift)}));\n        }`;\n    }\n    const lastIndex = offsets.length;\n    const shift = offsets[offsets.length - 1];\n    getValueSnippet += `\n        return getChannel(\n          getT${lastIndex}(${shiftedChannels(channels, channel, shift)}),\n          vec2(${shiftedChannels(lastChannels, channel, shift)}));`;\n\n    this.userCode = `\n      float getValue(${channels.map(x => 'int ' + x)}) {\n        ${getValueSnippet}\n      }\n\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\n\n        ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\n        if (${coords[rank - 1]} < ${shape[rank - 1]}) {\n          result.g = getValue(${coords});\n        }\n\n        ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\n        if (${coords[rank - 2]} < ${shape[rank - 2]}) {\n          result.a = getValue(${coords});\n        }\n\n        ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\n        if (${coords[rank - 2]} < ${shape[rank - 2]} &&\n            ${coords[rank - 1]} < ${shape[rank - 1]}) {\n          result.b = getValue(${coords});\n        }\n        setOutput(result);\n      }\n    `;\n  }\n}\n\n/**\n * Return an expression for coordinates into a vector where a given channel\n * will be offset by [shift].\n *\n * @param channels the channels to consider\n * @param channel the channel we want shifted\n * @param shift  the amount to subtract from the channel.\n *\n * @returns a string of the form 'x, y-[shift], z' where any one channel can\n * have the shift applied.\n */\nfunction shiftedChannels(channels: string[], channel: string, shift: number) {\n  const channelIdx = channels.indexOf(channel);\n  const res = channels.map((c, idx) => {\n    if (idx === channelIdx) {\n      return `${c} - ${shift}`;\n    } else {\n      return c;\n    }\n  });\n  return res.join();\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Imag, ImagInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {identity} from './Identity';\n\nexport function imag(args: {inputs: ImagInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n  const inputData = backend.texData.get(input.dataId);\n\n  return identity({inputs: {x: inputData.complexTensorInfos.imag}, backend});\n}\n\nexport const imagConfig: KernelConfig = {\n  kernelName: Imag,\n  backendName: 'webgl',\n  kernelFunc: imag as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, ConcatInputs, env, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ConcatProgram} from '../concat_gpu';\nimport {ConcatPackedProgram} from '../concat_packed_gpu';\nimport {concatImplCPU} from '../kernel_utils/shared';\n\nimport {complex} from './Complex';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {reshape} from './Reshape';\n\nexport function concatImpl(\n    inputs: ConcatInputs, axis: number, backend: MathBackendWebGL): TensorInfo {\n  const dtype = inputs[0].dtype;\n  if (dtype === 'complex64') {\n    const reals = inputs.map((t) => real({inputs: {input: t}, backend}));\n    const imags = inputs.map((t) => imag({inputs: {input: t}, backend}));\n\n    const realConcated = concatImpl(reals, axis, backend);\n    const imagConcated = concatImpl(imags, axis, backend);\n\n    const result =\n        complex({inputs: {real: realConcated, imag: imagConcated}, backend});\n\n    reals.forEach(r => backend.disposeIntermediateTensorInfo(r));\n    imags.forEach(i => backend.disposeIntermediateTensorInfo(i));\n    backend.disposeIntermediateTensorInfo(realConcated);\n    backend.disposeIntermediateTensorInfo(imagConcated);\n\n    return result;\n  }\n\n  let runOnCpu = backend.shouldExecuteOnCPU(inputs);\n\n  // Run on cpu if dtype is string. For string, the backend represents it\n  // as Uint8Array[], where each Uint8Array is a character. Given that the\n  // computation is only on the outer array, uploading the whole data onto\n  // gpu is wasteful. Also, currently webgl doesn't have a design to\n  // upload and retrieve Uint8Array[] between cpu and gpu. Therefore, we\n  // just run the kernel on cpu if dtype is string.\n  if (dtype === 'string') {\n    runOnCpu = true;\n  }\n\n  if (runOnCpu) {\n    // Any concat of n-dimensional tensors across any axis can be reduced to\n    // a concatenation of two-dimensional tensors across the axis 1 by first\n    // partitioning the axes of the original tensors into those less than the\n    // axis to be concatenated and the rest. Then reshape the tensors\n    // into a two-dimensional tensor by collapsing these two sets of axes and\n    // concatenate the resulting matrices across the axis 1, finally reshaping\n    // the result to have the proper shape.\n    const tensors2D = inputs.map(t => {\n      const innerSize = util.sizeFromShape(t.shape.slice(axis));\n      const shape = [-1, innerSize];\n      return reshape({inputs: {x: t}, backend, attrs: {shape}});\n    });\n\n    const inputsValShapes = tensors2D.map(t => {\n      return {vals: backend.readSync(t.dataId), shape: t.shape};\n    });\n\n    // Concats 2d tensors along axis=1.\n    const outShape =\n        backend_util.computeOutShape(tensors2D.map(t => t.shape), 1 /* axis */);\n    const simplyConcat = tensors2D[0].shape[0] === 1;\n    const outVals =\n        concatImplCPU(inputsValShapes, outShape, dtype, simplyConcat);\n\n    const finalOutShape =\n        backend_util.computeOutShape(inputs.map(t => t.shape), axis);\n\n    const outInfo = backend.makeTensorInfo(finalOutShape, dtype, outVals);\n\n    tensors2D.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n    return outInfo;\n  }\n\n  if (inputs.length > env().getNumber('WEBGL_MAX_TEXTURES_IN_SHADER')) {\n    const midIndex = Math.floor(inputs.length / 2);\n    const leftSide = concatImpl(inputs.slice(0, midIndex), axis, backend);\n    const rightSide = concatImpl(inputs.slice(midIndex), axis, backend);\n\n    const result = concatImpl([leftSide, rightSide], axis, backend);\n\n    backend.disposeIntermediateTensorInfo(leftSide);\n    backend.disposeIntermediateTensorInfo(rightSide);\n\n    return result;\n  }\n\n  if (env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') &&\n      inputs[0].shape.length > 1) {\n    const program = new ConcatPackedProgram(inputs.map(t => t.shape), axis);\n    return backend.runWebGLProgram(program, inputs, dtype);\n  }\n\n  const {tensors2D, outShape} = computeTensors2D(inputs, axis, backend);\n  const program =\n      new ConcatProgram(tensors2D.map(t => t.shape as [number, number]));\n  const result = backend.runWebGLProgram(program, tensors2D, dtype);\n\n  tensors2D.forEach(r => backend.disposeIntermediateTensorInfo(r));\n  const reshapedResult =\n      reshape({inputs: {x: result}, attrs: {shape: outShape}, backend});\n  backend.disposeIntermediateTensorInfo(result);\n\n  return reshapedResult;\n}\n\nfunction computeTensors2D(\n    inputs: ConcatInputs, axis: number, backend: MathBackendWebGL) {\n  // Any concat of n-dimensional tensors across any axis can be reduced to\n  // a concatenation of two-dimensional tensors across the axis 1 by first\n  // partitioning the axes of the original tensors into those less than the\n  // axis to be concatenated and the rest. Then reshape the tensors\n  // into a two-dimensional tensor by collapsing these two sets of axes and\n  // concatenate the resulting matrices across the axis 1, finally reshaping\n  // the result to have the proper shape.\n  const outShape = backend_util.computeOutShape(inputs.map(t => t.shape), axis);\n  const tensors2D = inputs.map(\n      x => reshape({\n        inputs: {x},\n        attrs: {shape: [-1, util.sizeFromShape(x.shape.slice(axis))]},\n        backend\n      }));\n\n  return {tensors2D, outShape};\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Concat, ConcatAttrs, ConcatInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {concatImpl} from './Concat_impl';\nimport {identity} from './Identity';\n\nexport function concat(\n    args:\n        {inputs: ConcatInputs, attrs: ConcatAttrs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, inputs[0].shape)[0];\n  const outShape =\n      backend_util.computeOutShape(inputs.map(t => t.shape), $axis);\n\n  if (util.sizeFromShape(outShape) === 0) {\n    return backend.makeTensorInfo(outShape, inputs[0].dtype, []);\n  }\n\n  // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n  const $inputs = inputs.filter(t => util.sizeFromShape(t.shape) > 0);\n  if ($inputs.length === 1) {\n    return identity({inputs: {x: $inputs[0]}, backend});\n  }\n\n  const shapes = $inputs.map(t => t.shape);\n  backend_util.assertParamsConsistent(shapes, $axis);\n\n  return concatImpl($inputs, $axis, backend);\n}\n\nexport const concatConfig: KernelConfig = {\n  kernelName: Concat,\n  backendName: 'webgl',\n  kernelFunc: concat as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Conv2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, addBias = false,\n      activation: string = null, hasPreluActivationWeights = false,\n      hasLeakyreluAlpha = false) {\n    this.outputShape = convInfo.outShape;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n\n    const inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;\n    const inputDepthVec4Remainder = convInfo.inChannels % 4;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n    const rowDim = isChannelsLast ? 1 : 2;\n    const colDim = isChannelsLast ? 2 : 3;\n    const channelDim = isChannelsLast ? 3 : 1;\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivationWeights) {\n        activationSnippet = `float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else if (hasLeakyreluAlpha) {\n        activationSnippet = `float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `\n          float activation(float x) {\n            ${activation}\n          }\n        `;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivationWeights) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    if (hasLeakyreluAlpha) {\n      this.variableNames.push('leakyreluAlpha');\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${channelDim}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${rowDim}], coords[${colDim}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          int xR = xRCorner + wR * ${dilationHeight};\n\n          if (xR < 0 || xR >= ${convInfo.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            int xC = xCCorner + wC * ${dilationWidth};\n\n            if (xC < 0 || xC >= ${convInfo.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${inputDepthNearestVec4}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${inputDepthVec4Remainder === 1}) {\n\n              if (${isChannelsLast}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${inputDepthNearestVec4}) *\n                    getW(wR, wC, ${inputDepthNearestVec4}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${inputDepthNearestVec4}, xR, xC) *\n                    getW(wR, wC, ${inputDepthNearestVec4}, d2);\n              }\n\n            } else if (${inputDepthVec4Remainder === 2}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${inputDepthNearestVec4}, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 1, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${inputDepthNearestVec4}, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${inputDepthVec4Remainder === 3}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${inputDepthNearestVec4}, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 1, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 2, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 1),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${inputDepthNearestVec4}, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 1, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n}\n\nexport class Conv3DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.outShape;\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n\n    const inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;\n    const inputDepthVec4Remainder = convInfo.inChannels % 4;\n\n    this.userCode = `\n      const ivec3 strides = ivec3(${strideDepth}, ${strideHeight}, ${\n        strideWidth});\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${filterDepth}; wF++) {\n          int xF = xFCorner + wF * ${dilationDepth};\n\n          if (xF < 0 || xF >= ${convInfo.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${filterHeight}; wR++) {\n            int xR = xRCorner + wR * ${dilationHeight};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${filterWidth}; wC++) {\n              int xC = xCCorner + wC * ${dilationWidth};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${inputDepthNearestVec4}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${inputDepthVec4Remainder === 1}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}) *\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2);\n              } else if (${inputDepthVec4Remainder === 2}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${inputDepthVec4Remainder === 3}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 1),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 1, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Im2ColPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      outputShape: number[], inputShape: number[],\n      convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = outputShape;\n\n    const {\n      filterWidth,\n      inChannels,\n      strideWidth,\n      strideHeight,\n      padInfo,\n      outWidth,\n      dilationWidth,\n      dilationHeight,\n      dataFormat\n    } = convInfo;\n    const {left, top} = padInfo;\n    const itemsPerBlockRow = inChannels * filterWidth;\n    const glsl = getGlslDifferences();\n    const isChannelsLast = dataFormat === 'channelsLast';\n    const rowDim = isChannelsLast ? 0 : 1;\n    const colDim = isChannelsLast ? 1 : 2;\n\n    let unrolled = ``;\n\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        unrolled += `\n          blockIndex = rc.y + ${col};\n          pos = rc.x + ${row};\n\n          if(blockIndex < ${outputShape[1]} && pos < ${outputShape[0]}) {\n            offsetY = int(blockIndex / (${outWidth})) * ${strideHeight} - ${\n            top};\n            d0 = offsetY + ${dilationHeight} * (pos / ${itemsPerBlockRow});\n\n            if(d0 < ${inputShape[rowDim]} && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), ${outWidth}.) * ${\n            strideWidth}. - ${left}.);\n              d1 = offsetX + ${dilationWidth} * (int(mod(float(pos), ${\n            itemsPerBlockRow}.) / ${inChannels}.));\n\n              if(d1 < ${inputShape[colDim]} && d1 >= 0) {\n\n                ch = int(mod(float(pos), ${inChannels}.));\n\n                if (${isChannelsLast}) {\n                  innerDims = vec2(d1, ch);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;\n      }\n    }\n\n    this.userCode = `\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${unrolled}\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Im2ColPackedProgram} from '../im2col_packed_gpu';\nimport {mapActivationToShaderProgram} from '../kernel_utils/kernel_funcs_utils';\nimport {MatMulPackedProgram} from '../mulmat_packed_gpu';\nimport * as webgl_util from '../webgl_util';\n\nimport {batchMatMulImpl, MATMUL_SHARED_DIM_THRESHOLD} from './BatchMatMul_impl';\nimport {identity} from './Identity';\nimport {reshape} from './Reshape';\n\ntype Conv2DConfig = {\n  x: TensorInfo,\n  filter: TensorInfo,\n  convInfo: backend_util.Conv2DInfo,\n  backend: MathBackendWebGL,\n  bias?: TensorInfo,\n  preluActivationWeights?: TensorInfo,\n  leakyreluAlpha?: number,\n  activation?: backend_util.Activation\n};\n\n// For 1x1 kernels that iterate through every point in the input, convolution\n// can be expressed as matrix multiplication (without need for memory\n// remapping).\nexport function conv2dByMatMul({\n  x,\n  filter,\n  convInfo,\n  backend,\n  bias = null,\n  preluActivationWeights = null,\n  leakyreluAlpha = 0,\n  activation = null\n}: Conv2DConfig) {\n  // Reshapes conv2D input to 2D tensors, uses matMul and then reshape the\n  // result from 2D to 4D.\n  const xShape = x.shape;\n  const xTexData = backend.texData.get(x.dataId);\n  const sharedMatMulDim = convInfo.inChannels;\n  const outerShapeX = xShape[0] * xShape[1] * xShape[2];\n  const outerShapeFilter = convInfo.outChannels;\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n  const transposeA = false;\n  const transposeB = false;\n\n  let out: TensorInfo;\n  const intermediates: TensorInfo[] = [];\n\n  // TODO: Once reduction ops are packed, batchMatMul will always be packed\n  // and we can remove this condition.\n  const batchMatMulWillBeUnpacked =\n      (outerShapeX === 1 || outerShapeFilter === 1) &&\n      sharedMatMulDim > MATMUL_SHARED_DIM_THRESHOLD;\n  const reshapeWillBeExpensive = xShape[2] % 2 !== 0 && !!xTexData.isPacked;\n\n  if (batchMatMulWillBeUnpacked || !env().getBool('WEBGL_LAZILY_UNPACK') ||\n      !env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ||\n      !reshapeWillBeExpensive) {\n    const targetShape = isChannelsLast ? xShape[0] * xShape[1] * xShape[2] :\n                                         xShape[0] * xShape[2] * xShape[3];\n    const xReshaped = reshape({\n      inputs: {x},\n      backend,\n      attrs: {shape: [1, targetShape, convInfo.inChannels]}\n    });\n    const filterReshaped = reshape({\n      inputs: {x: filter},\n      backend,\n      attrs: {shape: [1, convInfo.inChannels, convInfo.outChannels]}\n    });\n    const result = batchMatMulImpl({\n      a: xReshaped,\n      b: filterReshaped,\n      transposeA,\n      transposeB,\n      backend,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n\n    out = reshape(\n        {inputs: {x: result}, backend, attrs: {shape: convInfo.outShape}});\n\n    intermediates.push(xReshaped);\n    intermediates.push(filterReshaped);\n    intermediates.push(result);\n  } else {\n    // Following optimization is specific to packed |x| with odd row count\n    // (For example, in channelLast mode, 'row count' refers to x.shape[2]):\n    // we avoid expensive packed 2x2 reshape by padding row count to next,\n    // even number. When x.shape[2] is odd, the result of packed batchMatMul is\n    // the same (has the same texture layout and and values in the texture) as\n    // it is for even x.shape[2] + 1. We make the odd-rows tensor to look like\n    // even-rows tensor before the operation and, after the batchMatMul,\n    // fix the even-rows result to have odd number of rows.\n    const targetShape = isChannelsLast ?\n        xShape[0] * xShape[1] * (xShape[2] + 1) :\n        xShape[0] * xShape[2] * (xShape[3] + 1);\n    const xReshaped: TensorInfo = {\n      dataId: x.dataId,\n      shape: [1, targetShape, convInfo.inChannels],\n      dtype: x.dtype\n    };\n    // xTexData.shape gets referenced from GPGPUBinary.inShapeInfos.\n    // Decrementing row count, after batchMatMul->...->compileProgram leads to\n    // invalid row count within the reference in GPGPUBinary.inShapeInfos.\n    // Alternative fix would be to provide a copy to GPGPUBinary.inShapeInfos\n    // in compileProgram method, but that would affect compilation of all\n    // programs - instead, provide a copy here, with even row count, before\n    // calling batchMatMul->...->compileProgram and after that, the original\n    // xTexData.shape is restored.\n    const originalXTexDataShape = xTexData.shape;\n    xTexData.shape = xTexData.shape.slice();\n    xTexData.shape[xTexData.shape.length - 2]++;\n    util.assert(\n        webgl_util.isReshapeFree(xTexData.shape, xReshaped.shape),\n        () => `packed reshape ${xTexData.shape} to ${\n            xReshaped.shape} isn't free`);\n    const filterReshaped = reshape({\n      inputs: {x: filter},\n      backend,\n      attrs: {shape: [1, convInfo.inChannels, convInfo.outChannels]}\n    });\n    intermediates.push(filterReshaped);\n    const pointwiseConv = batchMatMulImpl({\n      a: xReshaped,\n      b: filterReshaped,\n      backend,\n      transposeA,\n      transposeB,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n\n    const pointwiseConvTexData = backend.texData.get(pointwiseConv.dataId);\n    util.assert(\n        pointwiseConvTexData.isPacked,\n        () => 'batchMatMul result is expected to be packed');\n    // Restore the input shape to original.\n    xTexData.shape = originalXTexDataShape;\n    // Set the output shape - there is no need for expensive reshape as data\n    // layout is already correct.\n    pointwiseConvTexData.shape = convInfo.outShape;\n\n    out = identity({inputs: {x: pointwiseConv}, backend});\n    out.shape = convInfo.outShape;\n\n    intermediates.push(pointwiseConv);\n  }\n\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n\n  return out;\n}\n\n// Implements the im2row algorithm as outlined in \"High Performance\n// Convolutional Neural Networks for Document Processing\" (Suvisoft, 2006)\nexport function conv2dWithIm2Row({\n  x,\n  filter,\n  convInfo,\n  backend,\n  bias = null,\n  preluActivationWeights = null,\n  leakyreluAlpha = 0,\n  activation = null\n}: Conv2DConfig) {\n  // Rearranges conv2d input so each block to be convolved over forms the\n  // column of a new matrix with shape [filterWidth * filterHeight *\n  // inChannels, outHeight * outWidth]. The filter is also rearranged so each\n  // output channel forms a row of a new matrix with shape [outChannels,\n  // filterWidth * filterHeight * inChannels]. The convolution is then\n  // computed by multiplying these matrices and reshaping the result.\n  const {\n    filterWidth,\n    filterHeight,\n    inChannels,\n    outWidth,\n    outHeight,\n    dataFormat\n  } = convInfo;\n\n  const isChannelsLast = dataFormat === 'channelsLast';\n\n  const sharedDim = filterWidth * filterHeight * inChannels;\n  const numCols = outHeight * outWidth;\n  const x2ColShape = [sharedDim, numCols];\n  const transposeA = true;\n  const transposeB = false;\n\n  const intermediates: TensorInfo[] = [];\n\n  const xSqueezed =\n      reshape({inputs: {x}, backend, attrs: {shape: x.shape.slice(1)}});\n  const w2Row = reshape({\n    inputs: {x: filter},\n    backend,\n    attrs: {shape: [1, sharedDim, util.sizeFromShape(filter.shape) / sharedDim]}\n  });\n\n  intermediates.push(xSqueezed);\n  intermediates.push(w2Row);\n\n  const im2ColProgram =\n      new Im2ColPackedProgram(x2ColShape, xSqueezed.shape, convInfo);\n  const im2Col = backend.runWebGLProgram(im2ColProgram, [xSqueezed], 'float32');\n  const im2ColReshaped = reshape({\n    inputs: {x: im2Col},\n    backend,\n    attrs: {shape: [1, x2ColShape[0], x2ColShape[1]]}\n  });\n\n  intermediates.push(im2Col);\n  intermediates.push(im2ColReshaped);\n\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const hasLeakyreluAlpha = activation === 'leakyrelu';\n  const fusedActivation =\n      activation ? mapActivationToShaderProgram(activation, true) : null;\n  const matmulProgram = new MatMulPackedProgram(\n      im2ColReshaped.shape as [number, number, number],\n      w2Row.shape as [number, number, number],\n      [1, numCols, convInfo.outChannels], transposeA, transposeB, hasBias,\n      fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);\n  const inputs: TensorInfo[] = [im2ColReshaped, w2Row];\n  if (bias) {\n    inputs.push(bias);\n  }\n  if (hasPreluActivationWeights) {\n    inputs.push(preluActivationWeights);\n  }\n  if (hasLeakyreluAlpha) {\n    const $leakyreluAlpha = backend.makeTensorInfo(\n        [], 'float32',\n        util.createScalarValue(leakyreluAlpha as {} as 'float32', 'float32'));\n    inputs.push($leakyreluAlpha);\n    intermediates.push($leakyreluAlpha);\n  }\n  const product = backend.runWebGLProgram(matmulProgram, inputs, 'float32');\n\n  const outShape = isChannelsLast ?\n      [1, outHeight, outWidth, convInfo.outChannels] :\n      [1, convInfo.outChannels, outHeight, outWidth];\n  const out =\n      reshape({inputs: {x: product}, backend, attrs: {shape: outShape}});\n\n  intermediates.push(product);\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n\n  return out;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2D, Conv2DAttrs, Conv2DInputs, env, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv2DProgram} from '../conv_gpu';\nimport {conv2dByMatMul, conv2dWithIm2Row} from './Conv2D_impl';\nimport {reshape} from './Reshape';\n\nexport function conv2d(\n    args:\n        {inputs: Conv2DInputs, attrs: Conv2DAttrs, backend: MathBackendWebGL}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dataFormat, dilations, dimRoundingMode} = attrs;\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, dilations, pad,\n      dimRoundingMode, false /* depthwise */, $dataFormat);\n  let out: TensorInfo;\n\n  if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 &&\n      convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n      convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&\n      (convInfo.padInfo.type === 'SAME' || convInfo.padInfo.type === 'VALID')) {\n    out = conv2dByMatMul({x, filter, convInfo, backend});\n  } else if (env().getBool('WEBGL_CONV_IM2COL') && x.shape[0] === 1) {\n    out = conv2dWithIm2Row({x, filter, convInfo, backend});\n  } else {\n    const program = new Conv2DProgram(convInfo);\n    out = backend.runWebGLProgram(program, [x, filter], 'float32');\n  }\n\n  const outReshaped =\n      reshape({inputs: {x: out}, backend, attrs: {shape: convInfo.outShape}});\n  backend.disposeIntermediateTensorInfo(out);\n\n  return outReshaped;\n}\n\nexport const conv2DConfig: KernelConfig = {\n  kernelName: Conv2D,\n  backendName: 'webgl',\n  kernelFunc: conv2d as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Conv2DDerFilterProgram implements GPGPUProgram {\n  variableNames = ['x', 'dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.filterShape;\n\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n            int xR = wR + yR * ${strideHeight} - ${padTop};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n              int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              if (${isChannelsLast}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class Conv2DDerInputProgram implements GPGPUProgram {\n  variableNames = ['dy', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n    const padTop = filterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n\n    const rowDim = isChannelsLast ? 1 : 2;\n    const colDim = isChannelsLast ? 2 : 3;\n    const channelDim = isChannelsLast ? 3 : 1;\n\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${channelDim}];\n\n        ivec2 dyCorner = ivec2(coords[${rowDim}], coords[${colDim}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${filterHeight} - 1 - wR;\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${filterWidth} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${convInfo.outChannels}; d2++) {\n\n              if (${isChannelsLast}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class Conv3DDerFilterProgram implements GPGPUProgram {\n  variableNames = ['x', 'dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.filterShape;\n\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n\n    this.userCode = `\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yF = 0; yF < ${convInfo.outDepth}; yF++) {\n            int xF = wF + yF * ${strideDepth} - ${padFront};\n\n            if (xF < 0 || xF >= ${convInfo.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n              int xR = wR + yR * ${strideHeight} - ${padTop};\n\n              if (xR < 0 || xR >= ${convInfo.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n                int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n                if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class Conv3DDerInputProgram implements GPGPUProgram {\n  variableNames = ['dy', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n\n    const padFront = filterDepth - 1 - convInfo.padInfo.front;\n    const padTop = filterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n\n    this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${filterDepth}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${strideDepth}.0;\n\n          if (dyF < 0.0 || dyF >= ${convInfo.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${filterDepth} - 1 - wF;\n\n          for (int wR = 0; wR < ${filterHeight}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${filterHeight} - 1 - wR;\n\n            for (int wC = 0; wC < ${filterWidth}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${filterWidth} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${convInfo.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropFilter, Conv2DBackpropFilterAttrs, Conv2DBackpropFilterInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv2DDerFilterProgram} from '../conv_backprop_gpu';\n\nexport function conv2DBackpropFilter(args: {\n  inputs: Conv2DBackpropFilterInputs,\n  attrs: Conv2DBackpropFilterAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, dataFormat, dimRoundingMode, filterShape} = attrs;\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad, dimRoundingMode, false /* depthwise */,\n      $dataFormat);\n\n  const program = new Conv2DDerFilterProgram(convInfo);\n  return backend.runWebGLProgram(program, [x, dy], 'float32');\n}\n\nexport const conv2DBackpropFilterConfig: KernelConfig = {\n  kernelName: Conv2DBackpropFilter,\n  backendName: 'webgl',\n  kernelFunc: conv2DBackpropFilter as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropInput, Conv2DBackpropInputAttrs, Conv2DBackpropInputInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv2DDerInputProgram} from '../conv_backprop_gpu';\n\nexport function conv2DBackpropInput(args: {\n  inputs: Conv2DBackpropInputInputs,\n  attrs: Conv2DBackpropInputAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {inputShape, strides, pad, dataFormat, dimRoundingMode} = attrs;\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      1 /* dilations */, pad, dimRoundingMode, false, $dataFormat);\n\n  const program = new Conv2DDerInputProgram(convInfo);\n  return backend.runWebGLProgram(program, [dy, filter], 'float32');\n}\n\nexport const conv2DBackpropInputConfig: KernelConfig = {\n  kernelName: Conv2DBackpropInput,\n  backendName: 'webgl',\n  kernelFunc: conv2DBackpropInput as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3D, Conv3DAttrs, Conv3DInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv3DProgram} from '../conv_gpu';\n\nexport function conv3D(\n    args:\n        {inputs: Conv3DInputs, attrs: Conv3DAttrs, backend: MathBackendWebGL}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations} = attrs;\n\n  const convInfo = backend_util.computeConv3DInfo(\n      x.shape as [number, number, number, number, number],\n      filter.shape as [number, number, number, number, number], strides,\n      dilations, pad);\n\n  const program = new Conv3DProgram(convInfo);\n  return backend.runWebGLProgram(program, [x, filter], 'float32');\n}\n\nexport const conv3DConfig: KernelConfig = {\n  kernelName: Conv3D,\n  backendName: 'webgl',\n  kernelFunc: conv3D as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3DBackpropFilterV2, Conv3DBackpropFilterV2Attrs, Conv3DBackpropFilterV2Inputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv3DDerFilterProgram} from '../conv_backprop_gpu';\n\nexport function conv3DBackpropFilterV2(args: {\n  inputs: Conv3DBackpropFilterV2Inputs,\n  attrs: Conv3DBackpropFilterV2Attrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, filterShape} = attrs;\n\n  const convInfo = backend_util.computeConv3DInfo(\n      x.shape as [number, number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad);\n\n  const program = new Conv3DDerFilterProgram(convInfo);\n  return backend.runWebGLProgram(program, [x, dy], 'float32');\n}\n\nexport const conv3DBackpropFilterV2Config: KernelConfig = {\n  kernelName: Conv3DBackpropFilterV2,\n  backendName: 'webgl',\n  kernelFunc: conv3DBackpropFilterV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3DBackpropInputV2, Conv3DBackpropInputV2Attrs, Conv3DBackpropInputV2Inputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv3DDerInputProgram} from '../conv_backprop_gpu';\n\nexport function conv3DBackpropInput(args: {\n  inputs: Conv3DBackpropInputV2Inputs,\n  attrs: Conv3DBackpropInputV2Attrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {pad, strides, inputShape} = attrs;\n\n  const convInfo = backend_util.computeConv3DInfo(\n      inputShape, filter.shape as [number, number, number, number, number],\n      strides, 1 /* dilations */, pad);\n\n  const program = new Conv3DDerInputProgram(convInfo);\n  return backend.runWebGLProgram(program, [dy, filter], 'float32');\n}\n\nexport const conv3DBackpropInputConfig: KernelConfig = {\n  kernelName: Conv3DBackpropInputV2,\n  backendName: 'webgl',\n  kernelFunc: conv3DBackpropInput as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cos, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst COS = CHECK_NAN_SNIPPET_UNARY + `\n  return cos(x);\n`;\n\nexport const cos = unaryKernelFunc({opSnippet: COS});\n\nexport const cosConfig: KernelConfig = {\n  kernelName: Cos,\n  backendName: 'webgl',\n  kernelFunc: cos,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cosh, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst COSH = `\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n`;\n\nexport const cosh = unaryKernelFunc({opSnippet: COSH});\n\nexport const coshConfig: KernelConfig = {\n  kernelName: Cosh,\n  backendName: 'webgl',\n  kernelFunc: cosh,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class CropAndResizeProgram implements GPGPUProgram {\n  variableNames = ['Image', 'Boxes', 'BoxInd'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      imageShape: [number, number, number, number], boxShape: [number, number],\n      cropSize: [number, number], method: 'bilinear'|'nearest',\n      extrapolationValue: number) {\n    const [batch, imageHeight, imageWidth, depth] = imageShape;\n    const [numBoxes, ] = boxShape;\n    const [cropHeight, cropWidth] = cropSize;\n    this.outputShape = [numBoxes, cropHeight, cropWidth, depth];\n    const methodId = method === 'bilinear' ? 1 : 0;\n\n    const [inputHeightFloat, inputWidthFloat] =\n        [`${imageHeight - 1}.0`, `${imageWidth - 1}.0`];\n\n    const [heightRatio, heightScale, inY] = cropHeight > 1 ?\n        [\n          `${(imageHeight - 1) / (cropHeight - 1)}`,\n          '(y2-y1) * height_ratio',\n          `y1*${inputHeightFloat} + float(y)*(height_scale)`,\n        ] :\n        [\n          '0.0',\n          '0.0',\n          `0.5 * (y1+y2) * ${inputHeightFloat}`,\n        ];\n    const [widthRatio, widthScale, inX] = cropWidth > 1 ?\n        [\n          `${(imageWidth - 1) / (cropWidth - 1)}`,\n          '(x2-x1) * width_ratio',\n          `x1*${inputWidthFloat} + float(x)*(width_scale)`,\n        ] :\n        [\n          '0.0',\n          '0.0',\n          `0.5 * (x1+x2) * ${inputWidthFloat}`,\n        ];\n\n    // Reference implementation\n    // tslint:disable-next-line:max-line-length\n    // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op_gpu.cu.cc\n    this.userCode = `\n      const float height_ratio = float(${heightRatio});\n      const float width_ratio = float(${widthRatio});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${batch}) {\n          return;\n        }\n\n        float height_scale = ${heightScale};\n        float width_scale = ${widthScale};\n\n        float in_y = ${inY};\n        if( in_y < 0.0 || in_y > ${inputHeightFloat} ) {\n          setOutput(float(${extrapolationValue}));\n          return;\n        }\n        float in_x = ${inX};\n        if( in_x < 0.0 || in_x > ${inputWidthFloat} ) {\n          setOutput(float(${extrapolationValue}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${methodId} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {CropAndResize, CropAndResizeAttrs, CropAndResizeInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {CropAndResizeProgram} from '../crop_and_resize_gpu';\n\nexport const cropAndResize = (args: {\n  inputs: CropAndResizeInputs,\n  backend: MathBackendWebGL,\n  attrs: CropAndResizeAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {image, boxes, boxInd} = inputs;\n  const {cropSize, method, extrapolationValue} = attrs;\n\n  const program = new CropAndResizeProgram(\n      image.shape as [number, number, number, number],\n      boxes.shape as [number, number], cropSize, method, extrapolationValue);\n  return backend.runWebGLProgram(program, [image, boxes, boxInd], 'float32');\n};\n\nexport const cropAndResizeConfig: KernelConfig = {\n  kernelName: CropAndResize,\n  backendName: 'webgl',\n  kernelFunc: cropAndResize as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType, UniformType} from './shader_compiler';\n\nexport class CumSumProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n  customUniforms = [{name: 'index', type: 'float' as UniformType}];\n\n  constructor(shape: number[], exclusive: boolean, reverse: boolean) {\n    this.outputShape = shape;\n    const rank = shape.length;\n    const val = exclusive ? '0.0' : `getX(${getCoords(rank, 'coords')})`;\n    const length = shape[shape.length - 1];\n    let condition = '';\n    let idxString = '';\n    // When exclusive is set, the cumsum op becomes roll op that copies the\n    // value from the previous index based on the direction specified by the\n    // reverse flag.\n    if (exclusive) {\n      condition = reverse ? `end != ${length - 1}` : 'end != 0';\n      idxString = reverse ? 'end + 1' : 'end - 1';\n    } else {\n      condition = reverse ? `end + pow2 < ${length}` : 'end >= pow2';\n      idxString = (reverse ? 'end + pow2' : 'end - pow2');\n    }\n\n    this.userCode = `\n      void main() {\n        ${getCoordsDataType(rank)} coords = getOutputCoords();\n        int end = ${getFinalCoord(rank, 'coords')};\n        float val = ${val};\n        int pow2 = int(pow(2.0, index));\n        if (${condition}) {\n          int idx = ${idxString};\n          ${getFinalCoord(rank, 'coords')} = idx;\n          val += getX(${getCoords(rank, 'coords')});\n        }\n        setOutput(val);\n      }\n    `;\n  }\n}\n\nfunction getCoords(rank: number, name: string): string {\n  if (rank === 1) {\n    return `${name}`;\n  } else if (rank === 2) {\n    return `${name}.x, ${name}.y`;\n  } else if (rank === 3) {\n    return `${name}.x, ${name}.y, ${name}.z`;\n  } else if (rank === 4) {\n    return `${name}.x, ${name}.y, ${name}.z, ${name}.w`;\n  } else {\n    throw Error(`Cumulative sum for rank ${rank} is not yet supported`);\n  }\n}\n\nfunction getFinalCoord(rank: number, name: string): string {\n  if (rank === 1) {\n    return `${name}`;\n  } else if (rank === 2) {\n    return `${name}.y`;\n  } else if (rank === 3) {\n    return `${name}.z`;\n  } else if (rank === 4) {\n    return `${name}.w`;\n  } else {\n    throw Error(`Cumulative sum for rank ${rank} is not yet supported`);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Cumsum, CumsumAttrs, CumsumInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {CumSumProgram} from '../cumsum_gpu';\n\nimport {identity} from './Identity';\nimport {transpose} from './Transpose';\n\nexport function cumsum(\n    args:\n        {inputs: CumsumInputs, backend: MathBackendWebGL, attrs: CumsumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, exclusive, reverse} = attrs;\n\n  const xRank = x.shape.length;\n  const permutation = backend_util.getAxesPermutation([axis], xRank);\n  let permutedX = x;\n  if (permutation != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n  }\n  const permutedAxis = backend_util.getInnerMostAxes(1, xRank)[0];\n\n  if (permutedAxis !== xRank - 1) {\n    throw new Error(\n        `WebGL cumsum shader expects an inner-most axis=${\n            x.shape.length - 1} ` +\n        `but got axis=${axis}`);\n  }\n  const size = permutedX.shape[permutedAxis];\n  let result = identity({inputs: {x: permutedX}, backend});\n  // Use cumsum parallel algorithm, ref:\n  // https://developer.nvidia.com/gpugems/gpugems3/part-vi-gpu-computing/chapter-39-parallel-prefix-sum-scan-cuda\n\n  for (let i = 0; i <= Math.ceil(Math.log2(size)) - 1; i++) {\n    const program = new CumSumProgram(permutedX.shape, false, reverse);\n    const customValues = [[i]];\n    const prevResult = result;\n    result =\n        backend.runWebGLProgram(program, [result], result.dtype, customValues);\n    backend.disposeIntermediateTensorInfo(prevResult);\n  }\n  // For exclusive cumsum, shift the end result in the direction of sum\n  // and add 0 to the front index.\n  if (exclusive) {\n    const program = new CumSumProgram(permutedX.shape, exclusive, reverse);\n    const prevResult = result;\n    result = backend.runWebGLProgram(program, [result], result.dtype);\n    backend.disposeIntermediateTensorInfo(prevResult);\n  }\n\n  if (permutation != null) {\n    const reversePermutation = backend_util.getUndoAxesPermutation(permutation);\n    const reverseTransposedResult = transpose(\n        {inputs: {x: result}, backend, attrs: {perm: reversePermutation}});\n\n    backend.disposeIntermediateTensorInfo(result);\n    backend.disposeIntermediateTensorInfo(permutedX);\n\n    return reverseTransposedResult;\n  }\n\n  return result;\n}\n\nexport const cumsumConfig: KernelConfig = {\n  kernelName: Cumsum,\n  backendName: 'webgl',\n  kernelFunc: cumsum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DenseBincount, DenseBincountAttrs, DenseBincountInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {bincountImplCPU, bincountReduceImplCPU} from '../kernel_utils/shared';\n\nexport function denseBincount(args: {\n  inputs: DenseBincountInputs,\n  backend: MathBackendWebGL,\n  attrs: DenseBincountAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size, binaryOutput} = attrs;\n\n  if (x.shape.length === 1) {\n    const xVals = backend.readSync(x.dataId) as TypedArray;\n    const weightsVals = backend.readSync(weights.dataId) as TypedArray;\n\n    const outVals =\n        bincountImplCPU(xVals, weightsVals, weights.dtype, weights.shape, size);\n\n    return backend.makeTensorInfo([size], weights.dtype, outVals);\n  } else if (x.shape.length === 2) {\n    const xBuf = backend.bufferSync(x);\n    const weightsBuf = backend.bufferSync(weights);\n\n    const outBuf = bincountReduceImplCPU(xBuf, weightsBuf, size, binaryOutput);\n\n    return backend.makeTensorInfo(outBuf.shape, weights.dtype, outBuf.values);\n  }\n\n  throw new Error(\n      `Error in denseBincount: input must be at most rank 2, but got rank` +\n      `${x.shape.length}.`);\n}\n\nexport const denseBincountConfig: KernelConfig = {\n  kernelName: DenseBincount,\n  backendName: 'webgl',\n  kernelFunc: denseBincount as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DepthToSpaceProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[] = [];\n  userCode: string;\n  blockSize: number;\n  dataFormat: string;\n\n  constructor(\n      outputShape: number[], blockSize: number, dataFormat: 'NHWC'|'NCHW') {\n    this.outputShape = outputShape;\n    this.blockSize = blockSize;\n    this.dataFormat = dataFormat;\n    this.userCode = `\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${blockSize};\n      int offset_h = imod(h, ${blockSize});\n      int in_w = w / ${blockSize};\n      int offset_w = imod(w, ${blockSize});\n      int offset_d = (offset_h * ${blockSize} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `;\n  }\n\n  private getHeightCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[1]`;\n    } else {\n      return `coords[2]`;\n    }\n  }\n\n  private getWidthCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[2]`;\n    } else {\n      return `coords[3]`;\n    }\n  }\n\n  private getDepthCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[3]`;\n    } else {\n      return `coords[1]`;\n    }\n  }\n\n  private getOutputDepthSize(): number {\n    if (this.dataFormat === 'NHWC') {\n      return this.outputShape[3];\n    } else {\n      return this.outputShape[1];\n    }\n  }\n\n  private getInputSamplingString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `getX(b, in_h, in_w, in_d)`;\n    } else {\n      return `getX(b, in_d, in_h, in_w)`;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DepthToSpace, DepthToSpaceAttrs, DepthToSpaceInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthToSpaceProgram} from '../depth_to_space_gpu';\n\nexport function depthToSpace(args: {\n  inputs: DepthToSpaceInputs,\n  backend: MathBackendWebGL,\n  attrs: DepthToSpaceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockSize, dataFormat} = attrs;\n\n  util.assert(\n      blockSize > 1,\n      () => `blockSize should be > 1 for depthToSpace, but was: ${blockSize}`);\n\n  const batchSize = x.shape[0];\n  const inputHeight = (dataFormat === 'NHWC') ? x.shape[1] : x.shape[2];\n  const inputWidth = (dataFormat === 'NHWC') ? x.shape[2] : x.shape[3];\n  const inputDepth = (dataFormat === 'NHWC') ? x.shape[3] : x.shape[1];\n\n  const outputHeight = inputHeight * blockSize;\n  const outputWidth = inputWidth * blockSize;\n  const outputDepth = inputDepth / (blockSize * blockSize);\n\n  const outputShape = (dataFormat === 'NHWC') ?\n      [batchSize, outputHeight, outputWidth, outputDepth] :\n      [batchSize, outputDepth, outputHeight, outputWidth];\n\n  const program = new DepthToSpaceProgram(outputShape, blockSize, dataFormat);\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const depthToSpaceConfig: KernelConfig = {\n  kernelName: DepthToSpace,\n  backendName: 'webgl',\n  kernelFunc: depthToSpace as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DepthwiseConv2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, addBias = false,\n      activation: string = null, hasPreluActivation = false,\n      hasLeakyReluAlpha = false) {\n    this.outputShape = convInfo.outShape;\n\n    const xNumRows = convInfo.inHeight;\n    const xNumCols = convInfo.inWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivation) {\n        activationSnippet = `float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else if (hasLeakyReluAlpha) {\n        activationSnippet = `float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `\n          float activation(float x) {\n            ${activation}\n          }\n        `;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n    if (hasLeakyReluAlpha) {\n      this.variableNames.push('leakyreluAlpha');\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${channelMul};\n        int q = d2 - d1 * ${channelMul};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          int xR = xRCorner + wR * ${dilationHeight};\n\n          if (xR < 0 || xR >= ${xNumRows}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            int xC = xCCorner + wC * ${dilationWidth};\n\n            if (xC < 0 || xC >= ${xNumCols}) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DepthwiseConvPacked2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, addBias = false,\n      activation: string = null, hasPreluActivation = false,\n      hasLeakyReluAlpha = false) {\n    this.outputShape = convInfo.outShape;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n    const xNumRows = convInfo.inHeight;\n    const xNumCols = convInfo.inWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const texelsAcross = filterWidth;\n\n    let mainLoop = `\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;`;\n\n    for (let c = 0; c < filterWidth; c++) {\n      mainLoop += `\n          vec4 xTexelC${c * 2};\n          int xTexelC${c * 2}Ready;\n          vec4 xTexelC${c * 2 + 1};\n          int xTexelC${c * 2 + 1}Ready;\n          vec4 xC${c};`;\n    }\n\n    /**\n     * This vectorized implementation works by gathering the values needed for\n     * each output channel's dot product into vec4's and then multiplying them\n     * all together (this happens in the final double for-loop below). Most of\n     * the main loop consists of constructing these vec4's with the minimum\n     * number of texture2D calls, which means making use of all four returned\n     * values from a texture2D call at once.\n     */\n    for (let r = 0; r < filterHeight; r++) {\n      for (let c = 0; c < filterWidth; c++) {\n        mainLoop += `\n          xTexelC${c * 2} = vec4(0.0);\n          xTexelC${c * 2}Ready = 0;\n          xTexelC${c * 2 + 1} = vec4(0.0);\n          xTexelC${c * 2 + 1}Ready = 0;\n          xC${c} = vec4(0.0);`;\n      }\n      mainLoop += `\n        xR = xRCorner + ${r * dilationHeight};\n        if (xR >=0 && xR < ${xNumRows}) {\n      `;\n\n      for (let texelC = 0; texelC < (texelsAcross + 1) / 2; texelC++) {\n        const colIndex = texelC * 2;\n        const c = colIndex * dilationWidth;\n\n        mainLoop += `\n          xC = xCCorner + ${c};\n          `;\n\n        if (strideWidth === 1) {\n          if (colIndex < filterWidth) {\n            // If padding is odd, the outer texels have to be composed.\n            if (padLeft % 2 === 1) {\n              // TODO: Ensure vec4 previous does not result in redundant sample,\n              // and avoid setting xTexelRC's that exceed the boundary in the\n              // first place rather than resetting them to vec4(0)).\n\n              // To compute xCOffset:\n              // - If padding is odd, we must add 1 to ensure we ask for an\n              // even-numbered row.\n              // - We subtract 2 to access the previous texel.\n\n              mainLoop += `\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < ${xNumCols} && xTexelC${\n                  colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= ${xNumCols}) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n              `;\n              // This texel has been read in previous iteration if the dilation\n              // is 1.\n              if (dilationWidth === 1 && c > 0) {\n                mainLoop += `\n                xC${colIndex} = vec4(xTexelC${colIndex - 2}.zw, xTexelC${\n                    colIndex}.xy);\n                `;\n              } else {\n                mainLoop += `\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= ${xNumCols}) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${colIndex} = vec4(previous.zw, xTexelC${colIndex}.xy);\n                  } else {\n                    xC${colIndex} = vec4(0.0, 0.0, xTexelC${colIndex}.xy);\n                  }\n                  `;\n              }\n            } else {\n              // Padding is even, so xRC corresponds to a single texel.\n              mainLoop += `\n                if (xC >= 0 && xC < ${xNumCols} && xTexelC${\n                  colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= ${xNumCols}) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n\n                xC${colIndex} = xTexelC${colIndex};\n                `;\n            }\n\n            if (c + 1 < filterWidth) {\n              // If dilation is even, the second entry should match the first\n              // (either both are composed or both are single samples). But if\n              // dilation is odd, then the second entry should be the opposite\n              // of the first (if the first is composed, the second is a single\n              // sample, and vice versa.)\n\n              const nextTexelOffset = padLeft % 2 === 0 ?\n                  util.nearestLargerEven(dilationWidth) :\n                  dilationWidth;\n\n              if ((dilationWidth % 2 === 0 && padLeft % 2 === 1) ||\n                  (dilationWidth % 2 !== 0 && padLeft % 2 !== 1)) {\n                mainLoop += `\n                  xCOffset = xC + ${padLeft % 2} + ${nextTexelOffset};\n\n                  if (xCOffset >= 0 && xCOffset < ${xNumCols} && xTexelC${\n                    colIndex + 1}Ready == 0) {\n                    xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= ${xNumCols}) {\n                      xTexelC${colIndex + 1}.zw = vec2(0.0);\n                    }\n                    xTexelC${colIndex + 1}Ready = 1;\n                  }\n                  `;\n\n                // If dilation > 1 then the xRC's will not be able to share any\n                // values, so each xRC will require two unique calls to getX.\n                if (dilationWidth > 1) {\n                  mainLoop += `\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < ${xNumCols} && xTexelC${\n                      colIndex}Ready == 0) {\n                      xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);\n                      xTexelC${colIndex}Ready = 1;\n                    }\n                    `;\n                }\n\n                mainLoop += `\n                  xC${colIndex + 1} = vec4(xTexelC${colIndex}.zw, xTexelC${\n                    colIndex + 1}.xy);\n                  `;\n              } else {\n                // If dilation is 1 and padding is odd, we have already read the\n                // texel when constructing the previous x value. Here we can\n                // simply skip the texture read.\n                if (nextTexelOffset === 1) {\n                  mainLoop += `\n                    xC${colIndex + 1} = xTexelC${colIndex};\n                    `;\n                } else {\n                  mainLoop += `\n                    xCOffset = xC + ${nextTexelOffset};\n\n                    if (xCOffset >= 0 && xCOffset < ${xNumCols} && xTexelC${\n                      colIndex + 1}Ready == 0) {\n                      xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= ${xNumCols}) {\n                        xTexelC${colIndex + 1}.zw = vec2(0.0);\n                      }\n                      xTexelC${colIndex + 1}Ready = 1;\n                    }\n\n                    xC${colIndex + 1} = xTexelC${colIndex + 1};\n                    `;\n                }\n              }\n            }\n          }\n        } else {  // stride === 2\n          if (c < filterWidth) {\n            // Depending on whether padLeft is even or odd, we want either the\n            // xy or zw channels from X texels for xC${colIndex}. If padLeft is\n            // even, xC${colIndex +1} is simply the zw channels of texels we've\n            // already sampled. But if padLeft is odd, xC{$c + 1}.zw will\n            // need to come from the xy channels of a new texel, hence the `\n            // vec4\n            // final` initialized below.\n            if (padLeft % 2 === 1) {\n              mainLoop += `\n                xCOffset = xC + 1 - ${strideWidth};\n                if(xCOffset >= 0 && xCOffset < ${xNumCols} && xTexelC${\n                  colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= ${xNumCols}) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < ${xNumCols} && xTexelC${\n                  colIndex + 1}Ready == 0) {\n                  xTexelC${colIndex + 1} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= ${xNumCols}) {\n                    xTexelC${colIndex + 1}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex + 1}Ready = 1;\n                }\n\n                xC${colIndex} = vec4(xTexelC${colIndex}.zw, xTexelC${\n                  colIndex + 1}.zw);\n              `;\n\n              if (c + 1 < filterWidth) {\n                mainLoop += `\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + ${strideWidth};\n                  if(xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${colIndex + 1} = vec4(xTexelC${colIndex + 1}.xy, final.xy);\n                `;\n              }\n            } else {\n              mainLoop += `\n                if(xC >= 0 && xC < ${xNumCols} && xTexelC${\n                  colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= ${xNumCols}) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n\n                xCOffset = xC + ${strideWidth};\n                if(xCOffset >= 0 && xCOffset < ${xNumCols} && xTexelC${\n                  colIndex + 1}Ready == 0) {\n                  xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= ${xNumCols}) {\n                    xTexelC${colIndex + 1}.zw = vec2(0.);\n                  }\n                  xTexelC${colIndex + 1}Ready = 1;\n                }\n\n                xC${colIndex} = vec4(\n                  xTexelC${colIndex}.xy, xTexelC${colIndex + 1}.xy);\n              `;\n\n              if (c + 1 < filterWidth) {\n                mainLoop += `\n                  xC${colIndex + 1} = vec4(xTexelC${colIndex}.zw, xTexelC${\n                    colIndex + 1}.zw);\n                `;\n              }\n            }\n          }\n        }\n\n        // localize the dotProd accumulation within the loop, the theory is for\n        // GPU with limited cache, accumulate sum across large amount of\n        // veriables will cause lots of cache misses. (i.e. 5x5 filter will have\n        // 50 variables)\n        if (colIndex < filterWidth) {\n          mainLoop += `\n            wTexel = getW(${r}, ${c}, d1, q);\n            dotProd += xC${colIndex} * vec4(wTexel.xz, wTexel.xz);\n          `;\n\n          if (c + 1 < filterWidth) {\n            mainLoop += `\n              wTexel = getW(${r}, ${c + 1}, d1, q);\n              dotProd += xC${colIndex + 1} * vec4(wTexel.xz, wTexel.xz);\n            `;\n          }\n        }\n      }\n      mainLoop += `\n        }\n      `;\n    }\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivation) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else if (hasLeakyReluAlpha) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `vec4 activation(vec4 x) {\n          ${activation}\n        }`;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n    if (hasLeakyReluAlpha) {\n      this.variableNames.push('leakyreluAlpha');\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${channelMul};\n        int q = d2 - d1 * ${channelMul};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${mainLoop}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNative, DepthwiseConv2dNativeAttrs, DepthwiseConv2dNativeInputs, env, KernelConfig, KernelFunc, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthwiseConv2DProgram} from '../conv_gpu_depthwise';\nimport {DepthwiseConvPacked2DProgram} from '../conv_packed_gpu_depthwise';\n\nexport function depthwiseConv2dNative(args: {\n  inputs: DepthwiseConv2dNativeInputs,\n  attrs: DepthwiseConv2dNativeAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations, dimRoundingMode} = attrs;\n\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, $dilations),\n      () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n          `1. Got strides ${strides} and dilations '${$dilations}'`);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, $dilations,\n      pad, dimRoundingMode, true /* depthwise */);\n\n  let program: DepthwiseConv2DProgram|DepthwiseConvPacked2DProgram;\n  if (env().getBool('WEBGL_PACK_DEPTHWISECONV') && convInfo.strideWidth <= 2 &&\n      convInfo.outChannels / convInfo.inChannels === 1) {\n    program = new DepthwiseConvPacked2DProgram(convInfo);\n  } else {\n    program = new DepthwiseConv2DProgram(convInfo);\n  }\n  return backend.runWebGLProgram(program, [x, filter], 'float32');\n}\n\nexport const depthwiseConv2dNativeConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNative,\n  backendName: 'webgl',\n  kernelFunc: depthwiseConv2dNative as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DepthwiseConv2DDerFilterProgram implements GPGPUProgram {\n  variableNames = ['x', 'dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.filterShape;\n\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${channelMul} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n            int xR = wR + yR * ${strideHeight} - ${padTop};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n              int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class DepthwiseConv2DDerInputProgram implements GPGPUProgram {\n  variableNames = ['dy', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n\n    const padTop = filterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${filterHeight} - 1 - wR;\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${filterWidth} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${channelMul}; dm++) {\n              int d2 = d1 * ${channelMul} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropFilter, DepthwiseConv2dNativeBackpropFilterAttrs, DepthwiseConv2dNativeBackpropFilterInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthwiseConv2DDerFilterProgram} from '../conv_backprop_gpu_depthwise';\n\nexport function depthwiseConv2dNativeBackpropFilter(args: {\n  inputs: DepthwiseConv2dNativeBackpropFilterInputs,\n  attrs: DepthwiseConv2dNativeBackpropFilterAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, filterShape} = attrs;\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const program = new DepthwiseConv2DDerFilterProgram(convInfo);\n  return backend.runWebGLProgram(program, [x, dy], 'float32');\n}\n\nexport const depthwiseConv2dNativeBackpropFilterConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropFilter,\n  backendName: 'webgl',\n  kernelFunc: depthwiseConv2dNativeBackpropFilter as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropInput, DepthwiseConv2dNativeBackpropInputAttrs, DepthwiseConv2dNativeBackpropInputInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthwiseConv2DDerInputProgram} from '../conv_backprop_gpu_depthwise';\n\nexport function depthwiseConv2dNativeBackpropInput(args: {\n  inputs: DepthwiseConv2dNativeBackpropInputInputs,\n  attrs: DepthwiseConv2dNativeBackpropInputAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, inputShape} = attrs;\n\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const program = new DepthwiseConv2DDerInputProgram(convInfo);\n  return backend.runWebGLProgram(program, [dy, filter], 'float32');\n}\n\nexport const depthwiseConv2dNativeBackpropInputConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropInput,\n  backendName: 'webgl',\n  kernelFunc: depthwiseConv2dNativeBackpropInput as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DiagProgram implements GPGPUProgram {\n  variableNames = ['X'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(size: number) {\n    this.outputShape = [size, size];\n    this.userCode = `\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Diag, DiagInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DiagProgram} from '../diag_gpu';\nimport {reshape} from './Reshape';\n\nexport function diag(args: {inputs: DiagInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  const outShape = [...x.shape, ...x.shape];\n  const xSize = util.sizeFromShape(x.shape);\n\n  const flat = reshape({inputs: {x}, backend, attrs: {shape: [xSize]}});\n\n  const program = new DiagProgram(xSize);\n  const res = backend.runWebGLProgram(program, [flat], flat.dtype);\n\n  const out = reshape({inputs: {x: res}, backend, attrs: {shape: outShape}});\n\n  backend.disposeIntermediateTensorInfo(flat);\n  backend.disposeIntermediateTensorInfo(res);\n\n  return out;\n}\n\nexport const diagConfig: KernelConfig = {\n  kernelName: Diag,\n  backendName: 'webgl',\n  kernelFunc: diag as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Dilation2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.outShape;\n\n    const {\n      inHeight,\n      inWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth\n    } = convInfo;\n\n    const {top: padTop, left: padLeft} = padInfo;\n\n    this.userCode = `\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${filterHeight}; h++) {\n          int hIn = hBeg + h * ${dilationHeight};\n\n          if (hIn >= 0 && hIn < ${inHeight}) {\n            for (int w = 0; w < ${filterWidth}; w++) {\n              int wIn = wBeg + w * ${dilationWidth};\n\n              if (wIn >= 0 && wIn < ${inWidth}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2D, Dilation2DAttrs, Dilation2DInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Dilation2DProgram} from '../dilation_gpu';\nimport {reshape} from './Reshape';\n\nexport function dilation2D(args: {\n  inputs: Dilation2DInputs,\n  attrs: Dilation2DAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations} = attrs;\n\n  const convInfo = backend_util.computeDilation2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number], strides, pad,\n      'NHWC' /* dataFormat */, dilations);\n  let out: TensorInfo;\n\n  const program = new Dilation2DProgram(convInfo);\n  out = backend.runWebGLProgram(program, [x, filter], 'float32');\n\n  const outReshaped =\n      reshape({inputs: {x: out}, backend, attrs: {shape: convInfo.outShape}});\n  backend.disposeIntermediateTensorInfo(out);\n\n  return outReshaped;\n}\n\nexport const dilation2DConfig: KernelConfig = {\n  kernelName: Dilation2D,\n  backendName: 'webgl',\n  kernelFunc: dilation2D as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Einsum, EinsumAttrs, EinsumInputs, KernelConfig, KernelFunc, Tensor, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {multiply} from './Multiply';\nimport {reshape} from './Reshape';\nimport {sum} from './Sum';\nimport {transpose} from './Transpose';\n\nexport function einsum(\n    args:\n        {inputs: EinsumInputs, backend: MathBackendWebGL, attrs: EinsumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {equation} = attrs;\n  const tensors = inputs as Tensor[];\n\n  const {allDims, summedDims, idDims} =\n      backend_util.decodeEinsumEquation(equation, tensors.length);\n  backend_util.checkEinsumDimSizes(allDims.length, idDims, tensors);\n  const {path, steps} = backend_util.getEinsumComputePath(summedDims, idDims);\n\n  const nSteps = steps.length;\n  let out: TensorInfo|null = null;\n  let numDimsRemaining = allDims.length;\n  const tensorsToDispose: TensorInfo[] = [];\n  for (let i = 0; i < nSteps; ++i) {\n    for (const idTerm of steps[i]) {\n      const {permutationIndices: perm, expandDims: dimsToExpand} =\n          backend_util.getEinsumPermutation(numDimsRemaining, idDims[idTerm]);\n      let x: TensorInfo;\n      if (backend_util.isIdentityPermutation(perm)) {\n        x = tensors[idTerm];\n      } else {\n        x = transpose({inputs: {x: tensors[idTerm]}, backend, attrs: {perm}});\n        tensorsToDispose.push(x);\n      }\n      const targetShape: number[] = x.shape.slice();\n      for (let k = 0; k < dimsToExpand.length; ++k) {\n        targetShape.splice(dimsToExpand[k], 0, 1);\n      }\n\n      if (!util.arraysEqual(x.shape, targetShape)) {\n        x = reshape({inputs: {x}, backend, attrs: {shape: targetShape}});\n        tensorsToDispose.push(x);\n      }\n      if (out === null) {\n        out = x;\n      } else {\n        // tslint:disable-next-line: no-unnecessary-type-assertion\n        out = multiply({inputs: {a: x, b: out}, backend}) as TensorInfo;\n        tensorsToDispose.push(out);\n      }\n    }\n    if (i < nSteps - 1) {\n      if (path[i] >= 0) {\n        out = sum({\n          inputs: {x: out},\n          backend,\n          attrs: {\n            axis: path[i] - (allDims.length - numDimsRemaining),\n            keepDims: false\n          }\n        });\n        tensorsToDispose.push(out);\n      }\n      numDimsRemaining--;\n    }\n  }\n\n  // Clean up intermediate tensors.\n  for (const tensorInfo of tensorsToDispose) {\n    if (tensorInfo === out) {\n      continue;\n    }\n    backend.disposeIntermediateTensorInfo(tensorInfo);\n  }\n\n  return out;\n}\n\nexport const einsumConfig: KernelConfig = {\n  kernelName: Einsum,\n  backendName: 'webgl',\n  kernelFunc: einsum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Elu, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst ELU = `return (x >= 0.0) ? x : (exp(x) - 1.0);`;\n\nconst ELU_PACKED = `\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n`;\n\nconst elu = unaryKernelFunc({opSnippet: ELU, packedOpSnippet: ELU_PACKED});\n\nexport const eluConfig: KernelConfig = {\n  kernelName: Elu,\n  backendName: 'webgl',\n  kernelFunc: elu as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {EluGrad, EluGradInputs, env, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\n\nconst ELU_DER = `return (b >= 1.0) ? a : a * (b + 1.0);`;\nconst ELU_DER_PACKED = `\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n`;\n\nexport const eluGrad =\n    (args: {inputs: EluGradInputs, backend: MathBackendWebGL}): TensorInfo => {\n      const {inputs, backend} = args;\n      const {dy, y} = inputs;\n\n      const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n          new BinaryOpPackedProgram(ELU_DER_PACKED, dy.shape, y.shape) :\n          new BinaryOpProgram(ELU_DER, dy.shape, y.shape);\n      return backend.runWebGLProgram(program, [dy, y], dy.dtype);\n    };\n\nexport const eluGradConfig: KernelConfig = {\n  kernelName: EluGrad,\n  backendName: 'webgl',\n  kernelFunc: eluGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Equal, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {equalImplCPU} from '../kernel_utils/shared';\nconst PACKED_EQUAL = `\n  return vec4(equal(a, b));\n`;\n\nconst EQUAL = `return float(a == b);`;\n\nexport const equal = binaryKernelFunc({\n  opSnippet: EQUAL,\n  packedOpSnippet: PACKED_EQUAL,\n  dtype: 'bool',\n  cpuKernelImpl: equalImplCPU,\n});\n\nexport const equalConfig: KernelConfig = {\n  kernelName: Equal,\n  backendName: 'webgl',\n  kernelFunc: equal as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Erf, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst ERF = `\n  // Error function is calculated approximately with elementary function.\n  // See \"Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables\", Abramowitz and Stegun.\n  float p = ${backend_util.ERF_P};\n  float a1 = ${backend_util.ERF_A1};\n  float a2 = ${backend_util.ERF_A2};\n  float a3 = ${backend_util.ERF_A3};\n  float a4 = ${backend_util.ERF_A4};\n  float a5 = ${backend_util.ERF_A5};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`;\n\nexport const erf = unaryKernelFunc({opSnippet: ERF});\n\nexport const erfConfig: KernelConfig = {\n  kernelName: Erf,\n  backendName: 'webgl',\n  kernelFunc: erf,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Exp, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {expImplCPU} from '../kernel_utils/shared';\n\nexport const EXP = `return exp(x);`;\nexport const exp = unaryKernelFunc(\n    {opSnippet: EXP, packedOpSnippet: EXP, cpuKernelImpl: expImplCPU});\n\nexport const expConfig: KernelConfig = {\n  kernelName: Exp,\n  backendName: 'webgl',\n  kernelFunc: exp as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ExpandDims, ExpandDimsAttrs, ExpandDimsInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reshape} from './Reshape';\n\nexport function expandDims(args: {\n  inputs: ExpandDimsInputs,\n  attrs: ExpandDimsAttrs,\n  backend: MathBackendWebGL\n}): TensorInfo {\n  const {inputs, attrs, backend} = args;\n  const {dim} = attrs;\n  const {input} = inputs;\n\n  const inputRank = input.shape.length;\n  const newShape = input.shape.slice();\n  let $dim = dim;\n  if (dim < 0) {\n    // Negative value is counted from the tail of rank.\n    util.assert(\n        -(inputRank + 1) <= dim,\n        () => `Axis must be in the interval [${- (inputRank + 1)}, ${\n            inputRank}]`);\n    $dim = inputRank + dim + 1;\n  }\n  newShape.splice($dim, 0, 1);\n\n  return reshape({inputs: {x: input}, backend, attrs: {shape: newShape}});\n}\n\nexport const expandDimsConfig: KernelConfig = {\n  kernelName: ExpandDims,\n  backendName: 'webgl',\n  kernelFunc: expandDims as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Expm1, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {expm1ImplCPU} from '../kernel_utils/shared';\n\nconst EXPM1 = `return exp(x) - 1.0;`;\n\nexport const expm1 = unaryKernelFunc(\n    {opSnippet: EXPM1, packedOpSnippet: EXPM1, cpuKernelImpl: expm1ImplCPU});\n\nexport const expm1Config: KernelConfig = {\n  kernelName: Expm1,\n  backendName: 'webgl',\n  kernelFunc: expm1 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class FFTProgram implements GPGPUProgram {\n  variableNames = ['real', 'imag'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      component: 'real'|'imag', inputShape: [number, number],\n      inverse: boolean) {\n    const innerDim = inputShape[1];\n    this.outputShape = inputShape;\n\n    const exponentMultiplierSnippet =\n        inverse ? `2.0 * ${Math.PI}` : `-2.0 * ${Math.PI}`;\n    const resultDenominator = inverse ? `${innerDim}.0` : '1.0';\n\n    let opString: string;\n    if (component === 'real') {\n      opString = 'return real * expR - imag * expI;';\n    } else if (component === 'imag') {\n      opString = 'return real * expI + imag * expR;';\n    } else {\n      throw new Error(\n          `FFT component must be either \"real\" or \"imag\", got ${component}.`);\n    }\n\n    this.userCode = `\n      const float exponentMultiplier = ${exponentMultiplierSnippet};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${opString}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${innerDim});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${innerDim}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${resultDenominator};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {FFTProgram} from '../fft_gpu';\n\nimport {complex} from './Complex';\nimport {reshape} from './Reshape';\n\nexport function fftImpl(\n    x: TensorInfo, inverse: boolean, backend: MathBackendWebGL): TensorInfo {\n  const xData = backend.texData.get(x.dataId);\n\n  const inputSize = util.sizeFromShape(x.shape);\n  // Collapse all outer dimensions to a single batch dimension.\n  const innerDimensionSize = x.shape[x.shape.length - 1];\n  const batch = inputSize / innerDimensionSize;\n\n  const input2D = reshape(\n      {inputs: {x}, backend, attrs: {shape: [batch, innerDimensionSize]}});\n\n  const xShape = input2D.shape as [number, number];\n  const realProgram = new FFTProgram('real', xShape, inverse);\n  const imagProgram = new FFTProgram('imag', xShape, inverse);\n\n  const inputs = [\n    {\n      dataId: xData.complexTensorInfos.real.dataId,\n      dtype: xData.complexTensorInfos.real.dtype,\n      shape: xShape\n    },\n    {\n      dataId: xData.complexTensorInfos.imag.dataId,\n      dtype: xData.complexTensorInfos.imag.dtype,\n      shape: xShape\n    }\n  ];\n\n  const realPart = backend.runWebGLProgram(realProgram, inputs, 'float32');\n  const imagPart = backend.runWebGLProgram(imagProgram, inputs, 'float32');\n\n  const complexOutput =\n      complex({inputs: {real: realPart, imag: imagPart}, backend});\n\n  backend.disposeIntermediateTensorInfo(realPart);\n  backend.disposeIntermediateTensorInfo(imagPart);\n\n  const complexOutputReshaped =\n      reshape({inputs: {x: complexOutput}, backend, attrs: {shape: x.shape}});\n\n  backend.disposeIntermediateTensorInfo(input2D);\n  backend.disposeIntermediateTensorInfo(complexOutput);\n  return complexOutputReshaped;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FFT, FFTInputs, KernelConfig, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {fftImpl} from './FFT_impl';\n\nexport function fft(args: {inputs: FFTInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  return fftImpl(input, false /* inverse */, backend);\n}\n\nexport const fftConfig: KernelConfig = {\n  kernelName: FFT,\n  backendName: 'webgl',\n  kernelFunc: fft\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\nexport class FillProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n  customUniforms = [{name: 'value', type: 'float' as UniformType}];\n\n  constructor(shape: number[], value: number) {\n    this.variableNames = ['x'];\n    this.outputShape = shape;\n\n    this.userCode = `\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Fill, FillAttrs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {FillProgram} from '../fill_gpu';\n\nexport function fill(args: {backend: MathBackendWebGL, attrs: FillAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {shape, value} = attrs;\n  let {dtype} = attrs;\n\n  dtype = dtype || util.inferDtype(value);\n\n  if (dtype === 'string') {\n    // String type should be handled in CPU memory.\n    const values = util.getArrayFromDType(dtype, util.sizeFromShape(shape));\n    values.fill(value as string);\n    return backend.makeTensorInfo(shape, dtype, values);\n  } else {\n    const program = new FillProgram(shape, value as number);\n    const customValues = [[value as number]];\n    return backend.runWebGLProgram(program, [], dtype, customValues);\n  }\n}\n\nexport const fillConfig: KernelConfig = {\n  kernelName: Fill,\n  backendName: 'webgl',\n  kernelFunc: fill as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class FlipLeftRightProgram implements GPGPUProgram {\n  variableNames = ['Image'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(imageShape: [number, number, number, number]) {\n    const imageWidth = imageShape[2];\n    this.outputShape = imageShape;\n\n    this.userCode = `\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${imageWidth} - x - 1;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${imageWidth}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tensor4D} from '@tensorflow/tfjs-core';\nimport {FlipLeftRight, FlipLeftRightInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {FlipLeftRightProgram} from '../flip_left_right_gpu';\n\nexport const flipLeftRightConfig: KernelConfig = {\n  kernelName: FlipLeftRight,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, backend}) => {\n    const {image} = inputs as FlipLeftRightInputs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    const program = new FlipLeftRightProgram((image as Tensor4D).shape);\n    const output = webglBackend.runWebGLProgram(program, [image], image.dtype);\n    return output;\n  }\n};\n","\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Floor, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {floorImplCPU} from '../kernel_utils/shared';\n\nconst FLOOR = `return floor(x);`;\n\nexport const floor = unaryKernelFunc(\n    {opSnippet: FLOOR, packedOpSnippet: FLOOR, cpuKernelImpl: floorImplCPU});\n\nexport const floorConfig: KernelConfig = {\n  kernelName: Floor,\n  backendName: 'webgl',\n  kernelFunc: floor,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FloorDiv, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\n// We use native integer division to deal with floating point imprecision. Since\n// we implement floor division and glsl implements truncated division, we\n// correct for this by subtracting 1 from result when the result is negative and\n// there is a remainder.\nconst INT_DIV = `\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n`;\n\nconst INT_DIV_PACKED = `\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n`;\n\nexport const floorDiv = binaryKernelFunc(\n    {opSnippet: INT_DIV, packedOpSnippet: INT_DIV_PACKED, dtype: 'int32'});\n\nexport const floorDivConfig: KernelConfig = {\n  kernelName: FloorDiv,\n  backendName: 'webgl',\n  kernelFunc: floorDiv as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from '../../glsl_version';\nimport {GPGPUProgram} from '../../gpgpu_math';\n\nexport class FromPixelsProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(outputShape: number[]) {\n    const glsl = getGlslDifferences();\n    const [height, width, ] = outputShape;\n    this.outputShape = outputShape;\n    this.userCode = `\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${width}.0, ${height}.0);\n\n        vec4 values = ${glsl.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from '../../glsl_version';\nimport {GPGPUProgram} from '../../gpgpu_math';\n\nexport class FromPixelsPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  packedInputs = false;\n  packedOutput = true;\n\n  constructor(outputShape: number[]) {\n    const glsl = getGlslDifferences();\n    const [height, width, ] = outputShape;\n    this.outputShape = outputShape;\n    this.userCode = `\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${width}.0, ${height}.0);\n            vec4 values = ${glsl.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\nimport {FromPixels, FromPixelsAttrs, FromPixelsInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {TextureUsage} from '../tex_util';\n\nimport {FromPixelsProgram} from './FromPixels_utils/from_pixels_gpu';\nimport {FromPixelsPackedProgram} from './FromPixels_utils/from_pixels_packed_gpu';\n\nexport const fromPixelsConfig: KernelConfig = {\n  kernelName: FromPixels,\n  backendName: 'webgl',\n  kernelFunc: fromPixels as {} as KernelFunc,\n};\n\nlet fromPixels2DContext: CanvasRenderingContext2D;\n\nfunction fromPixels(args: {\n  inputs: FromPixelsInputs,\n  backend: MathBackendWebGL,\n  attrs: FromPixelsAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  let {pixels} = inputs;\n  const {numChannels} = attrs;\n\n  const isVideo = typeof (HTMLVideoElement) !== 'undefined' &&\n      pixels instanceof HTMLVideoElement;\n  const isImage = typeof (HTMLImageElement) !== 'undefined' &&\n      pixels instanceof HTMLImageElement;\n  const [width, height] = isVideo ?\n      [\n        (pixels as HTMLVideoElement).videoWidth,\n        (pixels as HTMLVideoElement).videoHeight\n      ] :\n      [pixels.width, pixels.height];\n\n  const texShape: [number, number] = [height, width];\n  const outShape = [height, width, numChannels];\n\n  if (isImage || isVideo) {\n    if (fromPixels2DContext == null) {\n      fromPixels2DContext = document.createElement('canvas').getContext('2d');\n    }\n\n    fromPixels2DContext.canvas.width = width;\n    fromPixels2DContext.canvas.height = height;\n    fromPixels2DContext.drawImage(\n        pixels as HTMLVideoElement | HTMLImageElement | ImageBitmap,\n        0, 0, width, height);\n    pixels = fromPixels2DContext.canvas;\n  }\n\n  const tempPixelHandle = backend.makeTensorInfo(texShape, 'int32');\n  // This is a byte texture with pixels.\n  backend.texData.get(tempPixelHandle.dataId).usage = TextureUsage.PIXELS;\n  backend.gpgpu.uploadPixelDataToTexture(\n      backend.getTexture(tempPixelHandle.dataId), pixels as ImageData);\n  const program = env().getBool('WEBGL_PACK') ?\n      new FromPixelsPackedProgram(outShape) :\n      new FromPixelsProgram(outShape);\n  const res = backend.runWebGLProgram(program, [tempPixelHandle], 'int32');\n  backend.disposeData(tempPixelHandle.dataId);\n  return res;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, FusedConv2D, FusedConv2DAttrs, FusedConv2DInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv2DProgram} from '../conv_gpu';\nimport {mapActivationToShaderProgram} from '../kernel_utils/kernel_funcs_utils';\n\nimport {conv2dByMatMul, conv2dWithIm2Row} from './Conv2D_impl';\nimport {reshape} from './Reshape';\n\nexport function fusedConv2d(args: {\n  inputs: FusedConv2DInputs,\n  attrs: FusedConv2DAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, dilations, pad,\n      dimRoundingMode, false /* depthwise */, $dataFormat);\n  let out: TensorInfo;\n  const intermediates: TensorInfo[] = [];\n\n  if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 &&\n      convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n      convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&\n      (convInfo.padInfo.type === 'SAME' || convInfo.padInfo.type === 'VALID')) {\n    out = conv2dByMatMul({\n      x,\n      filter,\n      convInfo,\n      backend,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n  } else if (env().getBool('WEBGL_CONV_IM2COL') && x.shape[0] === 1) {\n    out = conv2dWithIm2Row({\n      x,\n      filter,\n      convInfo,\n      backend,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n  } else {\n    const hasBias = bias != null;\n    const hasPreluActivationWeights = preluActivationWeights != null;\n    const hasLeakyreluAlpha = activation === 'leakyrelu';\n    const fusedActivation =\n        activation ? mapActivationToShaderProgram(activation, false) : null;\n    const program = new Conv2DProgram(\n        convInfo, hasBias, fusedActivation, hasPreluActivationWeights,\n        hasLeakyreluAlpha);\n    const inputs: TensorInfo[] = [x, filter];\n    if (bias) {\n      inputs.push(bias);\n    }\n    if (preluActivationWeights) {\n      inputs.push(preluActivationWeights);\n    }\n    if (hasLeakyreluAlpha) {\n      const $leakyreluAlpha = backend.makeTensorInfo(\n          [], 'float32',\n          util.createScalarValue(leakyreluAlpha as {} as 'float32', 'float32'));\n      inputs.push($leakyreluAlpha);\n      intermediates.push($leakyreluAlpha);\n    }\n    out = backend.runWebGLProgram(program, inputs, 'float32');\n  }\n\n  const outReshaped =\n      reshape({inputs: {x: out}, backend, attrs: {shape: convInfo.outShape}});\n\n  intermediates.push(out);\n  intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return outReshaped;\n}\n\nexport const fusedConv2DConfig: KernelConfig = {\n  kernelName: FusedConv2D,\n  backendName: 'webgl',\n  kernelFunc: fusedConv2d as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, FusedDepthwiseConv2D, FusedDepthwiseConv2DAttrs, FusedDepthwiseConv2DInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthwiseConv2DProgram} from '../conv_gpu_depthwise';\nimport {DepthwiseConvPacked2DProgram} from '../conv_packed_gpu_depthwise';\nimport {mapActivationToShaderProgram} from '../kernel_utils/kernel_funcs_utils';\n\nexport function fusedDepthwiseConv2D(args: {\n  inputs: FusedDepthwiseConv2DInputs,\n  attrs: FusedDepthwiseConv2DAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {strides, pad, dilations, dimRoundingMode, activation, leakyreluAlpha} =\n      attrs;\n\n  const intermediates: TensorInfo[] = [];\n\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, $dilations),\n      () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n          `1. Got strides ${strides} and dilations '${$dilations}'`);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, $dilations,\n      pad, dimRoundingMode, true /* depthwise */);\n\n  const shouldPackDepthwiseConv = env().getBool('WEBGL_PACK_DEPTHWISECONV') &&\n      convInfo.strideWidth <= 2 &&\n      convInfo.outChannels / convInfo.inChannels === 1;\n  const fusedActivation = activation ?\n      mapActivationToShaderProgram(activation, shouldPackDepthwiseConv) :\n      null;\n  const programInputs: TensorInfo[] = [x, filter];\n\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const hasLeakyreluAlpha = activation === 'leakyrelu';\n\n  if (hasBias) {\n    programInputs.push(bias);\n  }\n  if (hasPreluActivationWeights) {\n    programInputs.push(preluActivationWeights);\n  }\n  if (hasLeakyreluAlpha) {\n    const $leakyreluAlpha = backend.makeTensorInfo(\n        [], 'float32',\n        util.createScalarValue(leakyreluAlpha as {} as 'float32', 'float32'));\n    programInputs.push($leakyreluAlpha);\n    intermediates.push($leakyreluAlpha);\n  }\n\n  let program: DepthwiseConv2DProgram|DepthwiseConvPacked2DProgram;\n  if (shouldPackDepthwiseConv) {\n    program = new DepthwiseConvPacked2DProgram(\n        convInfo, hasBias, fusedActivation, hasPreluActivationWeights,\n        hasLeakyreluAlpha);\n  } else {\n    program = new DepthwiseConv2DProgram(\n        convInfo, hasBias, fusedActivation, hasPreluActivationWeights,\n        hasLeakyreluAlpha);\n  }\n\n  const result = backend.runWebGLProgram(program, programInputs, 'float32');\n\n  intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const fusedDepthwiseConv2DConfig: KernelConfig = {\n  kernelName: FusedDepthwiseConv2D,\n  backendName: 'webgl',\n  kernelFunc: fusedDepthwiseConv2D as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class GatherNDProgram implements GPGPUProgram {\n  variableNames = ['x', 'indices'];\n  outputShape: number[];\n  userCode: string;\n  constructor(\n      private sliceDim: number, private strides: number[], shape: number[]) {\n    this.outputShape = shape;\n    const stridesType = getCoordsDataType(strides.length);\n    const dtype = getCoordsDataType(shape.length);\n    const strideString = this.sliceDim > 1 ? 'strides[j]' : 'strides';\n    this.userCode = `\n        ${stridesType} strides = ${stridesType}(${this.strides});\n         void main() {\n          ${dtype} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${strideString};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherNd, GatherNdInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {GatherNDProgram} from '../gather_nd_gpu';\nimport {gatherNdImplCPU} from '../kernel_utils/shared';\n\nimport {reshape} from './Reshape';\n\nexport function gatherNd(\n    args: {inputs: GatherNdInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {params, indices} = inputs;\n\n  const indicesShape = indices.shape;\n  const sliceRank = indicesShape[indicesShape.length - 1];\n  const paramsSize = util.sizeFromShape(params.shape);\n\n  const [resultShape, numSlices, sliceSize, strides] =\n      backend_util.prepareAndValidate(params, indices);\n\n  const flattenIndices = reshape(\n      {inputs: {x: indices}, backend, attrs: {shape: [numSlices, sliceRank]}});\n  const flattenX = reshape({\n    inputs: {x: params},\n    backend,\n    attrs: {shape: [(util.sizeFromShape(params.shape) / sliceSize), sliceSize]}\n  });\n\n  if (backend.shouldExecuteOnCPU([params, indices]) ||\n      params.dtype === 'string') {\n    const indicesData = backend.readSync(indices.dataId) as TypedArray;\n    const paramsBuf = backend.bufferSync(params);\n    const outValue = gatherNdImplCPU(\n        indicesData, paramsBuf, params.dtype, numSlices, sliceRank, sliceSize,\n        strides, params.shape, paramsSize);\n\n    return backend.makeTensorInfo(resultShape, params.dtype, outValue.values);\n  }\n  const program =\n      new GatherNDProgram(sliceRank, strides, [numSlices, sliceSize]);\n  const res = backend.runWebGLProgram(\n      program, [flattenX, flattenIndices], flattenX.dtype);\n\n  const reshaped =\n      reshape({inputs: {x: res}, backend, attrs: {shape: resultShape}});\n\n  backend.disposeIntermediateTensorInfo(flattenIndices);\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(res);\n\n  return reshaped;\n}\n\nexport const gatherNdConfig: KernelConfig = {\n  kernelName: GatherNd,\n  backendName: 'webgl',\n  kernelFunc: gatherNd as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class GatherProgram implements GPGPUProgram {\n  variableNames = ['A', 'indices'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  constructor(aShape: number[], outputShape: number[]) {\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const sourceCoords = getSourceCoords(aShape, 2);\n\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        setOutput(getA(${sourceCoords}));\n      }\n    `;\n  }\n}\n\n// The input and output are always flattened into rank 4 tensors.\nfunction getSourceCoords(aShape: number[], axis: number): string {\n  const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n\n  const sourceCoords = [];\n  for (let i = 0; i < aShape.length; i++) {\n    if (i === 2) {\n      sourceCoords.push('int(getIndices(resRC.x, resRC.z))');\n    } else {\n      sourceCoords.push(`${currentCoords[i]}`);\n    }\n  }\n  return sourceCoords.join();\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherV2, GatherV2Attrs, GatherV2Inputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {GatherProgram} from '../gather_gpu';\nimport {gatherV2ImplCPU} from '../kernel_utils/shared';\n\nimport {reshape} from './Reshape';\n\nexport function gatherV2(args: {\n  inputs: GatherV2Inputs,\n  backend: MathBackendWebGL,\n  attrs: GatherV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, indices} = inputs;\n  const {axis, batchDims} = attrs;\n\n  const parsedAxis = util.parseAxisParam(axis, x.shape)[0];\n  const shapeInfo = backend_util.segment_util.collectGatherOpShapeInfo(\n      x, indices, parsedAxis, batchDims);\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n\n  const toDispose = [];\n\n  const flattenX = reshape({\n    inputs: {x},\n    backend,\n    attrs: {\n      shape: [\n        shapeInfo.batchSize, shapeInfo.outerSize, shapeInfo.dimSize,\n        shapeInfo.sliceSize\n      ]\n    }\n  });\n\n  const flattenIndex = reshape({\n    inputs: {x: indices},\n    backend,\n    attrs: {shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize]}\n  });\n\n  toDispose.push(flattenX);\n  toDispose.push(flattenIndex);\n\n  const flattenOutputShape = [\n    shapeInfo.batchSize, shapeInfo.outerSize, indicesSize / shapeInfo.batchSize,\n    shapeInfo.sliceSize\n  ];\n\n  if (backend.shouldExecuteOnCPU([x, indices]) || x.dtype === 'string') {\n    const indicesBuf = backend.bufferSync(flattenIndex);\n    const xBuf = backend.bufferSync(flattenX);\n    const outBuf = gatherV2ImplCPU(xBuf, indicesBuf, flattenOutputShape);\n\n    toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n    return backend.makeTensorInfo(\n        shapeInfo.outputShape, outBuf.dtype, outBuf.values as TypedArray);\n  }\n\n  const program = new GatherProgram(flattenX.shape, flattenOutputShape);\n  const res = backend.runWebGLProgram(\n      program, [flattenX, flattenIndex], flattenX.dtype);\n  toDispose.push(res);\n\n  const reshaped = reshape(\n      {inputs: {x: res}, backend, attrs: {shape: shapeInfo.outputShape}});\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return reshaped;\n}\n\nexport const gatherV2Config: KernelConfig = {\n  kernelName: GatherV2,\n  backendName: 'webgl',\n  kernelFunc: gatherV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Greater, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {greaterImplCPU} from '../kernel_utils/shared';\n\nconst GREATER = `return float(a > b);`;\nconst GREATER_PACKED = `\n  return vec4(greaterThan(a, b));\n`;\n\nexport const greater = binaryKernelFunc({\n  opSnippet: GREATER,\n  packedOpSnippet: GREATER_PACKED,\n  cpuKernelImpl: greaterImplCPU,\n  dtype: 'bool'\n});\n\nexport const greaterConfig: KernelConfig = {\n  kernelName: Greater,\n  backendName: 'webgl',\n  kernelFunc: greater as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GreaterEqual, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {greaterEqualImplCPU} from '../kernel_utils/shared';\n\nconst GREATER_EQUAL = `return float(a >= b);`;\nconst GREATER_EQUAL_PACKED = `\n  return vec4(greaterThanEqual(a, b));\n`;\n\nexport const greaterEqual = binaryKernelFunc({\n  opSnippet: GREATER_EQUAL,\n  packedOpSnippet: GREATER_EQUAL_PACKED,\n  dtype: 'bool',\n  cpuKernelImpl: greaterEqualImplCPU\n});\n\nexport const greaterEqualConfig: KernelConfig = {\n  kernelName: GreaterEqual,\n  backendName: 'webgl',\n  kernelFunc: greaterEqual as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IFFT, IFFTInputs, KernelConfig, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {fftImpl} from './FFT_impl';\n\nexport function ifft(args: {inputs: IFFTInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  return fftImpl(input, true /* inverse */, backend);\n}\n\nexport const ifftConfig: KernelConfig = {\n  kernelName: IFFT,\n  backendName: 'webgl',\n  kernelFunc: ifft\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsFinite, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst IS_FINITE = `return float(!isnan(x) && !isinf(x));`;\n\nexport const isFinite = unaryKernelFunc({opSnippet: IS_FINITE, dtype: 'bool'});\n\nexport const isFiniteConfig: KernelConfig = {\n  kernelName: IsFinite,\n  backendName: 'webgl',\n  kernelFunc: isFinite,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsInf, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst IS_INF = `return float(isinf(x));`;\n\nexport const isInf = unaryKernelFunc({opSnippet: IS_INF, dtype: 'bool'});\n\nexport const isInfConfig: KernelConfig = {\n  kernelName: IsInf,\n  backendName: 'webgl',\n  kernelFunc: isInf,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsNan, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst IS_NAN = `return float(isnan(x));`;\n\nexport const isNaN = unaryKernelFunc({opSnippet: IS_NAN, dtype: 'bool'});\n\nexport const isNaNConfig: KernelConfig = {\n  kernelName: IsNan,\n  backendName: 'webgl',\n  kernelFunc: isNaN,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Less} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {lessImplCPU} from '../kernel_utils/shared';\n\nconst LESS = `return float(a < b);`;\nconst LESS_PACKED = `\n  return vec4(lessThan(a, b));\n`;\n\nexport const less = binaryKernelFunc({\n  opSnippet: LESS,\n  packedOpSnippet: LESS_PACKED,\n  cpuKernelImpl: lessImplCPU,\n  dtype: 'bool'\n});\n\nexport const lessConfig: KernelConfig = {\n  kernelName: Less,\n  backendName: 'webgl',\n  kernelFunc: less as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LessEqual} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {lessEqualImplCPU} from '../kernel_utils/shared';\n\nexport const LESS_EQUAL = `return float(a <= b);`;\nexport const LESS_EQUAL_PACKED = `\n  return vec4(lessThanEqual(a, b));\n`;\n\nexport const lessEqual = binaryKernelFunc({\n  opSnippet: LESS_EQUAL,\n  packedOpSnippet: LESS_EQUAL_PACKED,\n  cpuKernelImpl: lessEqualImplCPU,\n  dtype: 'bool'\n});\n\nexport const lessEqualConfig: KernelConfig = {\n  kernelName: LessEqual,\n  backendName: 'webgl',\n  kernelFunc: lessEqual as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LinSpace, LinSpaceAttrs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {linSpaceImplCPU} from '../kernel_utils/shared';\n\nexport function linSpace(\n    args: {backend: MathBackendWebGL, attrs: LinSpaceAttrs}): TensorInfo {\n  const {backend, attrs} = args;\n  const {start, stop, num} = attrs;\n\n  // TODO: Use CPU implementation due to the precision problem in Safari.\n  const outVals = linSpaceImplCPU(start, stop, num);\n  return backend.makeTensorInfo([outVals.length], 'float32', outVals);\n}\n\nexport const linSpaceConfig: KernelConfig = {\n  kernelName: LinSpace,\n  backendName: 'webgl',\n  kernelFunc: linSpace as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Log} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {logImplCPU} from '../kernel_utils/shared';\n\nconst LOG = `if (x < 0.0) return NAN;\n  return log(x);`;\n\nconst LOG_PACKED = `\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n`;\n\nexport const log = unaryKernelFunc(\n    {opSnippet: LOG, packedOpSnippet: LOG_PACKED, cpuKernelImpl: logImplCPU});\n\nexport const logConfig: KernelConfig = {\n  kernelName: Log,\n  backendName: 'webgl',\n  kernelFunc: log as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Log1p} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst LOG1P = `return log(1.0 + x);`;\n\nexport const log1p = unaryKernelFunc({opSnippet: LOG1P});\n\nexport const log1pConfig: KernelConfig = {\n  kernelName: Log1p,\n  backendName: 'webgl',\n  kernelFunc: log1p,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LogicalAnd} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst LOGICAL_AND = `return float(a >= 1.0 && b >= 1.0);`;\nconst LOGICAL_AND_PACKED = `\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n`;\n\nexport const logicalAnd = binaryKernelFunc({\n  opSnippet: LOGICAL_AND,\n  packedOpSnippet: LOGICAL_AND_PACKED,\n  dtype: 'bool'\n});\n\nexport const logicalAndConfig: KernelConfig = {\n  kernelName: LogicalAnd,\n  backendName: 'webgl',\n  kernelFunc: logicalAnd as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalNot} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst LOGICAL_NOT = `return float(!(x >= 1.0));`;\n\nexport const logicalNot = unaryKernelFunc({opSnippet: LOGICAL_NOT});\n\nexport const logicalNotConfig: KernelConfig = {\n  kernelName: LogicalNot,\n  backendName: 'webgl',\n  kernelFunc: logicalNot,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LogicalOr} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst LOGICAL_OR = `return float(a >= 1.0 || b >= 1.0);`;\nconst LOGICAL_OR_PACKED = `\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n`;\n\nexport const logicalOr = binaryKernelFunc(\n    {opSnippet: LOGICAL_OR, packedOpSnippet: LOGICAL_OR_PACKED, dtype: 'bool'});\n\nexport const logicalOrConfig: KernelConfig = {\n  kernelName: LogicalOr,\n  backendName: 'webgl',\n  kernelFunc: logicalOr as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class LRNProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      xShape: number[], radius: number, bias: number, alpha: number,\n      beta: number) {\n    const rad = radius;\n    const maxD = xShape[3] - 1;\n    this.outputShape = xShape;\n\n    // optimize pow(bias + alpha * sum, -beta)\n    // src: https://github.com/tensorflow/tensorflow/..\n    // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..\n    // tensorflow/core/kernels/mkl_lrn_op.cc#L320\n    let powOperator;\n    const basis = `float(${bias}) + float(${alpha}) * sum`;\n    if (beta === 0.5) {\n      powOperator = `inversesqrt(${basis})`;\n    } else if (beta === 1.0) {\n      powOperator = `1.0/(${basis})`;\n    } else {\n      powOperator = `exp(log(${basis}) * float(-${beta}));`;\n    }\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${rad}; j <= ${rad}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${maxD}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${powOperator};\n        setOutput(val);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class LRNPackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[] = [];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(\n      xShape: number[], radius: number, bias: number, alpha: number,\n      beta: number) {\n    const rad = radius;\n    const maxD = xShape[3] - 1;\n    this.outputShape = xShape;\n\n    // optimize pow(bias + alpha * sum, -beta)\n    // src: https://github.com/tensorflow/tensorflow/..\n    // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..\n    // tensorflow/core/kernels/mkl_lrn_op.cc#L320\n    let powOperator;\n    const basis = `float(${bias}) + float(${alpha}) * sum`;\n    if (beta === 0.5) {\n      powOperator = `inversesqrt(${basis})`;\n    } else if (beta === 1.0) {\n      powOperator = `1.0/(${basis})`;\n    } else {\n      powOperator = `exp(log(${basis}) * float(-${beta}));`;\n    }\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${rad};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${rad}; j <= ${rad}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${maxD}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${powOperator};\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, LRN, LRNAttrs, LRNInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {LRNProgram} from '../lrn_gpu';\nimport {LRNPackedProgram} from '../lrn_packed_gpu';\n\nexport const lrn =\n    (args: {inputs: LRNInputs, backend: MathBackendWebGL, attrs: LRNAttrs}):\n        TensorInfo => {\n          const {inputs, backend, attrs} = args;\n          const {x} = inputs;\n          const {depthRadius, bias, alpha, beta} = attrs;\n\n          const program = env().getBool('WEBGL_PACK_NORMALIZATION') ?\n              new LRNPackedProgram(x.shape, depthRadius, bias, alpha, beta) :\n              new LRNProgram(x.shape, depthRadius, bias, alpha, beta);\n          return backend.runWebGLProgram(program, [x], x.dtype);\n        };\n\n// tslint:disable-next-line: variable-name\nexport const LRNConfig: KernelConfig = {\n  kernelName: LRN,\n  backendName: 'webgl',\n  kernelFunc: lrn as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class LRNGradProgram implements GPGPUProgram {\n  variableNames = ['inputImage', 'outputImage', 'dy'];\n  outputShape: number[] = [];\n  userCode: string;\n  depthRadius: number;\n  bias: number;\n  alpha: number;\n  beta: number;\n  depth: number;\n\n  constructor(\n      inputShape: number[], depthRadius: number, bias: number, alpha: number,\n      beta: number) {\n    this.outputShape = inputShape;\n    this.depth = inputShape[3];\n    this.depthRadius = depthRadius;\n    this.bias = bias;\n    this.alpha = alpha;\n    this.beta = beta;\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${depthRadius})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${depthRadius} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${alpha}) * norm + float(${bias});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${alpha})\n                * float(${beta})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${beta});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LRNGrad, LRNGradAttrs, LRNGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {LRNGradProgram} from '../lrn_grad_gpu';\n\nexport const lrnGrad = (args: {\n  inputs: LRNGradInputs,\n  backend: MathBackendWebGL,\n  attrs: LRNGradAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {x, y, dy} = inputs;\n  const {depthRadius, bias, alpha, beta} = attrs;\n\n  const program = new LRNGradProgram(x.shape, depthRadius, bias, alpha, beta);\n  return backend.runWebGLProgram(program, [x, y, dy], x.dtype);\n};\n\n// tslint:disable-next-line: variable-name\nexport const LRNGradConfig: KernelConfig = {\n  kernelName: LRNGrad,\n  backendName: 'webgl',\n  kernelFunc: lrnGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelFunc, Max, MaxAttrs, MaxInputs, TensorInfo} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {maxImplCPU} from '../kernel_utils/shared';\n\nimport {maxImpl} from './Max_impl';\nimport {transposeImpl, transposeImplCPU} from './Transpose_impl';\n\nexport function max(\n    args: {inputs: MaxInputs, backend: MathBackendWebGL, attrs: MaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {reductionIndices, keepDims} = attrs;\n\n  const xRank = x.shape.length;\n\n  const origAxes = util.parseAxisParam(reductionIndices, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  const maxInputIsTransposed = permutedAxes != null;\n  const shouldExecuteOnCPU = backend.shouldExecuteOnCPU([x]);\n\n  let maxInput = x;\n  if (maxInputIsTransposed) {\n    if (shouldExecuteOnCPU) {\n      const xTexData = backend.texData.get(maxInput.dataId);\n      const values = xTexData.values as TypedArray;\n\n      const newShape: number[] = new Array(xRank);\n      for (let i = 0; i < newShape.length; i++) {\n        newShape[i] = x.shape[permutedAxes[i]];\n      }\n      const maxInputValues =\n          transposeImplCPU(values, x.shape, x.dtype, permutedAxes, newShape);\n\n      maxInput = backend.makeTensorInfo(newShape, x.dtype);\n      const maxInputData = backend.texData.get(maxInput.dataId);\n      maxInputData.values = maxInputValues;\n    } else {\n      maxInput = transposeImpl(x, permutedAxes, backend);\n    }\n\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('max', axes, xRank);\n  const [maxOutShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(maxInput.shape, axes);\n\n  let outShape = maxOutShape;\n  if (keepDims) {\n    // rather than reshape at the end, set the target shape here.\n    outShape = backend_util.expandShapeToKeepDim(maxOutShape, origAxes);\n  }\n\n  let out;\n  if (shouldExecuteOnCPU) {\n    const xTexData = backend.texData.get(maxInput.dataId);\n    const values = xTexData.values as TypedArray;\n\n    const outValues =\n        maxImplCPU(values, util.sizeFromShape(reduceShape), outShape, x.dtype);\n\n    out = backend.makeTensorInfo(outShape, x.dtype);\n    const outData = backend.texData.get(out.dataId);\n    outData.values = outValues;\n  } else {\n    out = maxImpl(maxInput, reduceShape, outShape, backend);\n  }\n\n  if (maxInputIsTransposed) {\n    backend.disposeIntermediateTensorInfo(maxInput);\n  }\n\n  return out;\n}\n\nexport const maxConfig: KernelConfig = {\n  kernelName: Max,\n  backendName: 'webgl',\n  kernelFunc: max as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {reshape} from '../kernels/Reshape';\n\nexport function maxImpl(\n    x: TensorInfo, reduceShape: number[], outShape: number[],\n    backend: MathBackendWebGL): TensorInfo {\n  const inSize = util.sizeFromShape(reduceShape);\n  const xSize = util.sizeFromShape(x.shape);\n  const batchSize = xSize / inSize;\n  const reshapedInput =\n      reshape({inputs: {x}, attrs: {shape: [batchSize, inSize]}, backend});\n\n  const reduced = reduce(reshapedInput, x.dtype, 'max', backend);\n  const reshapedOutput =\n      reshape({inputs: {x: reduced}, attrs: {shape: outShape}, backend});\n\n  backend.disposeIntermediateTensorInfo(reshapedInput);\n  backend.disposeIntermediateTensorInfo(reduced);\n\n  return reshapedOutput;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Maximum} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET} from '../binaryop_gpu';\nimport {CHECK_NAN_SNIPPET as CHECK_NAN_SNIPPET_PACKED} from '../binaryop_packed_gpu';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {maximumImplCPU} from '../kernel_utils/shared';\n\nconst MAXIMUM = CHECK_NAN_SNIPPET + `\n  return max(a, b);\n`;\n\nconst MAXIMUM_PACKED = `\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  ` +\n    CHECK_NAN_SNIPPET_PACKED + `\n  return result;\n`;\n\nexport const maximum = binaryKernelFunc({\n  opSnippet: MAXIMUM,\n  packedOpSnippet: MAXIMUM_PACKED,\n  cpuKernelImpl: maximumImplCPU\n});\n\nexport const maximumConfig: KernelConfig = {\n  kernelName: Maximum,\n  backendName: 'webgl',\n  kernelFunc: maximum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPool, MaxPoolAttrs, MaxPoolInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool2DProgram} from '../pool_gpu';\nimport {assertNotComplex} from '../webgl_util';\nimport {identity} from './Identity';\n\nexport function maxPool(args: {\n  inputs: MaxPoolInputs,\n  backend: MathBackendWebGL,\n  attrs: MaxPoolAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  assertNotComplex(x, 'maxPool');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    return identity({inputs: {x}, backend});\n  }\n  const maxPoolProgram = new Pool2DProgram(convInfo, 'max', false);\n  return backend.runWebGLProgram(maxPoolProgram, [x], x.dtype);\n}\n\nexport const maxPoolConfig: KernelConfig = {\n  kernelName: MaxPool,\n  backendName: 'webgl',\n  kernelFunc: maxPool as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPool3D, MaxPool3DAttrs, MaxPool3DInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool3DProgram} from '../pool_gpu';\n\nexport function maxPool3d(args: {\n  inputs: MaxPool3DInputs,\n  backend: MathBackendWebGL,\n  attrs: MaxPool3DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dataFormat, dimRoundingMode} = attrs;\n  const dilations: [number, number, number] = [1, 1, 1];\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode, dataFormat);\n  const maxPoolProgram = new Pool3DProgram(convInfo, 'max', false);\n  return backend.runWebGLProgram(maxPoolProgram, [x], x.dtype);\n}\n\nexport const maxPool3DConfig: KernelConfig = {\n  kernelName: MaxPool3D,\n  backendName: 'webgl',\n  kernelFunc: maxPool3d as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class MaxPool2DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy', 'maxPos'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const lastIndex = effectiveFilterHeight * effectiveFilterWidth - 1;\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n          wR += ${dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${effectiveFilterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${lastIndex} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${effectiveFilterWidth} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class MaxPool3DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy', 'maxPos'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.inShape;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const lastIndex =\n        effectiveFilterDepth * effectiveFilterHeight * effectiveFilterWidth - 1;\n    this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n           wD += ${dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${lastIndex} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${effectiveFilterHeight} * ${effectiveFilterWidth} +\n                  wR * ${effectiveFilterWidth} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPool3DGrad, MaxPool3DGradAttrs, MaxPool3DGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MaxPool3DBackpropProgram} from '../max_pool_backprop_gpu';\nimport {Pool3DProgram} from '../pool_gpu';\n\nexport function maxPool3DGrad(args: {\n  inputs: MaxPool3DGradInputs,\n  backend: MathBackendWebGL,\n  attrs: MaxPool3DGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations: [number, number, number] = [1, 1, 1];\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n\n  const maxPool3dPositionsProgram =\n      new Pool3DProgram(convInfo, 'max', true /* get positions */);\n  const maxPool3dPositions =\n      backend.runWebGLProgram(maxPool3dPositionsProgram, [x], x.dtype);\n  const maxPoolBackpropProgram = new MaxPool3DBackpropProgram(convInfo);\n  const result = backend.runWebGLProgram(\n      maxPoolBackpropProgram, [dy, maxPool3dPositions], x.dtype);\n  backend.disposeIntermediateTensorInfo(maxPool3dPositions);\n  return result;\n}\n\nexport const maxPoolGrad3DConfig: KernelConfig = {\n  kernelName: MaxPool3DGrad,\n  backendName: 'webgl',\n  kernelFunc: maxPool3DGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPoolGrad, MaxPoolGradAttrs, MaxPoolGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MaxPool2DBackpropProgram} from '../max_pool_backprop_gpu';\nimport {Pool2DProgram} from '../pool_gpu';\nimport {assertNotComplex} from '../webgl_util';\n\nexport function maxPoolGrad(args: {\n  inputs: MaxPoolGradInputs,\n  backend: MathBackendWebGL,\n  attrs: MaxPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input, output} = inputs;\n  const x = input;\n  assertNotComplex([input, output], 'maxPoolGrad');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode);\n  const getPositions = true;\n  const maxPoolPositionsProgram =\n      new Pool2DProgram(convInfo, 'max', getPositions);\n  const maxPoolPositions: TensorInfo =\n      backend.runWebGLProgram(maxPoolPositionsProgram, [x], x.dtype);\n\n  const maxPoolBackPropProgram = new MaxPool2DBackpropProgram(convInfo);\n  const result = backend.runWebGLProgram(\n      maxPoolBackPropProgram, [dy, maxPoolPositions], x.dtype);\n  backend.disposeIntermediateTensorInfo(maxPoolPositions);\n  return result;\n}\n\nexport const maxPoolGradConfig: KernelConfig = {\n  kernelName: MaxPoolGrad,\n  backendName: 'webgl',\n  kernelFunc: maxPoolGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {MaxPoolWithArgmax, MaxPoolWithArgmaxAttrs, MaxPoolWithArgmaxInputs} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {maxPoolWithArgmaxImpl} from './MaxPoolWithArgmax_impl';\n\nexport const maxPoolWithArgmaxConfig: KernelConfig = {\n  kernelName: MaxPoolWithArgmax,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as MaxPoolWithArgmaxInputs;\n    const {filterSize, strides, pad, includeBatchInIndex} =\n        attrs as {} as MaxPoolWithArgmaxAttrs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    util.assert(\n        x.shape.length === 4,\n        () => `Error in maxPool: input must be rank 4 but got rank ${\n            x.shape.length}.`);\n    const dilations: [number, number] = [1, 1];\n    util.assert(\n        backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n        () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n            `Got strides ${strides} and dilations '${dilations}'`);\n\n    const convInfo = backend_util.computePool2DInfo(\n        x.shape as [number, number, number, number], filterSize, strides,\n        dilations, pad);\n\n    const [result, indexes] =\n        maxPoolWithArgmaxImpl(x, includeBatchInIndex, convInfo, webglBackend);\n    return [result, indexes];\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool2DProgram} from '../pool_gpu';\n\nexport function maxPoolWithArgmaxImpl(\n    x: TensorInfo, includeBatchInIndex: boolean,\n    convInfo: backend_util.Conv2DInfo,\n    backend: MathBackendWebGL): TensorInfo[] {\n  let program = new Pool2DProgram(convInfo, 'max', false);\n  const poolOutput = backend.runWebGLProgram(program, [x], 'float32');\n\n  program = new Pool2DProgram(convInfo, 'max', true, true, includeBatchInIndex);\n  const indexOutput = backend.runWebGLProgram(program, [x], 'float32');\n  return [poolOutput, indexOutput];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, Mean, MeanAttrs, MeanInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {meanImpl} from './Mean_impl';\nimport {transposeImpl, transposeImplCPU} from './Transpose_impl';\n\nexport const meanConfig: KernelConfig = {\n  kernelName: Mean,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as MeanInputs;\n    const {keepDims, axis} = attrs as {} as MeanAttrs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    const xRank = x.shape.length;\n    const origAxes = util.parseAxisParam(axis, x.shape);\n\n    let axes = origAxes;\n    const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n    const meanInputIsTransposed = permutedAxes != null;\n    const shouldExecuteOnCPU = webglBackend.shouldExecuteOnCPU([x]);\n\n    const intermediates: TensorInfo[] = [];\n\n    let meanInput = x;\n    if (meanInputIsTransposed) {\n      if (shouldExecuteOnCPU) {\n        const xTexData = webglBackend.texData.get(meanInput.dataId);\n        const values = xTexData.values as TypedArray;\n\n        const newShape: number[] = new Array(xRank);\n        for (let i = 0; i < newShape.length; i++) {\n          newShape[i] = x.shape[permutedAxes[i]];\n        }\n        const meanInputValues =\n            transposeImplCPU(values, x.shape, x.dtype, permutedAxes, newShape);\n\n        meanInput = webglBackend.makeTensorInfo(newShape, x.dtype);\n        const meanInputData = webglBackend.texData.get(meanInput.dataId);\n        meanInputData.values = meanInputValues;\n      } else {\n        meanInput = transposeImpl(x, permutedAxes, webglBackend);\n      }\n\n      intermediates.push(meanInput);\n      axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    }\n\n    backend_util.assertAxesAreInnerMostDims('sum', axes, xRank);\n    const [meanOutShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(meanInput.shape, axes);\n\n    let outShape = meanOutShape;\n    if (keepDims) {\n      // rather than reshape at the end, set the target shape here.\n      outShape = backend_util.expandShapeToKeepDim(meanOutShape, origAxes);\n    }\n\n    const out = meanImpl(meanInput, reduceShape, outShape, webglBackend);\n    for (const i of intermediates) {\n      webglBackend.disposeIntermediateTensorInfo(i);\n    }\n\n    return out;\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {reshape} from '../kernels/Reshape';\n\nexport function meanImpl(\n    x: TensorInfo, reduceShape: number[], outShape: number[],\n    backend: MathBackendWebGL): TensorInfo {\n  const inSize = util.sizeFromShape(reduceShape);\n  const xSize = util.sizeFromShape(x.shape);\n  const batchSize = xSize / inSize;\n  const reshapedInput =\n      reshape({inputs: {x}, attrs: {shape: [batchSize, inSize]}, backend});\n\n  const reduced = reduce(reshapedInput, 'float32', 'mean', backend);\n  const reshapedOutput =\n      reshape({inputs: {x: reduced}, attrs: {shape: outShape}, backend});\n\n  backend.disposeIntermediateTensorInfo(reshapedInput);\n  backend.disposeIntermediateTensorInfo(reduced);\n\n  return reshapedOutput;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Min, MinAttrs, MinInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\n\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function min(\n    args: {inputs: MinInputs, backend: MathBackendWebGL, attrs: MinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const xRank = x.shape.length;\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let permutedX = x;\n  if (permutedAxes != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('min', axes, xRank);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n  const inSize = util.sizeFromShape(reduceShape);\n  const a2D =\n      reshape({inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n  const reduced = reduce(a2D, a2D.dtype, 'min', backend);\n\n  let res;\n  if (keepDims) {\n    const newShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: newShape}});\n  } else {\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n  }\n\n  backend.disposeIntermediateTensorInfo(a2D);\n  backend.disposeIntermediateTensorInfo(reduced);\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo(permutedX);\n  }\n\n  return res;\n}\n\nexport const minConfig: KernelConfig = {\n  kernelName: Min,\n  backendName: 'webgl',\n  kernelFunc: min as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Minimum} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET} from '../binaryop_gpu';\nimport {CHECK_NAN_SNIPPET as CHECK_NAN_SNIPPET_PACKED} from '../binaryop_packed_gpu';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {minimumImplCPU} from '../kernel_utils/shared';\n\nconst MINIMUM = CHECK_NAN_SNIPPET + `\n  return min(a, b);\n`;\n\nconst MINIMUM_PACKED = `\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  ` +\n    CHECK_NAN_SNIPPET_PACKED + `\n  return result;\n`;\n\nexport const minimum = binaryKernelFunc({\n  opSnippet: MINIMUM,\n  packedOpSnippet: MINIMUM_PACKED,\n  cpuKernelImpl: minimumImplCPU\n});\n\nexport const minimumConfig: KernelConfig = {\n  kernelName: Minimum,\n  backendName: 'webgl',\n  kernelFunc: minimum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class MirrorPadProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      mode: 'reflect'|'symmetric') {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const dtype = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const unpackedCoords =\n        ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);\n    const offset = mode === 'reflect' ? 0 : 1;\n\n    if (rank === 1) {\n      this.userCode = `\n        int start = ${start};\n        int end = ${end};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${offset};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${offset};\n          }\n          setOutput(getX(outC - start));\n        }\n      `;\n      return;\n    }\n    this.userCode = `\n      ${dtype} start = ${dtype}(${start});\n      ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outC = getOutputCoords();\n        for (int i = 0; i < ${rank}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${offset};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${offset};\n          }\n        }\n        ${dtype} coords = outC - start;\n        setOutput(getX(${unpackedCoords}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\n/**\n * Example shader code for\n * `mirrorPad(tf.tensor1d([1, 2, 3], 'int32'), [[2, 2]], 'reflect')`\n * ```\n *    const int start = int(2);\n *    const int end = int(5);\n *\n *    void main() {\n *       int outputLoc = getOutputCoords();\n *       vec4 result = vec4(0.);\n *\n *       int rc = outputLoc;\n *\n *       int source = rc;\n *       if (source < start) {\n *         source = start * 2 - source - 0;\n *       } else if (source >= end) {\n *         source = (end - 1) * 2 - source + 0;\n *       }\n *       source -= start;\n *\n *       result[0] = getChannel(getX(source), source);\n *       rc += 1;\n *       if(rc < 6) {\n *          int source = rc;\n *          if (source < start) {\n *            source = start * 2 - source - 0;\n *          } else if (source >= end) {\n *            source = (end - 1) * 2 - source + 0;\n *          }\n *          source -= start;\n *\n *         result[1] = getChannel(getX(source), source);\n *       }\n *\n *       setOutput(result);\n *     }\n * ```\n */\nexport class MirrorPadPackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      mode: 'reflect'|'symmetric') {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const dtype = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const coords = getChannels('rc', rank);\n    const source = getChannels('source', rank);\n    const cLimit = `${coords[rank - 1]} < ${this.outputShape[rank - 1]}`;\n    const innerDims =\n        rank === 1 ? 'source' : `vec2(${source.slice(-2).join()})`;\n    const offset = mode === 'reflect' ? 0 : 1;\n\n    let mainLoop = '';\n    if (rank === 1) {\n      const padSetup = `\n        ${dtype} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${offset};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${offset};\n        }\n        source -= start;\n      `;\n      mainLoop = `\n        ${dtype} rc = outputLoc;\n        ${padSetup}\n        result[0] = getChannel(getX(${source.join()}), ${innerDims});\n        ${coords[rank - 1]} += 1;\n        if(${cLimit}) {\n          ${padSetup}\n          result[1] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n      `;\n    } else {\n      const padSetup = `\n        ${dtype} source = rc;\n        ${dtype} lt = ${dtype}(lessThan(source, start));\n        ${dtype} gte = ${dtype}(greaterThanEqual(source, end));\n        ${dtype} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${offset}) +\n                gte * ((end - 1) * 2 - source + ${offset});\n        source -= start;\n      `;\n\n      mainLoop = `\n        ${dtype} rc = outputLoc;\n        ${padSetup}\n        result[0] = getChannel(getX(${source.join()}), ${innerDims});\n        ${coords[rank - 1]} += 1;\n        if(${cLimit}) {\n          ${padSetup}\n          result[1] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n        rc = outputLoc;\n        ${coords[rank - 2]} += 1;\n        if(${coords[rank - 2]} < ${this.outputShape[rank - 2]}) {\n          ${padSetup}\n          result[2] = getChannel(getX(${source.join()}), ${innerDims});\n          ${coords[rank - 1]} += 1;\n          if(${cLimit}) {\n            ${padSetup}\n            result[3] = getChannel(getX(${source.join()}), ${innerDims});\n          }\n        }\n      `;\n    }\n\n    this.userCode = `\n      const ${dtype} start = ${dtype}(${start});\n      const ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${mainLoop}\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, MirrorPad, MirrorPadAttrs, MirrorPadInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MirrorPadProgram} from '../mirror_pad_gpu';\nimport {MirrorPadPackedProgram} from '../mirror_pad_packed_gpu';\n\nexport const mirrorPadKernelFunc: (params: {\n  inputs: MirrorPadInputs,\n  backend: MathBackendWebGL,\n  attrs: MirrorPadAttrs\n}) => TensorInfo = ({inputs, backend, attrs}) => {\n  const {x} = inputs;\n  const {paddings, mode} = attrs;\n\n  const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n      new MirrorPadPackedProgram(x.shape, paddings, mode) :\n      new MirrorPadProgram(x.shape, paddings, mode);\n\n  const output = backend.runWebGLProgram(program, [x], x.dtype);\n\n  return output;\n};\n\nexport const mirrorPadConfig: KernelConfig = {\n  kernelName: MirrorPad,\n  backendName: 'webgl',\n  kernelFunc: mirrorPadKernelFunc as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Mod} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET} from '../binaryop_packed_gpu';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst MOD = `if (b == 0.0) return NAN;\n  return mod(a, b);`;\n\nconst MOD_PACKED = `\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  ` +\n    CHECK_NAN_SNIPPET + `\n  return result;\n`;\n\nexport const mod = binaryKernelFunc({\n  opSnippet: MOD,\n  packedOpSnippet: MOD_PACKED,\n});\n\nexport const modConfig: KernelConfig = {\n  kernelName: Mod,\n  backendName: 'webgl',\n  kernelFunc: mod as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\nexport class MultinomialProgram implements GPGPUProgram {\n  variableNames = ['probs'];\n  outputShape: number[];\n  userCode: string;\n  customUniforms = [{name: 'seed', type: 'float' as UniformType}];\n\n  constructor(batchSize: number, numOutcomes: number, numSamples: number) {\n    this.outputShape = [batchSize, numSamples];\n\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${numOutcomes - 1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${numOutcomes - 1}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {RealDiv} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\n// Without the equality check div produces 0.9999 for a = b, which when\n// floored can cause errors.\nconst DIV = `\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;`;\n\n// We do the same as in ./binaryop_gpu, with vec4 and ivec4.\n// On Linux, the vectorized implementation produces NaNs when a and b are 0.\nconst DIV_PACKED = `\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n`;\n\nexport const realDiv = binaryKernelFunc(\n    {opSnippet: DIV, packedOpSnippet: DIV_PACKED, checkOutOfBounds: true});\n\nexport const realDivConfig: KernelConfig = {\n  kernelName: RealDiv,\n  backendName: 'webgl',\n  kernelFunc: realDiv,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sub} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {subImplCPU as cpuSub} from '../kernel_utils/shared';\n\nconst SUB = 'return a - b;';\n\nexport const sub = binaryKernelFunc({\n  opSnippet: SUB,\n  packedOpSnippet: SUB,\n  supportsComplex: true,\n  cpuKernelImpl: cpuSub\n});\n\nexport const subConfig: KernelConfig = {\n  kernelName: Sub,\n  backendName: 'webgl',\n  kernelFunc: sub\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Softmax, SoftmaxAttrs, SoftmaxInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {exp} from './Exp';\nimport {max} from './Max';\nimport {realDiv} from './RealDiv';\nimport {reshape} from './Reshape';\nimport {sub} from './Sub';\nimport {sum} from './Sum';\n\nexport function softmax(args: {\n  inputs: SoftmaxInputs,\n  backend: MathBackendWebGL,\n  attrs: SoftmaxAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {dim} = attrs;\n\n  const axes = util.parseAxisParam([dim], logits.shape);\n\n  const maxLogit = max({\n    inputs: {x: logits},\n    backend,\n    attrs: {reductionIndices: axes, keepDims: false}\n  });\n\n  const expandedShape = backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n\n  const maxLogitsReshaped =\n      reshape({inputs: {x: maxLogit}, backend, attrs: {shape: expandedShape}});\n  const a =\n      sub({inputs: {a: logits, b: maxLogitsReshaped}, backend}) as TensorInfo;\n  const b = exp({inputs: {x: a}, backend}) as TensorInfo;\n  const sumExp =\n      sum({inputs: {x: b}, backend, attrs: {axis: axes, keepDims: false}});\n  const sumExpReshaped =\n      reshape({inputs: {x: sumExp}, backend, attrs: {shape: expandedShape}});\n\n  const res =\n      realDiv({inputs: {a: b, b: sumExpReshaped}, backend}) as TensorInfo;\n\n  backend.disposeIntermediateTensorInfo(maxLogit);\n  backend.disposeIntermediateTensorInfo(maxLogitsReshaped);\n  backend.disposeIntermediateTensorInfo(a);\n  backend.disposeIntermediateTensorInfo(b);\n  backend.disposeIntermediateTensorInfo(sumExp);\n  backend.disposeIntermediateTensorInfo(sumExpReshaped);\n\n  return res;\n}\n\nexport const softmaxConfig: KernelConfig = {\n  kernelName: Softmax,\n  backendName: 'webgl',\n  kernelFunc: softmax as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Multinomial, MultinomialAttrs, MultinomialInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MultinomialProgram} from '../multinomial_gpu';\n\nimport {softmax} from './Softmax';\n\nexport function multinomial(args: {\n  inputs: MultinomialInputs,\n  backend: MathBackendWebGL,\n  attrs: MultinomialAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {numSamples, seed, normalized} = attrs;\n\n  const probs = normalized ?\n      logits :\n      softmax(\n          {inputs: {logits}, backend, attrs: {dim: logits.shape.length - 1}});\n  const batchSize = probs.shape[0];\n  const numOutcomes = probs.shape[1];\n  const program = new MultinomialProgram(batchSize, numOutcomes, numSamples);\n  const customValues = [[seed]];\n  const res = backend.runWebGLProgram(program, [probs], 'int32', customValues);\n  if (!normalized) {\n    backend.disposeIntermediateTensorInfo(probs);\n  }\n  return res;\n}\n\nexport const multinomialConfig: KernelConfig = {\n  kernelName: Multinomial,\n  backendName: 'webgl',\n  kernelFunc: multinomial as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, Neg, NegInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {negImplCPU} from '../kernel_utils/shared';\nimport {UnaryOpProgram} from '../unaryop_gpu';\nimport {UnaryOpPackedProgram} from '../unaryop_packed_gpu';\n\nconst NEG = `return -x;`;\n\n// This doesn't use unaryKernelFunc because negImplCPU is not of type\n// SimpleUnaryKernelImplCPU.\nexport function neg(args: {inputs: NegInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (backend.shouldExecuteOnCPU([x])) {\n    const xData = backend.texData.get(x.dataId);\n    const [outValues, newShape] =\n        negImplCPU(xData.values as TypedArray, x.shape, x.dtype);\n    return backend.makeTensorInfo(newShape, x.dtype, outValues);\n  }\n\n  let program: UnaryOpProgram|UnaryOpPackedProgram;\n  if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n    program = new UnaryOpPackedProgram(x.shape, NEG);\n  } else {\n    program = new UnaryOpProgram(x.shape, NEG);\n  }\n\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const negConfig: KernelConfig = {\n  kernelName: Neg,\n  backendName: 'webgl',\n  kernelFunc: neg as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV3, NonMaxSuppressionV3Attrs, NonMaxSuppressionV3Inputs, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV3Impl = kernel_impls.nonMaxSuppressionV3Impl;\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function nonMaxSuppressionV3(args: {\n  inputs: NonMaxSuppressionV3Inputs,\n  backend: MathBackendWebGL,\n  attrs: NonMaxSuppressionV3Attrs\n}) {\n  backend_util.warn(\n      'tf.nonMaxSuppression() in webgl locks the UI thread. ' +\n      'Call tf.nonMaxSuppressionAsync() instead');\n\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold} = attrs;\n\n  const boxesVals = backend.readSync(boxes.dataId) as TypedArray;\n  const scoresVals = backend.readSync(scores.dataId) as TypedArray;\n\n  const {selectedIndices} = nonMaxSuppressionV3Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n\n  return backend.makeTensorInfo(\n      [selectedIndices.length], 'int32', new Int32Array(selectedIndices));\n}\n\nexport const nonMaxSuppressionV3Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV3,\n  backendName: 'webgl',\n  kernelFunc: nonMaxSuppressionV3 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV4, NonMaxSuppressionV4Attrs, NonMaxSuppressionV4Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\nconst nonMaxSuppressionV4Impl = kernel_impls.nonMaxSuppressionV4Impl;\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function nonMaxSuppressionV4(args: {\n  inputs: NonMaxSuppressionV4Inputs,\n  backend: MathBackendWebGL,\n  attrs: NonMaxSuppressionV4Attrs\n}): [TensorInfo, TensorInfo] {\n  backend_util.warn(\n      'tf.nonMaxSuppression() in webgl locks the UI thread. ' +\n      'Call tf.nonMaxSuppressionAsync() instead');\n\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize} =\n      attrs;\n\n  const boxesVals = backend.readSync(boxes.dataId) as TypedArray;\n  const scoresVals = backend.readSync(scores.dataId) as TypedArray;\n\n  const {selectedIndices, validOutputs} = nonMaxSuppressionV4Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold,\n      padToMaxOutputSize);\n\n  return [\n    backend.makeTensorInfo(\n        [selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n    backend.makeTensorInfo([], 'int32', new Int32Array([validOutputs]))\n  ];\n}\n\nexport const nonMaxSuppressionV4Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV4,\n  backendName: 'webgl',\n  kernelFunc: nonMaxSuppressionV4 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV5, NonMaxSuppressionV5Attrs, NonMaxSuppressionV5Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV5Impl = kernel_impls.nonMaxSuppressionV5Impl;\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function nonMaxSuppressionV5(args: {\n  inputs: NonMaxSuppressionV5Inputs,\n  backend: MathBackendWebGL,\n  attrs: NonMaxSuppressionV5Attrs\n}): [TensorInfo, TensorInfo] {\n  backend_util.warn(\n      'tf.nonMaxSuppression() in webgl locks the UI thread. ' +\n      'Call tf.nonMaxSuppressionAsync() instead');\n\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma} = attrs;\n\n  const boxesVals = backend.readSync(boxes.dataId) as TypedArray;\n  const scoresVals = backend.readSync(scores.dataId) as TypedArray;\n\n  const maxOutputSizeVal = maxOutputSize;\n  const iouThresholdVal = iouThreshold;\n  const scoreThresholdVal = scoreThreshold;\n  const softNmsSigmaVal = softNmsSigma;\n\n  const {selectedIndices, selectedScores} = nonMaxSuppressionV5Impl(\n      boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal,\n      scoreThresholdVal, softNmsSigmaVal);\n\n  return [\n    backend.makeTensorInfo(\n        [selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n    backend.makeTensorInfo(\n        [selectedScores.length], 'float32', new Float32Array(selectedScores))\n  ];\n}\n\nexport const nonMaxSuppressionV5Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV5,\n  backendName: 'webgl',\n  kernelFunc: nonMaxSuppressionV5 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class OneHotProgram implements GPGPUProgram {\n  variableNames = ['indices'];\n  outputShape: number[];\n  userCode: string;\n\n  // Caching uniform location for speed.\n  seedLoc: WebGLUniformLocation;\n\n  constructor(\n      numIndices: number, depth: number, onValue: number, offValue: number) {\n    this.outputShape = [numIndices, depth];\n\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${offValue}), float(${onValue}),\n                      float(index == coords.y)));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OneHot, OneHotAttrs, OneHotInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {OneHotProgram} from '../onehot_gpu';\nimport {reshape} from './Reshape';\n\nexport const oneHot = (args: {\n  inputs: OneHotInputs,\n  backend: MathBackendWebGL,\n  attrs: OneHotAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {indices} = inputs;\n  const {depth, onValue, offValue} = attrs;\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n  const program = new OneHotProgram(indicesSize, depth, onValue, offValue);\n  const reshaped =\n      reshape({inputs: {x: indices}, backend, attrs: {shape: [indicesSize]}});\n  const result = backend.runWebGLProgram(program, [reshaped], indices.dtype);\n  backend.disposeIntermediateTensorInfo(reshaped);\n\n  const outShape = [...indices.shape, depth];\n  const out = reshape({inputs: {x: result}, backend, attrs: {shape: outShape}});\n  backend.disposeIntermediateTensorInfo(result);\n  return out;\n};\n\nexport const oneHotConfig: KernelConfig = {\n  kernelName: OneHot,\n  backendName: 'webgl',\n  kernelFunc: oneHot as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, ZerosLike, ZerosLikeInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\n\nexport function zerosLike(\n    args: {inputs: ZerosLikeInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = zerosLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(r);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    backend.disposeIntermediateTensorInfo(i);\n\n    return result;\n  } else {\n    return fill({\n      attrs: {\n        shape: x.shape,\n        dtype: x.dtype,\n        value: x.dtype === 'string' ? '' : 0\n      },\n      backend\n    });\n  }\n}\n\nexport const zerosLikeConfig: KernelConfig = {\n  kernelName: ZerosLike,\n  backendName: 'webgl',\n  kernelFunc: zerosLike as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OnesLike, OnesLikeInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {zerosLike} from './ZerosLike';\n\nexport function onesLike(\n    args: {inputs: OnesLikeInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (x.dtype === 'string') {\n    throw new Error('onesLike is not supported under string dtype');\n  } else if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = onesLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(r);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    backend.disposeIntermediateTensorInfo(i);\n\n    return result;\n  } else {\n    // TODO(cais, smilkov): Add WebGL shader for onesLike:\n    //   https://github.com/tensorflow/tfjs/issues/1293\n    return fill({attrs: {shape: x.shape, dtype: x.dtype, value: 1}, backend});\n  }\n}\n\nexport const onesLikeConfig: KernelConfig = {\n  kernelName: OnesLike,\n  backendName: 'webgl',\n  kernelFunc: onesLike as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Pack, PackAttrs, PackInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {concat} from './Concat';\nimport {expandDims} from './ExpandDims';\n\nexport function pack(\n    args: {inputs: PackInputs, backend: MathBackendWebGL, attrs: PackAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  if (inputs.length === 1) {\n    return expandDims(\n        {inputs: {input: inputs[0]}, backend, attrs: {dim: axis}});\n  }\n\n  const shape = inputs[0].shape;\n  const dtype = inputs[0].dtype;\n\n  inputs.forEach(t => {\n    util.assertShapesMatch(\n        shape, t.shape,\n        'All tensors passed to stack must have matching shapes');\n    util.assert(\n        dtype === t.dtype,\n        () => 'All tensors passed to stack must have matching dtypes');\n  });\n\n  const intermediateTensorInfos: TensorInfo[] = [];\n  const expandedTensors = inputs.map(t => {\n    const expandedT =\n        expandDims({inputs: {input: t}, backend, attrs: {dim: axis}});\n    intermediateTensorInfos.push(expandedT);\n    return expandedT;\n  });\n\n  const result = concat({inputs: expandedTensors, backend, attrs: {axis}});\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const packConfig: KernelConfig = {\n  kernelName: Pack,\n  backendName: 'webgl',\n  kernelFunc: pack as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType, UniformType} from './shader_compiler';\n\nexport class PadProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n  customUniforms = [{name: 'value', type: 'float' as UniformType}];\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      constantValue: number) {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const type = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const unpackedCoords =\n        ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);\n\n    if (rank === 1) {\n      this.userCode = `\n        int start = ${start};\n        int end = ${end};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `;\n      return;\n    }\n    this.userCode = `\n      ${type} start = ${type}(${start});\n      ${type} end = ${type}(${end});\n\n      void main() {\n        ${type} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${type} coords = outC - start;\n          setOutput(getX(${unpackedCoords}));\n        }\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType, UniformType} from './shader_compiler';\n\nexport class PadPackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  customUniforms = [{name: 'value', type: 'float' as UniformType}];\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      constantValue: number) {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const dtype = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const coords = getChannels('rc', rank);\n    const source = getChannels('source', rank);\n    const cLimit = `${coords[rank - 1]} < ${this.outputShape[rank - 1]}`;\n    const innerDims =\n        rank === 1 ? 'source' : `vec2(${source.slice(-2).join()})`;\n\n    const componentSetup = [\n      `${dtype} rc = outputLoc;`, `${coords[rank - 1]} += 1;\n       if(${cLimit}) {\n      `,\n      rank === 1 ? '' : `}\n       rc = outputLoc;\n       ${coords[rank - 2]} += 1;\n       if(${coords[rank - 2]} < ${this.outputShape[rank - 2]}) {`,\n      rank === 1 ? '' : `  ${coords[rank - 1]} += 1;\n         if(${cLimit}) {`\n    ];\n\n    const paddingArea = rank === 1 ?\n        'rc < start || rc >= end' :\n        'any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))';\n    let mainLoop = '';\n    for (let i = 0, j = rank === 1 ? 2 : 4; i < j; i++) {\n      mainLoop += `\n        ${componentSetup[i]}\n        if (${paddingArea}) {\n          result[${i}] = float(value);\n        } else {\n          ${dtype} source = rc - start;\n          result[${i}] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n      `;\n    }\n    mainLoop += (rank === 1 ? `} ` : `}}`);\n\n    this.userCode = `\n      const ${dtype} start = ${dtype}(${start});\n      const ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${mainLoop}\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, PadV2, PadV2Attrs, PadV2Inputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {PadProgram} from '../pad_gpu';\nimport {PadPackedProgram} from '../pad_packed_gpu';\n\nexport const padV2 =\n    (args: {inputs: PadV2Inputs, backend: MathBackendWebGL, attrs: PadV2Attrs}):\n        TensorInfo => {\n          const {inputs, backend, attrs} = args;\n          const {x} = inputs;\n          const {paddings, constantValue} = attrs;\n\n          const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n              new PadPackedProgram(x.shape, paddings, constantValue) :\n              new PadProgram(x.shape, paddings, constantValue);\n          const customValues = [[constantValue]];\n          return backend.runWebGLProgram(program, [x], x.dtype, customValues);\n        };\n\nexport const padV2Config: KernelConfig = {\n  kernelName: PadV2,\n  backendName: 'webgl',\n  kernelFunc: padV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Pow} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET} from '../binaryop_packed_gpu';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst POW = `\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n`;\n\nconst POW_PACKED = `\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  ` +\n    CHECK_NAN_SNIPPET + `\n  return result;\n`;\n\nexport const pow =\n    binaryKernelFunc({opSnippet: POW, packedOpSnippet: POW_PACKED});\n\nexport const powConfig: KernelConfig = {\n  kernelName: Pow,\n  backendName: 'webgl',\n  kernelFunc: pow as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Prod, ProdAttrs, ProdInputs, sumOutType, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {prodImplCPU} from '../kernel_utils/shared';\n\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function prod(\n    args: {inputs: ProdInputs, backend: MathBackendWebGL, attrs: ProdAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const xRank = x.shape.length;\n  const toDispose = [];\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let permutedX = x;\n  if (permutedAxes != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    toDispose.push(permutedX);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('prod', axes, xRank);\n\n  let res;\n  if (backend.shouldExecuteOnCPU([permutedX])) {\n    const xVals = backend.texData.get(permutedX.dataId).values as TypedArray;\n    const {outVals, outShape, outDtype} =\n        prodImplCPU(permutedX.shape, permutedX.dtype, xVals, axes);\n    res = backend.makeTensorInfo(outShape, outDtype, outVals);\n  } else {\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = reshape(\n        {inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n    const outputDType = sumOutType(x.dtype);\n    const reduced = reduce(a2D, outputDType, 'prod', backend);\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n\n    toDispose.push(a2D);\n    toDispose.push(reduced);\n  }\n\n  if (keepDims) {\n    toDispose.push(res);\n    const newShape = backend_util.expandShapeToKeepDim(res.shape, origAxes);\n    res = reshape({inputs: {x: res}, backend, attrs: {shape: newShape}});\n  }\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return res;\n}\n\nexport const prodConfig: KernelConfig = {\n  kernelName: Prod,\n  backendName: 'webgl',\n  kernelFunc: prod as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Range, RangeAttrs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {rangeImplCPU} from '../kernel_utils/shared';\n\nexport const range =\n    (args: {backend: MathBackendWebGL, attrs: RangeAttrs}): TensorInfo => {\n      const {backend, attrs} = args;\n      const {start, stop, step, dtype} = attrs;\n      const values = rangeImplCPU(start, stop, step, dtype);\n      return backend.makeTensorInfo([values.length], dtype, values);\n    };\n\nexport const rangeConfig: KernelConfig = {\n  kernelName: Range,\n  backendName: 'webgl',\n  kernelFunc: range as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Reciprocal} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst RECIPROCAL = `return 1.0 / x;`;\n\nexport const reciprocal = unaryKernelFunc({opSnippet: RECIPROCAL});\n\nexport const reciprocalConfig: KernelConfig = {\n  kernelName: Reciprocal,\n  backendName: 'webgl',\n  kernelFunc: reciprocal,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Relu} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst RELU = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : x;\n`;\n\nconst RELU_PACKED = `\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\nexport const relu =\n    unaryKernelFunc({opSnippet: RELU, packedOpSnippet: RELU_PACKED});\n\nexport const reluConfig: KernelConfig = {\n  kernelName: Relu,\n  backendName: 'webgl',\n  kernelFunc: relu as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Relu6} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst RELU6 = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n`;\n\nconst RELU6_PACKED = `\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\nexport const relu6 =\n    unaryKernelFunc({opSnippet: RELU6, packedOpSnippet: RELU6_PACKED});\n\nexport const relu6Config: KernelConfig = {\n  kernelName: Relu6,\n  backendName: 'webgl',\n  kernelFunc: relu6 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeBilinearProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean, halfPixelCenters: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    let sourceFracIndexRC: string;\n    if (halfPixelCenters) {\n      sourceFracIndexRC =\n          `(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC` +\n          ` - vec2(0.5)`;\n    } else {\n      sourceFracIndexRC = `vec2(yRC) * effectiveInputOverOutputRatioRC`;\n    }\n\n    this.userCode = `\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec2 inputShapeRC = vec2(${oldHeight}.0, ${oldWidth}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeBilinearPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean, halfPixelCenters: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    let sourceFracIndexRC: string;\n    if (halfPixelCenters) {\n      sourceFracIndexRC = `(vec3(yRC) + vec3(0.5)) * ` +\n          `effectiveInputOverOutputRatioRC - vec3(0.5)`;\n    } else {\n      sourceFracIndexRC = `vec3(yRC) * effectiveInputOverOutputRatioRC`;\n    }\n\n    this.userCode = `\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec3 inputShapeRC = vec3(${oldHeight}.0, ${oldWidth}.0,\n                                     ${oldWidth}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${depth - 1};\n        bool hasNextRow = coords.z < ${newWidth - 1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, ResizeBilinear, ResizeBilinearAttrs, ResizeBilinearInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ResizeBilinearProgram} from '../resize_bilinear_gpu';\nimport {ResizeBilinearPackedProgram} from '../resize_bilinear_packed_gpu';\n\nexport function resizeBilinear(args: {\n  inputs: ResizeBilinearInputs,\n  backend: MathBackendWebGL,\n  attrs: ResizeBilinearAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n\n  const [newHeight, newWidth] = size;\n\n  const program = env().getBool('WEBGL_PACK_IMAGE_OPERATIONS') ?\n      new ResizeBilinearPackedProgram(\n          images.shape as [number, number, number, number], newHeight, newWidth,\n          alignCorners, halfPixelCenters) :\n      new ResizeBilinearProgram(\n          images.shape as [number, number, number, number], newHeight, newWidth,\n          alignCorners, halfPixelCenters);\n  return backend.runWebGLProgram(program, [images], 'float32');\n}\n\nexport const resizeBilinearConfig: KernelConfig = {\n  kernelName: ResizeBilinear,\n  backendName: 'webgl',\n  kernelFunc: resizeBilinear as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeBilinearBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      dyShape: [number, number, number, number],\n      inputShape: [number, number, number, number], alignCorners: boolean) {\n    this.outputShape = inputShape;\n    const [, xHeight, xWidth, ] = inputShape;\n    const [, yHeight, yWidth] = dyShape;\n\n    // In the backwards pass, we want to find the pixels that were generated for\n    // each pixel in the input image the forward pass and add the corresponding\n    // coefficient from dy to the gradient (with some interpolation).\n\n    const effectiveXSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n      (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n    ];\n\n    const effectiveYSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n      (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n    ];\n\n    const heightScale = effectiveXSize[0] / effectiveYSize[0];\n    const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n    const invHeightScale = 1 / heightScale;\n    const invWidthScale = 1 / widthScale;\n\n    // This defines the size of the window of values around a particular\n    // index in dy that we want to search for contributions to dx.\n    const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n    const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${heightScale});\n        const float widthScale = float(${widthScale});\n\n        const float invHeightScale = float(${invHeightScale});\n        const float invWidthScale = float(${invWidthScale});\n\n        const int winHeight = int(${winHeight});\n        const int winWidth = int(${winWidth});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${yHeight}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${yWidth}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${xHeight - 1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${xWidth - 1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeBilinearGrad, ResizeBilinearGradAttrs, ResizeBilinearGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ResizeBilinearBackpropProgram} from '../resize_bilinear_backprop_gpu';\n\nexport function resizeBilinearGrad(args: {\n  inputs: ResizeBilinearGradInputs,\n  backend: MathBackendWebGL,\n  attrs: ResizeBilinearGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images, dy} = inputs;\n  const {alignCorners} = attrs;\n\n  const program = new ResizeBilinearBackpropProgram(\n      dy.shape as [number, number, number, number],\n      images.shape as [number, number, number, number], alignCorners);\n\n  return backend.runWebGLProgram(program, [dy], dy.dtype);\n}\n\nexport const resizeBilinearGradConfig: KernelConfig = {\n  kernelName: ResizeBilinearGrad,\n  backendName: 'webgl',\n  kernelFunc: resizeBilinearGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeNearestNeighborProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean, halfPixelCenters: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    // When align corners is false, we rounds the value with floor.\n    const roundBase = alignCorners ? '0.5' : '0.0';\n\n    let sourceFracIndexRC: string;\n    if (halfPixelCenters) {\n      sourceFracIndexRC =\n          `max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC` +\n          `, vec2(0.0))`;\n    } else {\n      sourceFracIndexRC = `vec2(yRC) * effectiveInputOverOutputRatioRC`;\n    }\n    this.userCode = `\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec2 inputShapeRC = vec2(${oldHeight}.0, ${oldWidth}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${roundBase})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeNearestNeighborPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean, halfPixelCenters: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    // When align corners is false, we rounds the value with floor.\n    const roundBase = alignCorners ? '0.5' : '0.0';\n    let sourceFracIndexRC: string;\n    if (halfPixelCenters) {\n      sourceFracIndexRC = `max((vec3(yRC) + vec3(0.5)) * ` +\n          `effectiveInputOverOutputRatioRC, vec3(0.0))`;\n    } else {\n      sourceFracIndexRC = `vec3(yRC) * effectiveInputOverOutputRatioRC`;\n    }\n\n    this.userCode = `\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec3 inputShapeRC = vec3(${oldHeight}.0, ${oldWidth}.0,\n                                     ${oldWidth}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${roundBase})));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${depth - 1};\n        bool hasNextRow = coords.z < ${newWidth - 1};\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, ResizeNearestNeighbor, ResizeNearestNeighborAttrs, ResizeNearestNeighborInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ResizeNearestNeighborProgram} from '../resize_nearest_neighbor_gpu';\nimport {ResizeNearestNeighborPackedProgram} from '../resize_nearest_neighbor_packed_gpu';\n\nexport function resizeNearestNeighbor(args: {\n  inputs: ResizeNearestNeighborInputs,\n  backend: MathBackendWebGL,\n  attrs: ResizeNearestNeighborAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n\n  const [newHeight, newWidth] = size;\n\n  const program = env().getBool('WEBGL_PACK_IMAGE_OPERATIONS') ?\n      new ResizeNearestNeighborPackedProgram(\n          images.shape as [number, number, number, number], newHeight, newWidth,\n          alignCorners, halfPixelCenters) :\n      new ResizeNearestNeighborProgram(\n          images.shape as [number, number, number, number], newHeight, newWidth,\n          alignCorners, halfPixelCenters);\n  return backend.runWebGLProgram(program, [images], images.dtype);\n}\n\nexport const resizeNearestNeighborConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighbor,\n  backendName: 'webgl',\n  kernelFunc: resizeNearestNeighbor as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeNearestNeigborBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      dyShape: [number, number, number, number],\n      inputShape: [number, number, number, number], alignCorners: boolean) {\n    this.outputShape = inputShape;\n    const [, xHeight, xWidth, ] = inputShape;\n    const [, yHeight, yWidth] = dyShape;\n\n    // In the backwards pass, we want to find the pixels that were generated for\n    // each pixel in the input image the forward pass and add the corresponding\n    // coefficient from dy to the gradient (with some interpolation).\n\n    const effectiveXSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n      (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n    ];\n\n    const effectiveYSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n      (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n    ];\n\n    const heightScale = effectiveXSize[0] / effectiveYSize[0];\n    const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n    const invHeightScale = 1 / heightScale;\n    const invWidthScale = 1 / widthScale;\n\n    // This defines the size of the window of values around a particular\n    // index in dy that we want to search for contributions to dx.\n    const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n    const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${heightScale});\n        const float widthScale = float(${widthScale});\n\n        const float invHeightScale = float(${invHeightScale});\n        const float invWidthScale = float(${invWidthScale});\n\n        const int winHeight = int(${winHeight});\n        const int winWidth = int(${winWidth});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${yHeight}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${yWidth}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${effectiveXSize[0]}) *\n                (float(dyR) / float(${effectiveYSize[0]}));\n\n            float sourceFracCol =\n                float(${effectiveXSize[1]}) *\n                  (float(dyC) / float(${effectiveYSize[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${xHeight}) - 1),\n                ${alignCorners} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${xWidth}) - 1),\n                ${alignCorners} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeNearestNeighborGrad, ResizeNearestNeighborGradAttrs, ResizeNearestNeighborGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ResizeNearestNeigborBackpropProgram} from '../resize_nearest_neighbor_backprop_gpu';\n\nexport function resizeNearestNeighborGrad(args: {\n  inputs: ResizeNearestNeighborGradInputs,\n  backend: MathBackendWebGL,\n  attrs: ResizeNearestNeighborGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images, dy} = inputs;\n  const {alignCorners} = attrs;\n\n  const program = new ResizeNearestNeigborBackpropProgram(\n      dy.shape as [number, number, number, number],\n      images.shape as [number, number, number, number], alignCorners);\n  return backend.runWebGLProgram(program, [dy], dy.dtype);\n}\n\nexport const resizeNearestNeighborGradConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighborGrad,\n  backendName: 'webgl',\n  kernelFunc: resizeNearestNeighborGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ReverseProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(xShape: number[], axis: number[]) {\n    const rank = xShape.length;\n    if (rank > 4) {\n      throw new Error(\n          `WebGL backend: Reverse of rank-${rank} tensor is not yet supported`);\n    }\n    this.outputShape = xShape;\n\n    if (rank === 1) {\n      this.userCode = `\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${xShape[0]} - coord - 1));\n        }\n      `;\n      return;\n    }\n    const getInCoord = (i: number) => {\n      if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {\n        return `${xShape[i]} - coords[${i}] - 1`;\n      }\n      return `coords[${i}]`;\n    };\n    const inCoords = xShape.map((_, i) => getInCoord(i)).join(',');\n    const type = getCoordsDataType(rank);\n\n    this.userCode = `\n      void main() {\n        ${type} coords = getOutputCoords();\n        setOutput(getX(${inCoords}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ReversePackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(xShape: number[], axis: number[]) {\n    const rank = xShape.length;\n    if (rank > 4) {\n      throw new Error(\n          `WebGL backend: Reverse of rank-${rank} tensor is not yet supported`);\n    }\n    this.outputShape = xShape;\n    const channels = getChannels('rc', rank);\n    const nextColumn =\n        `${channels[rank - 1]} + 1 < ${this.outputShape[rank - 1]}`;\n    const nextRow = `${channels[rank - 2]} + 1 < ${this.outputShape[rank - 2]}`;\n    const type = getCoordsDataType(rank);\n    if (rank === 1) {\n      this.userCode = `\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${xShape[0]} - rc - 1),\n            ${xShape[0]} - rc - 1);\n          if(${nextColumn}){\n              result.g = getChannel(getX(${xShape[0]} - (rc  + 1) - 1),\n                ${xShape[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `;\n    } else {\n      this.userCode = `\n        void main() {\n          ${type} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${getR(channels.slice())};\n          if(${nextColumn}){\n            result.g = ${getG(channels.slice())};\n          }\n          if(${nextRow}) {\n            result.b = ${getB(channels.slice())};\n            if(${nextColumn}) {\n              result.a = ${getA(channels.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `;\n    }\n\n    function getR(channels: string[]): string {\n      return getChannel(channels);\n    }\n\n    function getG(channels: string[]): string {\n      channels[rank - 1] = '(' + channels[rank - 1] + ` + 1)`;\n      return getChannel(channels);\n    }\n\n    function getB(channels: string[]): string {\n      channels[rank - 2] = '(' + channels[rank - 2] + ` + 1)`;\n      return getChannel(channels);\n    }\n\n    function getA(channels: string[]): string {\n      channels[rank - 1] = '(' + channels[rank - 1] + ` + 1)`;\n      channels[rank - 2] = '(' + channels[rank - 2] + ` + 1)`;\n      return getChannel(channels);\n    }\n\n    function getChannel(channels: string[]): string {\n      const inCoordsArray = xShape.map((_, i) => getInCoord(i, channels));\n      const inCoords = inCoordsArray.join(',');\n      const innerDims = inCoordsArray.slice(-2).join(',');\n      return `getChannel(getX(${inCoords}), vec2(${innerDims}))`;\n    }\n\n    function getInCoord(i: number, channels1: string[]): string {\n      if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {\n        return `${xShape[i]} - ${channels1[i]} - 1`;\n      } else {\n        return `${channels1[i]}`;\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, Reverse, ReverseAttrs, ReverseInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ReverseProgram} from '../reverse_gpu';\nimport {ReversePackedProgram} from '../reverse_packed_gpu';\n\nimport {identity} from './Identity';\n\nexport function reverse(args: {\n  inputs: ReverseInputs,\n  backend: MathBackendWebGL,\n  attrs: ReverseAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dims} = attrs;\n\n  const xRank = x.shape.length;\n\n  const $dims = util.parseAxisParam(dims, x.shape);\n  if (xRank === 0) {\n    return identity({inputs: {x}, backend});\n  }\n\n  const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n      new ReversePackedProgram(x.shape, $dims) :\n      new ReverseProgram(x.shape, $dims);\n\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const reverseConfig: KernelConfig = {\n  kernelName: Reverse,\n  backendName: 'webgl',\n  kernelFunc: reverse as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\nexport class RotateProgram implements GPGPUProgram {\n  variableNames = ['Image'];\n  outputShape: number[] = [];\n  userCode: string;\n  customUniforms = [{name: 'params', type: 'vec4' as UniformType}];\n  constructor(\n      imageShape: [number, number, number, number],\n      fillValue: number|[number, number, number]) {\n    const imageHeight = imageShape[1];\n    const imageWidth = imageShape[2];\n    this.outputShape = imageShape;\n\n    let fillSnippet = '';\n    if (typeof fillValue === 'number') {\n      fillSnippet = `float outputValue = ${fillValue.toFixed(2)};`;\n    } else {\n      fillSnippet = `\n        vec3 fill = vec3(${fillValue.join(',')});\n        float outputValue = fill[coords[3]];`;\n    }\n\n    this.userCode = `\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${fillSnippet}\n          if(coordX >= 0 && coordX < ${imageWidth} && coordY >= 0 && coordY < ${\n        imageHeight}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, Tensor4D} from '@tensorflow/tfjs-core';\nimport {RotateWithOffset, RotateWithOffsetAttrs, RotateWithOffsetInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {RotateProgram} from '../rotate_gpu';\n\nexport const rotateWithOffsetConfig: KernelConfig = {\n  kernelName: RotateWithOffset,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {image} = inputs as RotateWithOffsetInputs;\n    const {radians, fillValue, center} = attrs as {} as RotateWithOffsetAttrs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    const program = new RotateProgram((image as Tensor4D).shape, fillValue);\n    const [centerX, centerY] =\n        backend_util.getImageCenter(center, image.shape[1], image.shape[2]);\n    const customValues =\n        [[centerX, centerY, Math.sin(radians), Math.cos(radians)]];\n    const output = webglBackend.runWebGLProgram(\n        program, [image], image.dtype, customValues);\n    return output;\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Round} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst ROUND = `\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n`;\n\nexport const round = unaryKernelFunc({opSnippet: ROUND});\n\nexport const roundConfig: KernelConfig = {\n  kernelName: Round,\n  backendName: 'webgl',\n  kernelFunc: round,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Rsqrt} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {rsqrtImplCPU} from '../kernel_utils/shared';\n\nconst RSQRT = `return inversesqrt(x);`;\n\nexport const rsqrt =\n    unaryKernelFunc({opSnippet: RSQRT, cpuKernelImpl: rsqrtImplCPU});\n\nexport const rsqrtConfig: KernelConfig = {\n  kernelName: Rsqrt,\n  backendName: 'webgl',\n  kernelFunc: rsqrt as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ScatterProgram implements GPGPUProgram {\n  variableNames = ['updates', 'indices', 'defaultValue'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      updateSize: number, sliceDim: number, indicesRank: number,\n      updatesRank: number, strides: number[], shape: number[],\n      summingDupeIndex = true) {\n    this.outputShape = shape;\n    const stridesType = getCoordsDataType(strides.length);\n    const dtype = getCoordsDataType(shape.length);\n    let indicesString = '';\n    if (indicesRank === 1) {\n      indicesString = 'i';\n    } else if (indicesRank === 2) {\n      indicesString = 'i, j';\n    }\n    const indicesSnippet = `getIndices(${indicesString})`;\n\n    let updatesString = '';\n    if (updatesRank === 1) {\n      updatesString = 'i';\n    } else if (updatesRank === 2) {\n      updatesString = 'i, coords[1]';\n    }\n    const updatesSnippet = `getUpdates(${updatesString})`;\n\n    const strideString = sliceDim > 1 ? 'strides[j]' : 'strides';\n    this.userCode = `\n        ${stridesType} strides = ${stridesType}(${strides});\n\n        void main() {\n          ${dtype} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${updateSize}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${sliceDim}; j++) {\n              int index = round(${indicesSnippet});\n              flattenedIndex += index * ${strideString};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${updatesSnippet};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, ScatterNd, ScatterNdAttrs, ScatterNdInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ScatterProgram} from '../scatter_gpu';\nimport {reshape} from './Reshape';\n\nexport function scatterNd(args: {\n  inputs: ScatterNdInputs,\n  backend: MathBackendWebGL,\n  attrs: ScatterNdAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {indices, updates} = inputs;\n  const {shape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(updates, indices, shape);\n\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n\n  if (outputSize === 0) {\n    return backend.makeTensorInfo(shape, indices.dtype);\n  }\n\n  const flattenIndices = reshape(\n      {inputs: {x: indices}, backend, attrs: {shape: [numUpdates, sliceRank]}});\n  const flattenX = reshape(\n      {inputs: {x: updates}, backend, attrs: {shape: [numUpdates, sliceSize]}});\n\n  const defaultValue = backend.makeTensorInfo(\n      [], 'float32', new Float32Array([0]));  // scalar(0)\n  const program = new ScatterProgram(\n      numUpdates, sliceRank, flattenIndices.shape.length, flattenX.shape.length,\n      strides, flattenShape);\n  const res = backend.runWebGLProgram(\n      program, [flattenX, flattenIndices, defaultValue], flattenX.dtype);\n\n  const reshaped = reshape({inputs: {x: res}, backend, attrs: {shape}});\n\n  backend.disposeIntermediateTensorInfo(flattenIndices);\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(res);\n  backend.disposeIntermediateTensorInfo(defaultValue);\n\n  return reshaped;\n}\n\nexport const scatterNdConfig: KernelConfig = {\n  kernelName: ScatterNd,\n  backendName: 'webgl',\n  kernelFunc: scatterNd as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class SelectProgram implements GPGPUProgram {\n  variableNames = ['c', 'a', 'b'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(cRank: number, shape: number[], rank: number) {\n    this.outputShape = shape;\n\n    let cCoords;\n    let abCoords;\n    if (rank > 4) {\n      throw Error(`Where for rank ${rank} is not yet supported`);\n    }\n\n    if (rank === 1) {\n      abCoords = `resRC`;\n      cCoords = `resRC`;\n    } else {\n      const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n      const cCoordVars = [];\n      const abCoordVars = [];\n      for (let i = 0; i < shape.length; i++) {\n        abCoordVars.push(`${currentCoords[i]}`);\n        if (i < cRank) {\n          cCoordVars.push(`${currentCoords[i]}`);\n        }\n      }\n      cCoords = cCoordVars.join();\n      abCoords = abCoordVars.join();\n    }\n\n    const dtype = getCoordsDataType(rank);\n\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        float cVal = getC(${cCoords});\n        if (cVal >= 1.0) {\n          setOutput(getA(${abCoords}));\n        } else {\n          setOutput(getB(${abCoords}));\n        }\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Select, SelectInputs, TensorInfo, upcastType} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {SelectProgram} from '../select_gpu';\n\nexport function select(args: {inputs: SelectInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {condition, t, e} = inputs;\n\n  const program =\n      new SelectProgram(condition.shape.length, t.shape, t.shape.length);\n  return backend.runWebGLProgram(\n      program, [condition, t, e], upcastType(t.dtype, e.dtype));\n}\n\nexport const selectConfig: KernelConfig = {\n  kernelName: Select,\n  backendName: 'webgl',\n  kernelFunc: select as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, Selu} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SELU = `\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${backend_util.SELU_SCALEALPHA};\n  float scale = ${backend_util.SELU_SCALE};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`;\n\nexport const selu = unaryKernelFunc({opSnippet: SELU});\n\nexport const seluConfig: KernelConfig = {\n  kernelName: Selu,\n  backendName: 'webgl',\n  kernelFunc: selu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sigmoid} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SIGMOID = `return 1.0 / (1.0 + exp(-1.0 * x));`;\n\nexport const sigmoid = unaryKernelFunc({opSnippet: SIGMOID});\n\nexport const sigmoidConfig: KernelConfig = {\n  kernelName: Sigmoid,\n  backendName: 'webgl',\n  kernelFunc: sigmoid,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sign} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\n// Sign does not propagate NANs.\nconst SIGN = `\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n`;\n\nexport const sign = unaryKernelFunc({opSnippet: SIGN});\n\nexport const signConfig: KernelConfig = {\n  kernelName: Sign,\n  backendName: 'webgl',\n  kernelFunc: sign,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sin} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SIN = CHECK_NAN_SNIPPET_UNARY + `\n  return sin(x);\n`;\n\nexport const sin = unaryKernelFunc({opSnippet: SIN});\n\nexport const sinConfig: KernelConfig = {\n  kernelName: Sin,\n  backendName: 'webgl',\n  kernelFunc: sin,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sinh} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SINH = `\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n`;\n\nexport const sinh = unaryKernelFunc({opSnippet: SINH});\n\nexport const sinhConfig: KernelConfig = {\n  kernelName: Sinh,\n  backendName: 'webgl',\n  kernelFunc: sinh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Softplus} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SOFTPLUS = `\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n`;\n\nexport const softplus = unaryKernelFunc({opSnippet: SOFTPLUS});\n\nexport const softplusConfig: KernelConfig = {\n  kernelName: Softplus,\n  backendName: 'webgl',\n  kernelFunc: softplus,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, SpaceToBatchND, SpaceToBatchNDAttrs, SpaceToBatchNDInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {padV2} from './PadV2';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport const spaceToBatchND = (args: {\n  inputs: SpaceToBatchNDInputs,\n  backend: MathBackendWebGL,\n  attrs: SpaceToBatchNDAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, paddings} = attrs;\n\n  util.assert(\n      x.shape.length <= 4,\n      () => 'spaceToBatchND for rank > 4 with a WebGL backend not ' +\n          'implemented yet');\n\n  const prod = blockShape.reduce((a, b) => a * b);\n\n  const completePaddings: Array<[number, number]> = [[0, 0]];\n  completePaddings.push(...paddings as Array<[number, number]>);\n  for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n    completePaddings.push([0, 0]);\n  }\n\n  const toDispose = [];\n\n  const paddedX = padV2({\n    inputs: {x},\n    backend,\n    attrs: {paddings: completePaddings, constantValue: 0}\n  });\n\n  const reshapedPaddedShape =\n      backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n\n  const permutedReshapedPaddedPermutation = backend_util.getPermuted(\n      reshapedPaddedShape.length, blockShape.length, false);\n\n  const flattenShape =\n      backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);\n\n  const reshapedPaddedX = reshape(\n      {inputs: {x: paddedX}, backend, attrs: {shape: reshapedPaddedShape}});\n\n  const paddedXT = transpose({\n    inputs: {x: reshapedPaddedX},\n    backend,\n    attrs: {perm: permutedReshapedPaddedPermutation}\n  });\n\n  const result =\n      reshape({inputs: {x: paddedXT}, backend, attrs: {shape: flattenShape}});\n\n  toDispose.push(paddedX);\n  toDispose.push(reshapedPaddedX);\n  toDispose.push(paddedXT);\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n};\n\nexport const spaceToBatchNDConfig: KernelConfig = {\n  kernelName: SpaceToBatchND,\n  backendName: 'webgl',\n  kernelFunc: spaceToBatchND as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SparseFillEmptyRows, SparseFillEmptyRowsInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {sparseFillEmptyRowsImplCPU} from '../kernel_utils/shared';\n\nexport function sparseFillEmptyRows(args: {\n  inputs: SparseFillEmptyRowsInputs,\n  backend: MathBackendWebGL\n}): [TensorInfo, TensorInfo, TensorInfo, TensorInfo] {\n  const {inputs, backend} = args;\n  const {indices, values, denseShape, defaultValue} = inputs;\n  if (denseShape.shape.length !== 1) {\n    throw new Error(`Dense shape must be a vector, saw:\n         ${denseShape.shape}`);\n  }\n  if (indices.shape.length !== 2) {\n    throw new Error(`Indices must be a matrix, saw:\n         ${indices.shape}`);\n  }\n  if (values.shape.length !== 1) {\n    throw new Error(`Values must be a vector, saw:\n         ${values.shape}`);\n  }\n  if (defaultValue.shape.length !== 0) {\n    throw new Error(`Default value must be a scalar, saw:\n        ${defaultValue.shape}`);\n  }\n\n  const $indices = backend.readSync(indices.dataId) as TypedArray;\n  const $values = backend.readSync(values.dataId) as TypedArray;\n  const $denseShape = backend.readSync(denseShape.dataId) as TypedArray;\n  const $defaultValue =\n      backend.readSync(defaultValue.dataId)[0] as number;\n\n  const [outputIndices, outputIndicesShape, outputValues,\n         emptyRowIndicator, reverseIndexMap] =\n      sparseFillEmptyRowsImplCPU(\n          $indices, indices.shape, indices.dtype, $values, values.dtype,\n          $denseShape, $defaultValue);\n  return [\n    backend.makeTensorInfo(outputIndicesShape, indices.dtype, outputIndices),\n    backend.makeTensorInfo(\n        [outputIndicesShape[0]], values.dtype, outputValues),\n    backend.makeTensorInfo(\n        [emptyRowIndicator.length], 'bool',\n        new Uint8Array(\n            emptyRowIndicator.map((value: boolean) => Number(value)))),\n    backend.makeTensorInfo(\n        [reverseIndexMap.length], indices.dtype,\n        new Int32Array(reverseIndexMap)),\n  ];\n}\n\nexport const sparseFillEmptyRowsConfig: KernelConfig = {\n  kernelName: SparseFillEmptyRows,\n  backendName: 'webgl',\n  kernelFunc: sparseFillEmptyRows as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SparseReshape, SparseReshapeInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {sparseReshapeImplCPU} from '../kernel_utils/shared';\n\nexport function sparseReshape(\n    args: {inputs: SparseReshapeInputs, backend: MathBackendWebGL}):\n    [TensorInfo, TensorInfo] {\n  const {inputs, backend} = args;\n  const {inputIndices, inputShape, newShape} = inputs;\n  if (inputIndices.shape.length !== 2) {\n    throw new Error(`Input indices should be a matrix but received shape ${\n        inputIndices.shape}`);\n  }\n  if (inputShape.shape.length !== 1) {\n    throw new Error(`Input shape should be a vector but received shape ${\n        inputShape.shape}`);\n  }\n\n  if (newShape.shape.length !== 1) {\n    throw new Error(\n        `Target shape should be a vector but received shape ${newShape.shape}`);\n  }\n\n  const $inputShape =\n      Array.from(backend.readSync(inputShape.dataId) as TypedArray);\n  const $inputIndices = backend.readSync(inputIndices.dataId) as TypedArray;\n  const targetShape =\n      Array.from(backend.readSync(newShape.dataId) as TypedArray);\n\n  const [newIndices, indicesShape, outputShape] = sparseReshapeImplCPU(\n      $inputIndices, inputIndices.shape, inputIndices.dtype, $inputShape,\n      targetShape);\n  return [\n    backend.makeTensorInfo(indicesShape, inputIndices.dtype, newIndices),\n    backend.makeTensorInfo(\n        [outputShape.length], newShape.dtype, new Int32Array(outputShape)),\n  ];\n}\n\nexport const sparseReshapeConfig: KernelConfig = {\n  kernelName: SparseReshape,\n  backendName: 'webgl',\n  kernelFunc: sparseReshape,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SparseSegmentMean, SparseSegmentMeanInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {sparseSegmentReductionImplCPU} from '../kernel_utils/shared';\n\nexport function sparseSegmentMean(\n    args: {inputs: SparseSegmentMeanInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {data, indices, segmentIds} = inputs;\n  if (data.shape.length < 1) {\n    throw new Error(\n        `Data should be at least 1 dimensional but received scalar`);\n  }\n  if (indices.shape.length !== 1) {\n    throw new Error(`Indices should be a vector but received shape\n              ${indices.shape}`);\n  }\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(`Segment ids should be a vector but received shape\n              ${segmentIds.shape}`);\n  }\n\n  const $data = backend.readSync(data.dataId) as TypedArray;\n  const $indices = backend.readSync(indices.dataId) as TypedArray;\n  const $segmentIds = backend.readSync(segmentIds.dataId) as TypedArray;\n\n  const [outputData, outputDataShape] = sparseSegmentReductionImplCPU(\n      $data, data.shape, data.dtype, $indices, $segmentIds, true);\n  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\n\nexport const sparseSegmentMeanConfig: KernelConfig = {\n  kernelName: SparseSegmentMean,\n  backendName: 'webgl',\n  kernelFunc: sparseSegmentMean as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SparseSegmentSum, SparseSegmentSumInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {sparseSegmentReductionImplCPU} from '../kernel_utils/shared';\n\nexport function sparseSegmentSum(\n    args: {inputs: SparseSegmentSumInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {data, indices, segmentIds} = inputs;\n  if (data.shape.length < 1) {\n    throw new Error(\n        `Data should be at least 1 dimensional but received scalar`);\n  }\n  if (indices.shape.length !== 1) {\n    throw new Error(`Indices should be a vector but received shape\n             ${indices.shape}`);\n  }\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(`Segment ids should be a vector but received shape\n             ${segmentIds.shape}`);\n  }\n\n  const $data = backend.readSync(data.dataId) as TypedArray;\n  const $indices = backend.readSync(indices.dataId) as TypedArray;\n  const $segmentIds = backend.readSync(segmentIds.dataId) as TypedArray;\n\n  const [outputData, outputDataShape] = sparseSegmentReductionImplCPU(\n      $data, data.shape, data.dtype, $indices, $segmentIds);\n  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\n\nexport const sparseSegmentSumConfig: KernelConfig = {\n  kernelName: SparseSegmentSum,\n  backendName: 'webgl',\n  kernelFunc: sparseSegmentSum as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, SparseToDense, SparseToDenseAttrs, SparseToDenseInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ScatterProgram} from '../scatter_gpu';\nimport {reshape} from './Reshape';\n\nexport function sparseToDense(args: {\n  inputs: SparseToDenseInputs,\n  backend: MathBackendWebGL,\n  attrs: SparseToDenseAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {sparseIndices, sparseValues, defaultValue} = inputs;\n  const {outputShape} = attrs;\n\n  const {sliceRank, numUpdates, strides, outputSize} =\n      backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n\n  const sumDupeIndices = false;\n  const program = new ScatterProgram(\n      numUpdates, sliceRank, sparseIndices.shape.length,\n      sparseValues.shape.length, strides, [outputSize, 1], sumDupeIndices);\n\n  const res = backend.runWebGLProgram(\n      program, [sparseValues, sparseIndices, defaultValue], sparseValues.dtype);\n\n  const reshaped =\n      reshape({inputs: {x: res}, backend, attrs: {shape: outputShape}});\n\n  backend.disposeIntermediateTensorInfo(res);\n  return reshaped;\n}\n\nexport const sparseToDenseConfig: KernelConfig = {\n  kernelName: SparseToDense,\n  backendName: 'webgl',\n  kernelFunc: sparseToDense as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, SplitV, SplitVAttrs, SplitVInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {slice} from './Slice';\n\nexport function splitV(\n    args:\n        {inputs: SplitVInputs, backend: MathBackendWebGL, attrs: SplitVAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {numOrSizeSplits, axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, x.shape)[0];\n  const splitSizes = backend_util.prepareSplitSize(x, numOrSizeSplits, $axis);\n\n  const xRank = x.shape.length;\n  const begin = new Array(xRank).fill(0);\n  const size = x.shape.slice();\n\n  return splitSizes.map(s => {\n    const sliceSize = [...size];\n    sliceSize[$axis] = s;\n    const sliceT =\n        slice({inputs: {x}, backend, attrs: {begin, size: sliceSize}});\n    begin[$axis] += s;\n    return sliceT;\n  });\n}\n\nexport const splitVConfig: KernelConfig = {\n  kernelName: SplitV,\n  backendName: 'webgl',\n  kernelFunc: splitV as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Sqrt} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SQRT = `return sqrt(x);`;\n\nexport const sqrt = unaryKernelFunc({opSnippet: SQRT});\n\nexport const sqrtConfig: KernelConfig = {\n  kernelName: Sqrt,\n  backendName: 'webgl',\n  kernelFunc: sqrt as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Square} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SQUARE = `return x * x;`;\n\nexport const square = unaryKernelFunc({opSnippet: SQUARE});\n\nexport const squareConfig: KernelConfig = {\n  kernelName: Square,\n  backendName: 'webgl',\n  kernelFunc: square,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SquaredDifference} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SQUARED_DIFFERENCE = 'return (a - b) * (a - b);';\n\nexport const squaredDifference = binaryKernelFunc(\n    {opSnippet: SQUARED_DIFFERENCE, packedOpSnippet: SQUARED_DIFFERENCE});\n\nexport const squaredDifferenceConfig: KernelConfig = {\n  kernelName: SquaredDifference,\n  backendName: 'webgl',\n  kernelFunc: squaredDifference,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Step, StepAttrs, TensorInfo, UnaryInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {CHECK_NAN_SNIPPET, UnaryOpProgram} from '../unaryop_gpu';\n\nexport function step(\n    {inputs, attrs, backend}:\n        {inputs: UnaryInputs, attrs: StepAttrs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {x} = inputs;\n  const opSnippet = CHECK_NAN_SNIPPET + `\n    return x > 0.0 ? 1.0 : float(${attrs.alpha});\n  `;\n\n  const program = new UnaryOpProgram(x.shape, opSnippet);\n\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const stepConfig: KernelConfig = {\n  kernelName: Step,\n  backendName: 'webgl',\n  kernelFunc: step as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class StridedSliceProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(begin: number[], strides: number[], size: number[]) {\n    this.outputShape = size;\n    const rank = size.length;\n    const inputDtype = getCoordsDataType(size.length);\n    const dtype = getCoordsDataType(size.length);\n\n    let newCoords = '';\n    if (rank === 1) {\n      newCoords = 'coords * strides + begin';\n    } else {\n      let outputAxis = 0;\n      newCoords =\n          size.map((_, i) => {\n                outputAxis++;\n                return size.length === 1 ?\n                    `coords * strides[${i}] + begin[${i}]` :\n                    `coords[${outputAxis - 1}] * strides[${i}] + begin[${i}]`;\n              })\n              .join(',');\n    }\n\n    this.userCode = `\n      ${inputDtype} begin = ${inputDtype}(${begin});\n      ${inputDtype} strides = ${inputDtype}(${strides});\n\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        setOutput(getX(${newCoords}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, KernelConfig, KernelFunc, Rank, slice_util, StridedSlice, StridedSliceAttrs, StridedSliceInputs, TensorBuffer, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {stridedSliceImplCPU} from '../kernel_utils/shared';\nimport {StridedSliceProgram} from '../strided_slice_gpu';\n\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\n\nexport function stridedSlice(args: {\n  inputs: StridedSliceInputs,\n  backend: MathBackendWebGL,\n  attrs: StridedSliceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {\n    begin,\n    end,\n    strides,\n    beginMask,\n    endMask,\n    ellipsisMask,\n    newAxisMask,\n    shrinkAxisMask\n  } = attrs;\n\n  const {nonStrided, $begin, $strides, size, newShape, outShape} =\n      slice_util.sliceInfo(\n          x.shape, begin, end, strides, beginMask, endMask, ellipsisMask,\n          newAxisMask, shrinkAxisMask);\n\n  const $x = reshape({inputs: {x}, backend, attrs: {shape: newShape}});\n\n  let result;\n  if (nonStrided) {\n    const sliced =\n        slice({inputs: {x: $x}, backend, attrs: {begin: $begin, size}});\n    result = reshape({inputs: {x: sliced}, backend, attrs: {shape: outShape}});\n\n    backend.disposeIntermediateTensorInfo(sliced);\n  } else if (outShape.some(axis => axis === 0)) {\n    result = backend.makeTensorInfo(outShape, x.dtype, []);\n  } else {\n    const shouldExecuteOnCPU = backend.shouldExecuteOnCPU([$x]);\n    if (shouldExecuteOnCPU) {\n      const xTexData = backend.texData.get($x.dataId);\n      const values = xTexData.values as TypedArray;\n      const xBuf = buffer($x.shape, $x.dtype, values) as TensorBuffer<Rank>;\n      const resultValues =\n          stridedSliceImplCPU(outShape, xBuf, $strides, $begin);\n      result = backend.makeTensorInfo(outShape, $x.dtype, resultValues.values);\n    } else {\n      const program = new StridedSliceProgram($begin, $strides, outShape);\n      result = backend.runWebGLProgram(program, [$x], $x.dtype);\n    }\n  }\n\n  const resultReshaped =\n      reshape({inputs: {x: result}, backend, attrs: {shape: outShape}});\n\n  backend.disposeIntermediateTensorInfo($x);\n  backend.disposeIntermediateTensorInfo(result);\n\n  return resultReshaped;\n}\n\nexport const stridedSliceConfig: KernelConfig = {\n  kernelName: StridedSlice,\n  backendName: 'webgl',\n  kernelFunc: stridedSlice as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringNGrams, StringNGramsAttrs, StringNGramsInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {stringNGramsImplCPU} from '../kernel_utils/shared';\n\nexport function stringNGrams(args: {\n  inputs: StringNGramsInputs,\n  backend: MathBackendWebGL,\n  attrs: StringNGramsAttrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {\n    separator,\n    nGramWidths,\n    leftPad,\n    rightPad,\n    padWidth,\n    preserveShortSequences\n  } = attrs;\n  const {data, dataSplits} = inputs;\n  const $data = backend.readSync(data.dataId) as Uint8Array[];\n  const $dataSplits = backend.readSync(dataSplits.dataId) as Int32Array;\n\n  const [nGrams, nGramsSplits] = stringNGramsImplCPU(\n      $data, $dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth,\n      preserveShortSequences);\n  return [\n    backend.makeTensorInfo([nGrams.length], 'string', nGrams),\n    backend.makeTensorInfo(dataSplits.shape, 'int32', nGramsSplits),\n  ];\n}\n\nexport const stringNGramsConfig: KernelConfig = {\n  kernelName: StringNGrams,\n  backendName: 'webgl',\n  kernelFunc: stringNGrams as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringSplit, StringSplitAttrs, StringSplitInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {stringSplitImplCPU} from '../kernel_utils/shared';\n\nexport function stringSplit(args: {\n  inputs: StringSplitInputs,\n  backend: MathBackendWebGL,\n  attrs: StringSplitAttrs\n}): [TensorInfo, TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {skipEmpty} = attrs;\n  const {input, delimiter} = inputs;\n\n  if (input.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n  if (input.shape.length !== 1) {\n    throw new Error(`Input must be a vector, got shape: ${input.shape}`);\n  }\n  if (delimiter.shape.length !== 0) {\n    throw new Error(\n        `Delimiter must be a scalar, got shape: ${delimiter.shape}`);\n  }\n\n  const $input = backend.readSync(input.dataId) as Uint8Array[];\n  const $delimiter = backend.readSync(delimiter.dataId)[0] as Uint8Array;\n\n  const [indices, values, shape] =\n      stringSplitImplCPU($input, $delimiter, skipEmpty);\n  const outputSize = values.length;\n  return [\n    backend.makeTensorInfo([outputSize, 2], 'int32', indices),\n    backend.makeTensorInfo([outputSize], 'string', values),\n    backend.makeTensorInfo([2], 'int32', new Int32Array(shape))\n  ];\n}\n\nexport const stringSplitConfig: KernelConfig = {\n  kernelName: StringSplit,\n  backendName: 'webgl',\n  kernelFunc: stringSplit as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringToHashBucketFast, StringToHashBucketFastAttrs, StringToHashBucketFastInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {stringToHashBucketFastImplCPU} from '../kernel_utils/shared';\n\nexport function stringToHashBucketFast(args: {\n  inputs: StringToHashBucketFastInputs,\n  backend: MathBackendWebGL,\n  attrs: StringToHashBucketFastAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {numBuckets} = attrs;\n  const {input} = inputs;\n\n  if (input.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n  if (numBuckets <= 0) {\n    throw new Error(`Number of buckets must be at least 1`);\n  }\n\n  const $input = backend.readSync(input.dataId) as Uint8Array[];\n\n  const output = stringToHashBucketFastImplCPU($input, numBuckets);\n  return backend.makeTensorInfo(input.shape, 'int32', output);\n}\n\nexport const stringToHashBucketFastConfig: KernelConfig = {\n  kernelName: StringToHashBucketFast,\n  backendName: 'webgl',\n  kernelFunc: stringToHashBucketFast as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tan} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst TAN = `return tan(x);`;\n\nexport const tan = unaryKernelFunc({opSnippet: TAN});\n\nexport const tanConfig: KernelConfig = {\n  kernelName: Tan,\n  backendName: 'webgl',\n  kernelFunc: tan,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tanh} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst TANH = `\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n`;\n\nexport const tanh = unaryKernelFunc({opSnippet: TANH});\n\nexport const tanhConfig: KernelConfig = {\n  kernelName: Tanh,\n  backendName: 'webgl',\n  kernelFunc: tanh,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class TileProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  constructor(aShape: number[], reps: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[i] * reps[i];\n    }\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const sourceCoords = getSourceCoords(aShape);\n\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        setOutput(getA(${sourceCoords}));\n      }\n    `;\n  }\n}\n\nfunction getSourceCoords(aShape: number[]): string {\n  const rank = aShape.length;\n  if (rank > 5) {\n    throw Error(`Tile for rank ${rank} is not yet supported`);\n  }\n  if (rank === 1) {\n    return `imod(resRC, ${aShape[0]})`;\n  }\n\n  const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u'];\n\n  const sourceCoords = [];\n  for (let i = 0; i < aShape.length; i++) {\n    sourceCoords.push(`imod(${currentCoords[i]}, ${aShape[i]})`);\n  }\n  return sourceCoords.join();\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, KernelConfig, KernelFunc, TensorInfo, Tile, TileAttrs, TileInputs, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {tileImplCPU} from '../kernel_utils/shared';\nimport {TileProgram} from '../tile_gpu';\n\nexport function tile(\n    params: {inputs: TileInputs, backend: MathBackendWebGL, attrs: TileAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = params;\n  const {x} = inputs;\n  const {reps} = attrs;\n\n  // tile gpu program cannot handle rank > 5 case.\n  if (x.dtype === 'string' || x.shape.length > 5) {\n    // Even thought string tensor is always on CPU, just to be consistent on how\n    // to access tensor data.\n    const data = backend.readSync(x.dataId);\n    const value = x.dtype === 'string' ?\n        (data as Uint8Array[]).map(d => util.decodeString(d)) :\n        data as TypedArray;\n    const buf = buffer(x.shape, x.dtype, value);\n    const outBuf = tileImplCPU(buf, reps);\n    return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n  }\n\n  const program = new TileProgram(x.shape, reps);\n  const output = backend.runWebGLProgram(program, [x], x.dtype);\n\n  return output;\n}\n\nexport const tileConfig: KernelConfig = {\n  kernelName: Tile,\n  backendName: 'webgl',\n  kernelFunc: tile as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\n// Based on Algorithm 2 of Bitonic Top K, ref:\n// https://anilshanbhag.in/static/papers/gputopk_sigmod18.pdf\n// The original algorithm is based on computing the top K only, however\n// since for TFJS we require the indices of the top K values as well then the\n// algorithm found here is a bit modified. Rather than producing the values\n// at each step, the indices containing the top K are generated instead.\n// The output values are not generated to reduce the number of outputs in the\n// GPU, the values can easily be retrieved from the indices using a gather\n// op.\nexport class SwapProgram implements GPGPUProgram {\n  variableNames = ['x', 'indices'];\n  outputShape: number[];\n  userCode: string;\n  // |n| Size of the original input of TopK.\n  // |firstPass|indicates if this is the first time swap is being used which\n  // means no indices input containing the top K is present yet.\n  // |inc| Swaps pairs of indices (0, inc), (1, inc + 1), (2, inc + 2) ...\n  customUniforms = [\n    {name: 'n', type: 'int' as UniformType},\n    {name: 'firstPass', type: 'int' as UniformType},\n    {name: 'negativeInf', type: 'float' as UniformType},\n    {name: 'dir', type: 'int' as UniformType},\n    {name: 'inc', type: 'int' as UniformType}\n  ];\n\n  /**\n   * @param shape desired output shape (can be larger than input shape, output\n   *                                    will be padded with -Infinity)\n   */\n  constructor(shape: number[]) {\n    this.outputShape = shape;\n\n    this.userCode = `\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // We compare elements pair-wise within a group of size 2 * inc.\n         // The comparing rule for each group alternates between ascending\n         // and descending. Within each group, we compare each pair at\n         // positions i and i+inc. To decide whether an element at position i\n         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n         // inc, it is in the first half of the group, we denote it as x0,\n         // otherwise we denote it as x1.\n         // For example, as shown in the Bitonic top K paper referenced above,\n         // Figure5(a) shows that element[1] is in the\n         // second half of the group when group size is 2, but it is in the\n         // first half of the group when group size is 4.\n\n         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;\n         int i = isFirstInPair ? elemIdx : elemIdx - inc;\n\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));\n         float x0 = i0 < n ? getX(batch, i0) : negativeInf;\n         float x1 = i1 < n ? getX(batch, i1) : negativeInf;\n\n         // Denotes which direction indices are in (ascending or descending).\n         bool reverse = imod(elemIdx, 2 * dir) >= dir;\n         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n         if (reverse == isGreater) { // Elements in opposite order of direction\n           int iTemp = i0;\n           i0 = i1;\n           i1 = iTemp;\n         }\n         if (isFirstInPair) {\n            setOutput(float(i0));\n         } else {\n            setOutput(float(i1));\n         }\n       }\n     `;\n  }\n}\n\nexport class MergeProgram implements GPGPUProgram {\n  variableNames = ['x', 'indices'];\n  outputShape: number[];\n  userCode: string;\n  // |n| Size of the original input of TopK\n  // |firstPass| indicates if this is the first time swap is being used which\n  // means no indices input containing the top K is present yet.\n  // |k| Top k elements desired\n  customUniforms = [\n    {name: 'n', type: 'int' as UniformType},\n    {name: 'firstPass', type: 'int' as UniformType},\n    {name: 'k', type: 'int' as UniformType}\n  ];\n\n  /**\n   * @param shape desired output shape (must be half of the input size)\n   */\n  constructor(shape: number[]) {\n    this.outputShape = shape;\n\n    this.userCode = `\n    void main() {\n         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // The output size is half of the previous size.\n         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),\n         // we only need to output the indices at positions |, the indices at\n         // positions _ can be thrown away, see Figure5(b) After Phase 2\n         // (Merge phase) in the Bitonic Top K paper referenced above.\n         // For example, the paper shows we only need to output the orange bars.\n         // The output sequence should look like this | | | | | | | |.\n         // Because the sequence is halved, to map the output index back\n         // to the previous sequence to find the corresponding value,\n         // we need to double the index. When we double the index,\n         // we basically interpolate a position, so 2i looks like\n         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position\n         // of each 2k positions by - elemIdx % k. E.g. for output at\n         // index 4,5,6,7, we want to get the corresponding element at\n         // original index 8,9,10,11, for output at index 8,9,10,11,\n         // we want to get the corresponding element at original index\n         // 16,17,18,19, so on and so forth.\n\n         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));\n\n         float x0 = getX(batch, i0);\n         float x1 = i1 < n ? getX(batch, i1) : x0;\n\n         setOutput(x0 >= x1 ? float(i0) : float(i1));\n       }\n     `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, NumericDataType, TensorInfo, TopK, TopKAttrs, TopKInputs, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {topKImplCPU} from '../kernel_utils/shared';\nimport {MergeProgram, SwapProgram} from '../top_k_gpu';\nimport {fill} from './Fill';\nimport {gatherV2} from './GatherV2';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\n\nfunction disposeIntermediateTensorInfoOrNull(\n    backend: MathBackendWebGL, tensorInfo: TensorInfo) {\n  if (tensorInfo !== null) {\n    backend.disposeIntermediateTensorInfo(tensorInfo);\n  }\n}\n\nfunction roundUpToPow2(num: number) {\n  let pow2 = 1;\n  while (pow2 < num) {\n    pow2 *= 2;\n  }\n  return pow2;\n}\n\n// Based on Algorithm 2 of Bitonic Top K, ref:\n// https://anilshanbhag.in/static/papers/gputopk_sigmod18.pdf\nexport function topK(\n    args: {inputs: TopKInputs, backend: MathBackendWebGL, attrs: TopKAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {k, sorted} = attrs;\n\n  // Empirically determined constant used to determine last dim threshold for\n  // handing off execution to the CPU.\n  const TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD =\n      env().getNumber('TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD');\n\n  // Empirically determined constant used to determine k threshold for handing\n  // off execution to the CPU.\n  const TOPK_K_CPU_HANDOFF_THRESHOLD =\n      env().getNumber('TOPK_K_CPU_HANDOFF_THRESHOLD');\n\n  const xShape = x.shape;\n  const lastDim = xShape[xShape.length - 1];\n\n  if (backend.shouldExecuteOnCPU([x]) ||\n      lastDim < TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD ||\n      k > TOPK_K_CPU_HANDOFF_THRESHOLD) {\n    const xVals = backend.readSync(x.dataId) as TypedArray;\n    const [allTopKVals, allTopKIndices] =\n        topKImplCPU(xVals, xShape, x.dtype as NumericDataType, k, sorted);\n\n    return [\n      backend.makeTensorInfo(\n          allTopKVals.shape, allTopKVals.dtype, allTopKVals.values),\n      backend.makeTensorInfo(\n          allTopKIndices.shape, allTopKIndices.dtype, allTopKIndices.values)\n    ];\n  }\n\n  if (k === 0) {\n    xShape[xShape.length - 1] = 0;\n    return [\n      backend.makeTensorInfo(xShape, x.dtype, []),\n      backend.makeTensorInfo(xShape, 'int32', [])\n    ];\n  }\n\n  if (lastDim === 1 /* firstPass */) {\n    return [\n      x, fill({attrs: {shape: xShape, dtype: 'int32', value: 0}, backend})\n    ];\n  }\n\n  // Eagerly unpack x input since it is passed in to all the shaders which\n  // require unpacked inputs.\n  const xtexData = backend.texData.get(x.dataId);\n  const xIsPacked = xtexData !== null && xtexData.isPacked;\n  const xUnPacked = xIsPacked ? backend.unpackTensor(x) : x;\n\n  // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n  const xSize = util.sizeFromShape(xShape);\n  const batch = xSize / lastDim;\n  const x2D = reshape(\n      {inputs: {x: xUnPacked}, attrs: {shape: [batch, lastDim]}, backend});\n\n  if (xIsPacked) {\n    disposeIntermediateTensorInfoOrNull(backend, xUnPacked);\n  }\n\n  const kPow2 = roundUpToPow2(k);\n  const lastDimPow2 = roundUpToPow2(lastDim);\n\n  // Only the indices containing the top K are kept at every step to reduce\n  // number of outputs in the GPU algorithms, so once the final set of indices\n  // is computed then gather is used to grab the corresponding values\n  // from the original input.\n  let indices: TensorInfo = null;\n\n  // GPU algorithm always takes in an indices input but this input is not used\n  // on the first run of a GPU algorithm, therefore if indices is null we simply\n  // pass in x2D instead of it but the value will not actually be used\n  const getInputs = () => indices === null ? [x2D, x2D] : [x2D, indices];\n\n  const runSwap = (dir: number, inc: number, shape: number[]) => {\n    const inputs = getInputs();\n    const program = new SwapProgram(shape);\n    const fistPass = indices === null ? 1 : 0;\n    const customValues =\n        [[lastDim], [fistPass], [Number.NEGATIVE_INFINITY], [dir], [inc]];\n    const prevIndices = indices;\n    indices = backend.runWebGLProgram(program, inputs, 'int32', customValues);\n    disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n  };\n\n  // Step 1: local sort\n  for (let len = 1; len < kPow2; len *= 2) {\n    const dir = len * 2;\n    for (let inc = len; inc >= 1; inc /= 2) {\n      runSwap(dir, inc, [batch, lastDimPow2]);\n    }\n  }\n\n  // Step 2: merge\n  for (let indicesSize = lastDimPow2; indicesSize > kPow2; indicesSize /= 2) {\n    const inputs = getInputs();\n    const mergeProgram = new MergeProgram([batch, indicesSize / 2]);\n    const firstPass = indices === null ? 1 : 0;\n    const customValues = [[lastDim], [firstPass], [kPow2]];\n    const prevIndices = indices;\n    indices =\n        backend.runWebGLProgram(mergeProgram, inputs, 'int32', customValues);\n    disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n\n    // Step 3: rebuild\n    const len = kPow2 / 2;\n    const dir = len * 2;\n    for (let inc = len; inc >= 1; inc /= 2) {\n      runSwap(dir, inc, indices.shape);\n    }\n  }\n\n  // Keep only the requested top K results instead of kPow2\n  let prevIndices = indices;\n  indices = slice(\n      {inputs: {x: indices}, backend, attrs: {begin: 0, size: [batch, k]}});\n  disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n\n  // Gather values on last dimension\n  let values = gatherV2(\n      {inputs: {x: x2D, indices}, backend, attrs: {axis: 1, batchDims: 1}});\n  disposeIntermediateTensorInfoOrNull(backend, x2D);\n\n  // Reshape back to the original input shape, except that the last\n  // dimension is k.\n  const newShape = xShape.slice(0, -1);\n  newShape.push(k);\n\n  prevIndices = indices;\n  indices = reshape({inputs: {x: indices}, attrs: {shape: newShape}, backend});\n  disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n\n  const prevValues = values;\n  values = reshape({inputs: {x: values}, attrs: {shape: newShape}, backend});\n  disposeIntermediateTensorInfoOrNull(backend, prevValues);\n\n  return [values, indices];\n}\n\nexport const topKConfig: KernelConfig = {\n  kernelName: TopK,\n  backendName: 'webgl',\n  kernelFunc: topK as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class TransformProgram implements GPGPUProgram {\n  variableNames = ['Image', 'Transforms'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      imageHeight: number, imageWidth: number,\n      interpolation: 'nearest'|'bilinear',\n      fillMode: 'constant'|'reflect'|'wrap'|'nearest', fillValue: number,\n      outShape: [number, number, number, number]) {\n    this.outputShape = outShape;\n    const interpolationModeId = interpolation === 'nearest' ? 1 : 2;\n    let fillModeId;\n    switch (fillMode) {\n      case 'constant':\n        fillModeId = 1;\n        break;\n      case 'reflect':\n        fillModeId = 2;\n        break;\n      case 'wrap':\n        fillModeId = 3;\n        break;\n      case 'nearest':\n        fillModeId = 4;\n        break;\n      default:\n        fillModeId = 1;\n        break;\n    }\n    this.userCode = `\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${fillModeId} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${fillModeId} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${fillModeId} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${\n        imageHeight} && 0 <= coordX && coordX < ${imageWidth}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${fillValue});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${fillValue});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${imageWidth}));\n                float mapY = mapCoord(inY, float(${imageHeight}));\n\n                if (${interpolationModeId} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Transform, TransformAttrs, TransformInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {TransformProgram} from '../transform_gpu';\n\nexport function transform(args: {\n  inputs: TransformInputs,\n  backend: MathBackendWebGL,\n  attrs: TransformAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {image, transforms} = inputs;\n  const {interpolation, fillMode, fillValue, outputShape} = attrs;\n\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n  const [outHeight, outWidth] =\n      outputShape != null ? outputShape : [imageHeight, imageWidth];\n  const outShape =\n      [batch, outHeight, outWidth,\n       numChannels] as [number, number, number, number];\n\n  const program = new TransformProgram(\n      imageHeight, imageWidth, interpolation, fillMode, fillValue, outShape);\n  return backend.runWebGLProgram(program, [image, transforms], 'float32');\n}\n\nexport const transformConfig: KernelConfig = {\n  kernelName: Transform,\n  backendName: 'webgl',\n  kernelFunc: transform as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unique, UniqueAttrs, UniqueInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {uniqueImplCPU} from '../kernel_utils/shared';\nimport {assertNotComplex} from '../webgl_util';\n\nexport function unique(\n    args:\n        {inputs: UniqueInputs, attrs: UniqueAttrs, backend: MathBackendWebGL}):\n    TensorInfo[] {\n  const {inputs, attrs, backend} = args;\n  const {axis} = attrs;\n  const {x} = inputs;\n  assertNotComplex(x, 'unique');\n\n  // For now, always forward calculation to the CPU backend.\n  console.warn(\n      'WARNING: ',\n      'UI might be locked temporarily as data is being downloaded');\n  const values = backend.readSync(x.dataId);\n  const {outputValues, outputShape, indices} =\n      uniqueImplCPU(values, axis, x.shape, x.dtype);\n  return [\n    backend.makeTensorInfo(outputShape, x.dtype, outputValues),\n    backend.makeTensorInfo([indices.length], 'int32', indices),\n  ];\n}\n\nexport const uniqueConfig: KernelConfig = {\n  kernelName: Unique,\n  backendName: 'webgl',\n  kernelFunc: unique as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unpack, UnpackAttrs, UnpackInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\n\nexport function unpack(\n    args:\n        {inputs: UnpackInputs, backend: MathBackendWebGL, attrs: UnpackAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {value} = inputs;\n  let {axis} = attrs;\n\n  if (axis < 0) {\n    axis += value.shape.length;\n  }\n\n  const x = value;\n  const xRank = x.shape.length;\n\n  const num = value.shape[axis];\n  const outShape: number[] = new Array(xRank - 1);\n  let outIndex = 0;\n  for (let i = 0; i < xRank; i++) {\n    if (i !== axis) {\n      outShape[outIndex++] = x.shape[i];\n    }\n  }\n\n  const toDispose = [];\n\n  const begin = new Array(xRank).fill(0);\n  const size = x.shape.slice();\n  size[axis] = 1;\n  const res: TensorInfo[] = new Array(num);\n  for (let i = 0; i < res.length; i++) {\n    begin[axis] = i;\n    const sliced = slice({inputs: {x}, backend, attrs: {begin, size}});\n    const reshaped =\n        reshape({inputs: {x: sliced}, backend, attrs: {shape: outShape}});\n    res[i] = reshaped;\n\n    toDispose.push(sliced);\n  }\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return res;\n}\n\nexport const unpackConfig: KernelConfig = {\n  kernelName: Unpack,\n  backendName: 'webgl',\n  kernelFunc: unpack as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class SegmentOpProgram implements GPGPUProgram {\n  variableNames = ['x', 'segmentIds'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      segOpInfo: backend_util.segment_util.SegOpInfo,\n      segOpType: 'unsortedSegmentSum') {\n    const windowSize = segOpInfo.windowSize;\n    const batchSize = segOpInfo.batchSize;\n    const inSize = segOpInfo.inSize;\n    const numSegments = segOpInfo.numSegments;\n    const outSize = numSegments * Math.ceil(inSize / windowSize);\n    this.outputShape = [batchSize, outSize];\n\n    const initializationValue = '0.0';\n    const returnValue = `sumValue`;\n\n    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n    const windowSizeVec4Remainder = windowSize % 4;\n\n    const updateSnippet = `\n        sumValue += dot(values, segFilter);\n    `;\n\n    let checkValueOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkValueOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return initializationValue;\n        }\n      `;\n    }\n\n    let checkSegmentIdOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkSegmentIdOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return -1.0;\n        }\n      `;\n    }\n\n    this.userCode = `\n      const float initializationValue = ${initializationValue};\n\n      float getValue(int batch, int inIdx) {\n        ${checkValueOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${checkSegmentIdOutOfBounds}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${numSegments})) * float(${windowSize}));\n        int currentSeg = int(mod(float(outIdx), float(${numSegments})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${updateSnippet}\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, KernelConfig, KernelFunc, sumOutType, TensorInfo, UnsortedSegmentSum, UnsortedSegmentSumAttrs, UnsortedSegmentSumInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {SegmentOpProgram} from '../segment_gpu';\n\nimport {range} from './Range';\nimport {reshape} from './Reshape';\nimport {tile} from './Tile';\nimport {transpose} from './Transpose';\n\nexport function unsortedSegmentSum(args: {\n  inputs: UnsortedSegmentSumInputs,\n  backend: MathBackendWebGL,\n  attrs: UnsortedSegmentSumAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, segmentIds} = inputs;\n  const {numSegments} = attrs;\n\n  const xRank = x.shape.length;\n\n  const toDispose = [];\n\n  let axis = 0;\n  const permutation = backend_util.getAxesPermutation([axis], xRank);\n  let permutedX = x;\n  if (permutation != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n    toDispose.push(permutedX);\n    axis = backend_util.getInnerMostAxes(1, xRank)[0];\n  }\n\n  const outShape = backend_util.segment_util.computeOutShape(\n      permutedX.shape, axis, numSegments);\n  const inSize = util.sizeFromShape([permutedX.shape[axis]]);\n  const a2D =\n      reshape({inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n  toDispose.push(a2D);\n\n  const outputDType = sumOutType(x.dtype);\n\n  const segOpCompute =\n      (x: TensorInfo, segOpType: 'unsortedSegmentSum', segmentIds: TensorInfo,\n       dtype: DataType, numSegments: number): TensorInfo => {\n        const batchSize = x.shape[0];\n        const inSize = x.shape[1];\n        const windowSize =\n            backend_util.segment_util.segOpComputeOptimalWindowSize(\n                inSize, numSegments);\n        const segOpInfo = {windowSize, inSize, batchSize, numSegments};\n        const program = new SegmentOpProgram(segOpInfo, segOpType);\n        const output = backend.compileAndRun(program, [x, segmentIds], dtype);\n        toDispose.push(output);\n        // No need to run another GPGPU program.\n        if (output.shape[1] === numSegments) {\n          return output;\n        }\n        const rangeInfo = range({\n          backend,\n          attrs: {start: 0, stop: numSegments, step: 1, dtype: 'float32'}\n        });\n        const tileInfo = tile({\n          inputs: {x: rangeInfo},\n          backend,\n          attrs: {reps: [inSize / windowSize]}\n        });\n\n        toDispose.push(rangeInfo);\n        toDispose.push(tileInfo);\n\n        const result =\n            segOpCompute(output, segOpType, tileInfo, dtype, numSegments);\n        return result;\n      };\n\n  const segOpResult = segOpCompute(\n      a2D, 'unsortedSegmentSum', segmentIds, outputDType, numSegments);\n\n  const reshaped =\n      reshape({inputs: {x: segOpResult}, backend, attrs: {shape: outShape}});\n\n  let result = reshaped;\n  if (permutation != null) {\n    toDispose.push(reshaped);\n    const perm = backend_util.getUndoAxesPermutation(permutation);\n    result = transpose({inputs: {x: result}, backend, attrs: {perm}});\n  }\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return result;\n}\n\nexport const unsortedSegmentSumConfig: KernelConfig = {\n  kernelName: UnsortedSegmentSum,\n  backendName: 'webgl',\n  kernelFunc: unsortedSegmentSum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {KernelConfig, registerKernel} from '@tensorflow/tfjs-core';\n\nimport {_fusedMatMulConfig} from './kernels/_FusedMatMul';\nimport {absConfig} from './kernels/Abs';\nimport {acosConfig} from './kernels/Acos';\nimport {acoshConfig} from './kernels/Acosh';\nimport {addConfig} from './kernels/Add';\nimport {addNConfig} from './kernels/AddN';\nimport {allConfig} from './kernels/All';\nimport {anyConfig} from './kernels/Any';\nimport {argMaxConfig} from './kernels/ArgMax';\nimport {argMinConfig} from './kernels/ArgMin';\nimport {asinConfig} from './kernels/Asin';\nimport {asinhConfig} from './kernels/Asinh';\nimport {atanConfig} from './kernels/Atan';\nimport {atan2Config} from './kernels/Atan2';\nimport {atanhConfig} from './kernels/Atanh';\nimport {avgPoolConfig} from './kernels/AvgPool';\nimport {avgPool3DConfig} from './kernels/AvgPool3D';\nimport {avgPoolGrad3DConfig} from './kernels/AvgPool3DGrad';\nimport {avgPoolGradConfig} from './kernels/AvgPoolGrad';\nimport {batchMatMulConfig} from './kernels/BatchMatMul';\nimport {batchNormConfig} from './kernels/BatchNorm';\nimport {batchToSpaceNDConfig} from './kernels/BatchToSpaceND';\nimport {bincountConfig} from './kernels/Bincount';\nimport {castConfig} from './kernels/Cast';\nimport {ceilConfig} from './kernels/Ceil';\nimport {clipByValueConfig} from './kernels/ClipByValue';\nimport {complexConfig} from './kernels/Complex';\nimport {complexAbsConfig} from './kernels/ComplexAbs';\nimport {concatConfig} from './kernels/Concat';\nimport {conv2DConfig} from './kernels/Conv2D';\nimport {conv2DBackpropFilterConfig} from './kernels/Conv2DBackpropFilter';\nimport {conv2DBackpropInputConfig} from './kernels/Conv2DBackpropInput';\nimport {conv3DConfig} from './kernels/Conv3D';\nimport {conv3DBackpropFilterV2Config} from './kernels/Conv3DBackpropFilterV2';\nimport {conv3DBackpropInputConfig} from './kernels/Conv3DBackpropInputV2';\nimport {cosConfig} from './kernels/Cos';\nimport {coshConfig} from './kernels/Cosh';\nimport {cropAndResizeConfig} from './kernels/CropAndResize';\nimport {cumsumConfig} from './kernels/Cumsum';\nimport {denseBincountConfig} from './kernels/DenseBincount';\nimport {depthToSpaceConfig} from './kernels/DepthToSpace';\nimport {depthwiseConv2dNativeConfig} from './kernels/DepthwiseConv2dNative';\nimport {depthwiseConv2dNativeBackpropFilterConfig} from './kernels/DepthwiseConv2dNativeBackpropFilter';\nimport {depthwiseConv2dNativeBackpropInputConfig} from './kernels/DepthwiseConv2dNativeBackpropInput';\nimport {diagConfig} from './kernels/Diag';\nimport {dilation2DConfig} from './kernels/Dilation2D';\nimport {einsumConfig} from './kernels/Einsum';\nimport {eluConfig} from './kernels/Elu';\nimport {eluGradConfig} from './kernels/EluGrad';\nimport {equalConfig} from './kernels/Equal';\nimport {erfConfig} from './kernels/Erf';\nimport {expConfig} from './kernels/Exp';\nimport {expandDimsConfig} from './kernels/ExpandDims';\nimport {expm1Config} from './kernels/Expm1';\nimport {fftConfig} from './kernels/FFT';\nimport {fillConfig} from './kernels/Fill';\nimport {flipLeftRightConfig} from './kernels/FlipLeftRight';\nimport {floorConfig} from './kernels/Floor';\nimport {floorDivConfig} from './kernels/FloorDiv';\nimport {fromPixelsConfig} from './kernels/FromPixels';\nimport {fusedConv2DConfig} from './kernels/FusedConv2D';\nimport {fusedDepthwiseConv2DConfig} from './kernels/FusedDepthwiseConv2D';\nimport {gatherNdConfig} from './kernels/GatherNd';\nimport {gatherV2Config} from './kernels/GatherV2';\nimport {greaterConfig} from './kernels/Greater';\nimport {greaterEqualConfig} from './kernels/GreaterEqual';\nimport {identityConfig} from './kernels/Identity';\nimport {ifftConfig} from './kernels/IFFT';\nimport {imagConfig} from './kernels/Imag';\nimport {isFiniteConfig} from './kernels/IsFinite';\nimport {isInfConfig} from './kernels/IsInf';\nimport {isNaNConfig} from './kernels/IsNaN';\nimport {leakyReluConfig} from './kernels/LeakyRelu';\nimport {lessConfig} from './kernels/Less';\nimport {lessEqualConfig} from './kernels/LessEqual';\nimport {linSpaceConfig} from './kernels/LinSpace';\nimport {logConfig} from './kernels/Log';\nimport {log1pConfig} from './kernels/Log1p';\nimport {logicalAndConfig} from './kernels/LogicalAnd';\nimport {logicalNotConfig} from './kernels/LogicalNot';\nimport {logicalOrConfig} from './kernels/LogicalOr';\nimport {LRNConfig} from './kernels/LRN';\nimport {LRNGradConfig} from './kernels/LRNGrad';\nimport {maxConfig} from './kernels/Max';\nimport {maximumConfig} from './kernels/Maximum';\nimport {maxPoolConfig} from './kernels/MaxPool';\nimport {maxPool3DConfig} from './kernels/MaxPool3D';\nimport {maxPoolGrad3DConfig} from './kernels/MaxPool3DGrad';\nimport {maxPoolGradConfig} from './kernels/MaxPoolGrad';\nimport {maxPoolWithArgmaxConfig} from './kernels/MaxPoolWithArgmax';\nimport {meanConfig} from './kernels/Mean';\nimport {minConfig} from './kernels/Min';\nimport {minimumConfig} from './kernels/Minimum';\nimport {mirrorPadConfig} from './kernels/MirrorPad';\nimport {modConfig} from './kernels/Mod';\nimport {multinomialConfig} from './kernels/Multinomial';\nimport {multiplyConfig} from './kernels/Multiply';\nimport {negConfig} from './kernels/Neg';\nimport {nonMaxSuppressionV3Config} from './kernels/NonMaxSuppressionV3';\nimport {nonMaxSuppressionV4Config} from './kernels/NonMaxSuppressionV4';\nimport {nonMaxSuppressionV5Config} from './kernels/NonMaxSuppressionV5';\nimport {notEqualConfig} from './kernels/NotEqual';\nimport {oneHotConfig} from './kernels/OneHot';\nimport {onesLikeConfig} from './kernels/OnesLike';\nimport {packConfig} from './kernels/Pack';\nimport {padV2Config} from './kernels/PadV2';\nimport {powConfig} from './kernels/Pow';\nimport {preluConfig} from './kernels/Prelu';\nimport {prodConfig} from './kernels/Prod';\nimport {rangeConfig} from './kernels/Range';\nimport {realConfig} from './kernels/Real';\nimport {realDivConfig} from './kernels/RealDiv';\nimport {reciprocalConfig} from './kernels/Reciprocal';\nimport {reluConfig} from './kernels/Relu';\nimport {relu6Config} from './kernels/Relu6';\nimport {reshapeConfig} from './kernels/Reshape';\nimport {resizeBilinearConfig} from './kernels/ResizeBilinear';\nimport {resizeBilinearGradConfig} from './kernels/ResizeBilinearGrad';\nimport {resizeNearestNeighborConfig} from './kernels/ResizeNearestNeighbor';\nimport {resizeNearestNeighborGradConfig} from './kernels/ResizeNearestNeighborGrad';\nimport {reverseConfig} from './kernels/Reverse';\nimport {rotateWithOffsetConfig} from './kernels/RotateWithOffset';\nimport {roundConfig} from './kernels/Round';\nimport {rsqrtConfig} from './kernels/Rsqrt';\nimport {scatterNdConfig} from './kernels/ScatterNd';\nimport {selectConfig} from './kernels/Select';\nimport {seluConfig} from './kernels/Selu';\nimport {sigmoidConfig} from './kernels/Sigmoid';\nimport {signConfig} from './kernels/Sign';\nimport {sinConfig} from './kernels/Sin';\nimport {sinhConfig} from './kernels/Sinh';\nimport {sliceConfig} from './kernels/Slice';\nimport {softmaxConfig} from './kernels/Softmax';\nimport {softplusConfig} from './kernels/Softplus';\nimport {spaceToBatchNDConfig} from './kernels/SpaceToBatchND';\nimport {sparseFillEmptyRowsConfig} from './kernels/SparseFillEmptyRows';\nimport {sparseReshapeConfig} from './kernels/SparseReshape';\nimport {sparseSegmentMeanConfig} from './kernels/SparseSegmentMean';\nimport {sparseSegmentSumConfig} from './kernels/SparseSegmentSum';\nimport {sparseToDenseConfig} from './kernels/SparseToDense';\nimport {splitVConfig} from './kernels/SplitV';\nimport {sqrtConfig} from './kernels/Sqrt';\nimport {squareConfig} from './kernels/Square';\nimport {squaredDifferenceConfig} from './kernels/SquaredDifference';\nimport {stepConfig} from './kernels/Step';\nimport {stridedSliceConfig} from './kernels/StridedSlice';\nimport {stringNGramsConfig} from './kernels/StringNGrams';\nimport {stringSplitConfig} from './kernels/StringSplit';\nimport {stringToHashBucketFastConfig} from './kernels/StringToHashBucketFast';\nimport {subConfig} from './kernels/Sub';\nimport {sumConfig} from './kernels/Sum';\nimport {tanConfig} from './kernels/Tan';\nimport {tanhConfig} from './kernels/Tanh';\nimport {tileConfig} from './kernels/Tile';\nimport {topKConfig} from './kernels/TopK';\nimport {transformConfig} from './kernels/Transform';\nimport {transposeConfig} from './kernels/Transpose';\nimport {uniqueConfig} from './kernels/Unique';\nimport {unpackConfig} from './kernels/Unpack';\nimport {unsortedSegmentSumConfig} from './kernels/UnsortedSegmentSum';\nimport {zerosLikeConfig} from './kernels/ZerosLike';\n\n// List all kernel configs here\nconst kernelConfigs: KernelConfig[] = [\n  LRNConfig,\n  LRNGradConfig,\n  _fusedMatMulConfig,\n  absConfig,\n  acosConfig,\n  acoshConfig,\n  addConfig,\n  addNConfig,\n  allConfig,\n  anyConfig,\n  argMaxConfig,\n  argMinConfig,\n  asinConfig,\n  asinhConfig,\n  atan2Config,\n  atanConfig,\n  atanhConfig,\n  avgPool3DConfig,\n  avgPoolConfig,\n  avgPoolGrad3DConfig,\n  avgPoolGradConfig,\n  batchMatMulConfig,\n  batchNormConfig,\n  batchToSpaceNDConfig,\n  bincountConfig,\n  castConfig,\n  ceilConfig,\n  clipByValueConfig,\n  complexAbsConfig,\n  complexConfig,\n  concatConfig,\n  conv2DBackpropFilterConfig,\n  conv2DBackpropInputConfig,\n  conv2DConfig,\n  conv3DBackpropFilterV2Config,\n  conv3DBackpropInputConfig,\n  conv3DConfig,\n  cosConfig,\n  coshConfig,\n  cropAndResizeConfig,\n  cumsumConfig,\n  denseBincountConfig,\n  depthToSpaceConfig,\n  depthwiseConv2dNativeBackpropFilterConfig,\n  depthwiseConv2dNativeBackpropInputConfig,\n  depthwiseConv2dNativeConfig,\n  diagConfig,\n  dilation2DConfig,\n  einsumConfig,\n  eluConfig,\n  eluGradConfig,\n  equalConfig,\n  erfConfig,\n  expConfig,\n  expandDimsConfig,\n  expm1Config,\n  fftConfig,\n  fillConfig,\n  flipLeftRightConfig,\n  floorConfig,\n  floorDivConfig,\n  fromPixelsConfig,\n  fusedConv2DConfig,\n  fusedDepthwiseConv2DConfig,\n  gatherNdConfig,\n  gatherV2Config,\n  greaterConfig,\n  greaterEqualConfig,\n  identityConfig,\n  ifftConfig,\n  imagConfig,\n  isFiniteConfig,\n  isInfConfig,\n  isNaNConfig,\n  leakyReluConfig,\n  lessConfig,\n  lessEqualConfig,\n  linSpaceConfig,\n  log1pConfig,\n  logConfig,\n  logicalAndConfig,\n  logicalNotConfig,\n  logicalOrConfig,\n  maxConfig,\n  maxPool3DConfig,\n  maxPoolConfig,\n  maxPoolGrad3DConfig,\n  maxPoolGradConfig,\n  maxPoolWithArgmaxConfig,\n  maximumConfig,\n  meanConfig,\n  minConfig,\n  minimumConfig,\n  mirrorPadConfig,\n  modConfig,\n  multinomialConfig,\n  multiplyConfig,\n  negConfig,\n  nonMaxSuppressionV3Config,\n  nonMaxSuppressionV4Config,\n  nonMaxSuppressionV5Config,\n  notEqualConfig,\n  oneHotConfig,\n  onesLikeConfig,\n  packConfig,\n  padV2Config,\n  powConfig,\n  preluConfig,\n  prodConfig,\n  rangeConfig,\n  realConfig,\n  realDivConfig,\n  reciprocalConfig,\n  relu6Config,\n  reluConfig,\n  reshapeConfig,\n  resizeBilinearConfig,\n  resizeBilinearGradConfig,\n  resizeNearestNeighborConfig,\n  resizeNearestNeighborGradConfig,\n  reverseConfig,\n  rotateWithOffsetConfig,\n  roundConfig,\n  rsqrtConfig,\n  scatterNdConfig,\n  selectConfig,\n  seluConfig,\n  sigmoidConfig,\n  signConfig,\n  sinConfig,\n  sinhConfig,\n  sliceConfig,\n  softmaxConfig,\n  softplusConfig,\n  spaceToBatchNDConfig,\n  sparseFillEmptyRowsConfig,\n  sparseReshapeConfig,\n  sparseSegmentMeanConfig,\n  sparseSegmentSumConfig,\n  sparseToDenseConfig,\n  splitVConfig,\n  sqrtConfig,\n  squareConfig,\n  squaredDifferenceConfig,\n  stepConfig,\n  stridedSliceConfig,\n  stringNGramsConfig,\n  stringSplitConfig,\n  stringToHashBucketFastConfig,\n  subConfig,\n  sumConfig,\n  tanConfig,\n  tanhConfig,\n  tileConfig,\n  topKConfig,\n  transformConfig,\n  transposeConfig,\n  uniqueConfig,\n  unpackConfig,\n  unsortedSegmentSumConfig,\n  zerosLikeConfig\n];\n\nfor (const kernelConfig of kernelConfigs) {\n  registerKernel(kernelConfig);\n}\n","/** @license See the LICENSE file. */\n\n// This code is auto-generated, do not modify this file!\nconst version = '3.8.0';\nexport {version};\n"],"names":["contexts","WEBGL_ATTRIBUTES","alpha","antialias","premultipliedAlpha","preserveDrawingBuffer","depth","stencil","failIfMajorPerformanceCaveat","setWebGLContext","webGLVersion","gl","getWebGLContext","newCtx","Error","canvas","OffscreenCanvas","document","createElement","createCanvas","addEventListener","ev","preventDefault","getContext","getWebGLRenderingContext","console","log","isContextLost","disable","DEPTH_TEST","STENCIL_TEST","BLEND","DITHER","POLYGON_OFFSET_FILL","SAMPLE_COVERAGE","enable","SCISSOR_TEST","CULL_FACE","cullFace","BACK","PackingScheme","TextureUsage","PhysicalTextureType","getUnpackedMatrixTextureShapeWidthHeight","rows","columns","getDenseTexShape","shape","size","util","sizeFromShape","texelsNeeded","Math","ceil","sizeToSquarishShape","getPackedMatrixTextureShapeWidthHeight","max","getTextureConfig","textureHalfFloatExtension","glany","internalFormatFloat","internalFormatHalfFloat","internalFormatPackedHalfFloat","internalFormatPackedFloat","textureFormatFloat","downloadTextureFormat","downloadUnpackNumChannels","defaultNumChannels","textureTypeHalfFloat","textureTypeFloat","env","getNumber","R32F","R16F","RGBA16F","RGBA32F","RED","HALF_FLOAT","FLOAT","RGBA","HALF_FLOAT_OES","callAndCheck","func","returnValue","getBool","error","getError","NO_ERROR","getWebGLErrorMessage","checkWebGLError","canBeRepresented","num","abs","status","INVALID_ENUM","INVALID_VALUE","INVALID_OPERATION","INVALID_FRAMEBUFFER_OPERATION","OUT_OF_MEMORY","CONTEXT_LOST_WEBGL","getExtensionOrThrow","extensionName","throwIfNull","getExtension","createVertexShader","vertexShaderSource","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","createFragmentShader","fragmentShaderSource","fragmentShader","FRAGMENT_SHADER","shaderInfoLog","lineNumberRegexResult","lineNumberRegex","exec","lineNumber","shaderLines","split","pad","length","toString","linesWithLineNumbers","map","line","rightPad","maxLineLength","i","beforeErrorLines","slice","errorLine","afterErrorLines","join","logShaderSourceAndInfoLog","createProgram","linkProgram","program","getProgramParameter","LINK_STATUS","getProgramInfoLog","validateProgram","VALIDATE_STATUS","createStaticVertexBuffer","data","buffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","createStaticIndexBuffer","ELEMENT_ARRAY_BUFFER","createTexture","validateTextureSize","width","height","maxTextureSize","createFramebuffer","bindVertexBufferToProgramAttribute","attribute","arrayEntriesPerItem","itemStrideInBytes","itemOffsetInBytes","loc","getAttribLocation","vertexAttribPointer","enableVertexAttribArray","bindTextureUnit","texture","textureUnit","validateTextureUnit","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","getProgramUniformLocationOrThrow","uniformName","getUniformLocation","getProgramUniformLocation","bindTextureToProgramUniformSampler","uniformSamplerLocation","uniform1i","bindColorTextureToFramebuffer","framebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","unbindColorTextureFromFramebuffer","validateFramebuffer","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","getFramebufferErrorMessage","FRAMEBUFFER_INCOMPLETE_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_DIMENSIONS","FRAMEBUFFER_UNSUPPORTED","returnTOrNull","failureMessage","tOrNull","maxTextureUnit","MAX_COMBINED_TEXTURE_IMAGE_UNITS","glTextureUnit","getBatchDim","dimsToSkip","getRowsCols","getShapeAs3D","shapeAs3D","getTextureShapeFromLogicalShape","logShape","isPacked","maxTexSize","d","nearestLargerEven","squeezeResult","squeezeShape","newShape","batchDim","cols","isEven","n","isReshapeFree","shape1","shape2","arraysEqual","shape1Cols","shape2Cols","MAX_TEXTURE_SIZE","MAX_TEXTURES_IN_SHADER","getWebGLMaxTextureSize","getParameter","getMaxTexturesInShader","MAX_TEXTURE_IMAGE_UNITS","min","getWebGLDisjointQueryTimerVersion","queryTimerVersion","hasExtension","isWebGLVersionEnabled","e","isCapableOfRenderingToFloatTexture","createFloatTextureAndBindToFramebuffer","isDownloadFloatTextureEnabled","COLOR_BUFFER_HALF_FLOAT","texConfig","texImage2D","frameBuffer","isFrameBufferComplete","deleteTexture","deleteFramebuffer","createHalfFloatTextureAndBindToFramebuffer","isWebGLFenceEnabled","fenceSync","assertNotComplex","tensor","opName","Array","isArray","forEach","t","assert","dtype","viewport","scissor","ENV","getGlslDifferences","version","varyingVs","varyingFs","texture2D","output","defineOutput","defineSpecialNaN","defineSpecialInf","defineRound","getLogicalCoordinatesFromFlatIndex","coords","index","strides","computeStrides","stride","getLogicalCoordinatesFromFlatIndexByUniform","_","getFlatIndexFrom3D","registerFlag","get","device_util","isMobile","threshold","ENCODE_FLOAT_SNIPPET","DecodeMatrixProgram","[object Object]","outputShape","this","DENSE","texShape","glsl","userCode","shader_util.getLogicalCoordinatesFromFlatIndex","DecodeMatrixPackedProgram","EncodeFloatProgram","DOWNLOAD","EncodeFloatPackedProgram","EncodeMatrixProgram","inputIsUnsignedByte","shader_util.getFlatIndexFrom3D","EncodeMatrixPackedProgram","mainLoop","row","col","channel","webgl_util.createVertexShader","createVertexBuffer","webgl_util.createStaticVertexBuffer","Float32Array","createIndexBuffer","webgl_util.createStaticIndexBuffer","Uint16Array","createAndConfigureTexture","internalFormat","textureFormat","textureType","webgl_util.validateTextureSize","webgl_util.createTexture","tex2d","webgl_util.callAndCheck","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","getInternalFormatForFloat32MatrixTexture","textureConfig","createFloat32MatrixTexture","tex_util.getUnpackedMatrixTextureShapeWidthHeight","getInternalFormatForFloat16MatrixTexture","createFloat16MatrixTexture","getInternalFormatForUnsignedBytesMatrixTexture","createUnsignedBytesMatrixTexture","UNSIGNED_BYTE","getInternalFormatForPackedMatrixTexture","createPackedMatrixTexture","tex_util.getPackedMatrixTextureShapeWidthHeight","getInternalFormatForFloat16PackedMatrixTexture","createFloat16PackedMatrixTexture","bindVertexProgramAttributeStreams","vertexBuffer","webgl_util.bindVertexBufferToProgramAttribute","uploadDenseMatrixToTexture","dataForUpload","texelDataType","Uint8Array","set","uploadPixelDataToTexture","pixels","createBufferFromOutputTexture","gl2","PIXEL_PACK_BUFFER","bufferSizeBytes","bytesPerFloat","STREAM_READ","readPixels","downloadFloat32MatrixFromBuffer","downloadTarget","getBufferSubData","downloadByteEncodedFloatMatrixFromOutputTexture","w","h","downloadPackedMatrixFromBuffer","batch","physicalRows","physicalCols","tex_util.getPackedRGBAArraySizeFromMatrixShape","downloadMatrixFromPackedOutputTexture","packedRGBA","GPGPUContext","glVersion","COLOR_BUFFER_FLOAT","TEXTURE_FLOAT","TEXTURE_HALF_FLOAT","textureFloatExtension","webgl_util.getExtensionOrThrow","webgl_util.hasExtension","colorBufferFloatExtension","colorBufferHalfFloatExtension","gpgpu_util.createVertexBuffer","indexBuffer","gpgpu_util.createIndexBuffer","webgl_util.createFramebuffer","tex_util.getTextureConfig","debug","disposed","warn","outputTexture","finish","deleteBuffer","throwIfDisposed","gpgpu_util.createFloat32MatrixTexture","gpgpu_util.createFloat16MatrixTexture","gpgpu_util.createUnsignedBytesMatrixTexture","gpgpu_util.uploadPixelDataToTexture","gpgpu_util.uploadDenseMatrixToTexture","gpgpu_util.createFloat16PackedMatrixTexture","gpgpu_util.createPackedMatrixTexture","webgl_util.unbindColorTextureFromFramebuffer","downloadMatrixDriver","gpgpu_util.downloadByteEncodedFloatMatrixFromOutputTexture","gpgpu_util.downloadPackedMatrixFromBuffer","gpgpu_util.downloadFloat32MatrixFromBuffer","bindTextureToFrameBuffer","result","gpgpu_util.createBufferFromOutputTexture","unbindTextureToFrameBuffer","fenceContext","createFence","pollFence","query","isFencePassed","sync","SYNC_GPU_COMMANDS_COMPLETE","flush","clientWaitSync","ALREADY_SIGNALED","CONDITION_SATISFIED","beginQuery","endQuery","isQueryAvailable","gpgpu_util.downloadMatrixFromPackedOutputTexture","webgl_util.createFragmentShader","gpgpu_util.createVertexShader","webgl_util.createProgram","attachShader","webgl_util.linkProgram","webgl_util.validateProgram","vertexAttrsAreBound","setProgram","gpgpu_util.bindVertexProgramAttributeStreams","deleteProgram","useProgram","shouldThrow","webgl_util.getProgramUniformLocationOrThrow","webgl_util.getProgramUniformLocation","inputMatrixTexture","uniformLocation","throwIfNoProgram","webgl_util.bindTextureToProgramUniformSampler","outputMatrixTexture","setOutputMatrixTextureDriver","outputPackedMatrixTexture","startRow","numRows","startColumn","numColumns","setOutputMatrixWriteRegionDriver","webgl_util.validateFramebuffer","debugValidate","drawElements","TRIANGLES","UNSIGNED_SHORT","disjointQueryTimerExtension","getQueryTimerExtension","ext","getQueryTimerExtensionWebGL2","createQuery","TIME_ELAPSED_EXT","getQueryTimerExtensionWebGL1","createQueryEXT","beginQueryEXT","endQueryEXT","repeatedTry","getQueryTime","getQueryParameter","QUERY_RESULT","getQueryObjectEXT","QUERY_RESULT_EXT","available","QUERY_RESULT_AVAILABLE","disjoint","GPU_DISJOINT_EXT","QUERY_RESULT_AVAILABLE_EXT","Promise","resolve","addItemToPoll","arr","linearSearchLastTrue","itemsToPoll","x","isDoneFn","resolveFn","push","pollItems","webgl_util.bindColorTextureToFramebuffer","downloadAndDecode","outputMatrixTextureMaybePacked","y","getBroadcastDims","backend_util","makeShader","inputsInfo","prefixSnippets","shapeInfo","logicalShape","isUniform","name","enableShapeUniforms","uniformShape","getUniformInfoFromShape","packedInputs","customUniforms","type","arrayIndex","inputPrefixSnippet","inputSamplingSnippet","inInfo","outShapeInfo","usesPackedTextures","res","getPackedSamplerFromInInfo","getSamplerFromInInfo","inShape","outShape","inputInfo","texName","texFuncSnippet","charAt","toUpperCase","funcName","inRank","outRank","broadcastDims","getCoordsDataType","rankDiff","coordsSnippet","fields","unpackedCoordsSnippet","s","isInputScalar","isOutputScalar","indexOf","getPackedSamplerAtOutputCoords","outTexShape","inTexShape","flatOffset","getSamplerAtOutputCoords","getInputSamplingSnippet","floatTextureSampleSnippet","getFloatTextureSampleSnippet","outputSamplingSnippet","floatTextureSetOutputSnippet","shaderPrefix","SAMPLE_1D_SNIPPET","SAMPLE_2D_SNIPPET","SAMPLE_3D_SNIPPET","getShaderPrefix","getOutputScalarCoords","packedTexShape","getOutputPacked1DCoords","texelsInLogicalRow","getOutputPacked2DCoords","texelsInBatch","getOutputPacked3DCoords","texelsInBatchN","batches","b","getOutputPackedNDCoords","getPackedOutputSamplingSnippet","getFloatTextureSetRGBASnippet","getOutput1DCoords","getOutput2DCoords","shader_util.getLogicalCoordinatesFromFlatIndexByUniform","coordsFromIndexSnippet","getOutput3DCoords","getOutput4DCoords","getOutput5DCoords","getOutput6DCoords","getOutputSamplingSnippet","getFloatTextureSetRSnippet","SHADER_PACKED_PREFIX","texNumR","texNumC","offset","getFlatOffsetUniformName","tNumR","tNumC","getSamplerScalar","getUniformSampler","getSampler1D","keptDims","squeezedShape","params","squeezeInputInfo","getSqueezedParams","getSampler2D","stride0","stride1","getSampler3D","stride2","stride2Str","stride1Str","stride0Str","getSampler4D","stride3","getSampler5D","stride4","getSampler6D","getPackedSamplerScalar","getPackedSampler1D","valuesPerRow","getPackedSampler2D","getPackedSampler3D","rank","getPackedSamplerND","inSize","useSqueezePackedShape","useSqueezeShape","newInputInfo","JSON","parse","stringify","validateBinaryAndProgram","shapeInfos","inputs","shapeA","input","shapeB","texShapeA","texShapeB","texData","useShapeUniforms","createSimpleBinaryKernelImpl","op","aShape","bShape","aVals","bVals","assertAndGetBroadcastShape","resultRank","resultStrides","resultSize","getTypedArrayFromDType","aRank","bRank","aStrides","bStrides","aBroadcastDims","bBroadcastDims","indexToLoc","aLoc","aIndex","locToIndex","bLoc","bIndex","addImpl","a","createSimpleUnaryImpl","values","attrs","newValues","ceilImpl","xi","equalImpl","expImpl","exp","expm1Impl","expm1","floorImpl","floor","greaterImpl","greaterEqualImpl","lessImpl","lessEqualImpl","logImpl","maximumImpl","aValue","bValue","minimumImpl","multiplyImpl","notEqualImpl","rsqrtImpl","sqrt","squaredDifferenceImpl","diff","StringNGramsOp","separator","nGramWidths","leftPad","padWidth","preserveShortSequences","encodeString","preserveShort","nGramWidth","getPadWidth","splitIndex","outputStartIndex","numNGrams","nGramIndex","leftPadding","rightPadding","numTokens","dataStartIndex","nGramSize","nGram","nextNGramIndex","appendToNGram","str","value","splits","inputDataSize","splitsSize","prevSplit","validSplits","numBatchItems","nGramsSplits","getArrayFromDType","empty","getNumNGrams","nGrams","outputStartIdx","createNGrams","dataLength","delimiters","skipEmpty","subarray","delimiter","f","token","tokenStart","subImpl","comparePair","valueDiff","select","array","k","left","right","z","sd","sign","j","swap","vals","resultValues","xVals","weightsVals","weightsDtype","weightsShape","weightsSize","outVals","makeZerosTypedArray","xBuf","weightsBuf","binaryOutput","numCols","outBuf","simplyConcat","colOffset","decodedData","fromUint8ToStringArray","tIdx","resIdx","indicesData","paramsBuf","numSlices","sliceRank","sliceSize","paramsShape","paramsSize","flattenIndex","dim","indicesBuf","flattenOutputShape","originalLoc","batchIdx","indicesIdx","indicesIndex","originalIndex","start","stop","step","reduceSize","Number","isNaN","xShape","xDtype","minusOne","createScalarValue","reductionAxes","reduceShape","computeOutAndReduceShapes","outDtype","upcastType","prod","numElements","begin","isContinous","slice_util","isSliceContinous","xStrides","computeFlatOffset","inBuf","outLoc","inLoc","idx","fromStringArrayToUint8","indices","indicesShape","indicesDType","valuesDType","denseShape","defaultValue","indicesCount","denseRows","emptyRowIndicator","reverseIndexMap","rowsAreOrdered","lastIndicesRow","csrOffset","fill","allRowsFull","rowEmpty","outputIndices","outputValues","fullIndicesCount","filledCount","outputI","startingIndex","inputIndices","inputIndicesShape","inputDType","inputShape","targetShape","denseSize","nnz","outputRank","product","unknownIndex","missing","trunc","outputSize","inputRank","inputStrides","outputStrides","newIndices","id","segmentIds","isMean","numIndices","inputFlat","numCol","outputRows","outputLength","reduce","end","uninitializedIndex","outIndex","nextIndex","newLoc","dataSplits","compute","batchSize","tokens","maxNumEntries","parts","nEntries","c","numBuckets","fingerPrint64","modulo","getLowBitsUnsigned","reps","sorted","lastDim","allTopKVals","allTopKIndices","valAndInd","sort","outOffset","topKVals","topKIndices","perm","xRank","xSize","newStrides","axis","$axis","parseAxisParam","uniqueElements","Int32Array","inputBuffer","TensorBuffer","uniqueIndices","is1DTensor","element","axisValues","m","undefined","uniqueIndex","Object","keys","outputTmpShape","outputBuffer","uniqueElementIndex","addImplCPU","bincountImpl","bincountImplCPU","bincountReduceImpl","bincountReduceImplCPU","ceilImplCPU","concatImpl","concatImplCPU","equalImplCPU","expImplCPU","expm1ImplCPU","floorImplCPU","gatherNdImpl","gatherNdImplCPU","gatherV2Impl","gatherV2ImplCPU","greaterImplCPU","greaterEqualImplCPU","lessImplCPU","lessEqualImplCPU","linSpaceImpl","linSpaceImplCPU","logImplCPU","maxImpl","maxImplCPU","maximumImplCPU","minimumImplCPU","multiplyImplCPU","negImpl","negImplCPU","notEqualImplCPU","prodImpl","prodImplCPU","rangeImpl","rangeImplCPU","rsqrtImplCPU","simpleAbsImpl","simpleAbsImplCPU","sliceImpl","sliceImplCPU","sparseFillEmptyRowsImpl","sparseFillEmptyRowsImplCPU","sparseReshapeImpl","sparseReshapeImplCPU","sparseSegmentReductionImpl","sparseSegmentReductionImplCPU","stridedSliceImpl","stridedSliceImplCPU","stringNGramsImpl","stringNGramsImplCPU","stringSplitImpl","stringSplitImplCPU","stringToHashBucketFastImpl","stringToHashBucketFastImplCPU","subImplCPU","tileImpl","tileImplCPU","topKImpl","topKImplCPU","transposeImpl","transposeImplCPU","uniqueImpl","uniqueImplCPU","shared","getVecChannels","getChannels","PackProgram","channels","outOfBoundsCondition","dims","cond","getOutOfBoundsCondition","setup","innerDims","getSetup","sourceCoords","coord","getSourceCoordsArr","getOutput","ReshapePackedProgram","thisRC","TextureManager","gpgpu","shapeRC","usage","physicalTexType","getPhysicalFromLogicalTextureType","shapeKey","getKeyFromTextureShape","freeTextures","usedTextures","texBytes","computeBytes","numFreeTextures","numUsedTextures","_numBytesFree","newTexture","shift","PACKED_2X2_FLOAT32","PACKED_2X2_FLOAT16","UNPACKED_FLOAT32","UNPACKED_FLOAT16","PACKED_4X1_UNSIGNED_BYTE","_numBytesAllocated","logicalTexType","deleteTexThreshold","deleteMatrixTexture","texList","texIndex","splice","logEnabled","total","freeRatio","round","numBytesAllocated","numBytesFree","tex","internalFormatForPhysicalTexType","packedWidth","packedHeight","numBytesForInternalFormat","UPLOAD","RENDER","getPhysicalTextureForRendering","PIXELS","shapeRowsCol","UnaryOpProgram","opSnippet","ABS","CLONE","UnaryOpPackedProgram","UnpackProgram","getSourceCoords","whereImpl","kernel_impls","binaryCaches","CPU_HANDOFF_SIZE_THRESHOLD","MathBackendWebGL","KernelBackend","super","WeakMap","WeakSet","binaryCache","gpgpuCreatedLocally","textureManager","numMBBeforeWarning","global","screen","window","devicePixelRatio","DataStorage","engine","nextDataId","numDataIds","pendingDeletes","checkNumericalProblems","dataId","refCount","has","tensorInfo","disposeData","complexTensorInfos","unary_op.CLONE","runWebGLProgram","readSync","disposeIntermediateTensorInfo","convertAndCacheOnCPU","shouldTimeProgram","activeTimers","now","realValues","real","imagValues","imag","mergeRealAndImagArrays","getValuesFromTexture","downloadWaitMs","pendingRead","subscribers","read","tmpDownloadTarget","decode","tmpData","createBufferFromTexture","tex_util.getDenseTexShape","createAndWaitForFence","ps","all","dTypeVals","delete","pendingDisposal","removeDataId","decodeString","webgl_util.canBeRepresented","tmpTarget","downloadMatrixFromPackedTexture","shouldUsePackedProgram","webgl_util.getShapeAs3D","oldActiveTimers","newActiveTimers","outerMostTime","programTimersStack","flattenedActiveTimerQueries","flatten","filter","flattenedActiveTimerNames","uploadWaitMs","kernelMs","wallMs","sum","ms","unreliable","numBytesInGPU","numBytesInGPUAllocated","numBytesInGPUFree","startMs","endMs","waitForQueryAndGetTime","timerQuery","force","add","releaseGPUData","key","origDataId","dataRefCount","releaseTexture","uploadToGPU","sizeThreshold","every","condition","condVals","dataSync","outInfo","compileAndRun","makeTensorFromDataId","shouldExecuteOnCPU","outValues","makeOutput","packedUnaryOp","unary_op.ABS","isString","encodedValues","write","makeTensorInfo","afterShape","input3DShape","webgl_util.getBatchDim","webgl_util.getRowsCols","input3D","afterShapeAs3D","outputDtype","customUniformValues","preventEagerUnpackingOfOutput","outData","packedOutput","outPackingScheme","tex_util.PackingScheme","texelShape","outTexUsage","dataToDispose","inputsData","uniformValues","unpackTensor","packTensor","webgl_util.isReshapeFree","savedInput","packedReshape","outputData","keyInputs","concat","hasOffset","xTexShape","shader_compiler.getUniformInfoFromShape","rank1","rank2","rank34","isLogicalShapTexShapeEqual","isScalar","isInOutTexShapeEqual","isTexShapeGreaterThanOne","keyUserCode","constructor","gpgpu_math.makeShaderKey","binary","getAndSaveBinary","inputInfos","variableNames","inShapeInfos","source","shader_compiler.makeShader","webGLProgram","infLoc","nanLoc","uniformLocations","inShapesLocations","inTexShapesLocations","varName","outShapeLocation","outTexShapeLocation","outShapeStridesLocation","customUniformLocations","gpgpu_math.compileProgram","startTimer","outTex","setOutputPackedMatrixTexture","setOutputMatrixTexture","uniform1f","Infinity","NaN","varLoc","varOffsetLoc","varShapeLoc","varTexShapeLoc","uniform1iv","uniform2iv","uniform3iv","uniform4iv","uniform2i","uniform1fv","setInputMatrixTexture","outShapeLoc","customLoc","customValue","uniform2fv","uniform3fv","uniform4fv","executeProgram","gpgpu_math.runProgram","info","endTimer","glFlushThreshold","time","lastGlFlushTime","unpacked","getBinary","dispose","HTMLCanvasElement","remove","floatPrecisionValue","tidy","debugFlag","underflowCheckValue","scalar","floatPrecision","webgl_util.getTextureShapeFromLogicalShape","isByteArray","tempDenseInputHandle","getTexture","preventEagerUnpacking","encodedOutputTarget","outputTexData","acquireTexture","float32Values","float32ToTypedArray","texType","warnedAboutMemory","mb","toFixed","bytesPerElement","forceHalfFloat","isBrowser","registerBackend","webgl","BinaryOpProgram","BinaryOpPackedProgram","checkOutOfBounds","checkOutOfBoundsString","identity","args","backend","incRef","identityConfig","kernelName","Identity","backendName","kernelFunc","complex","complexInfo","realTensorInfo","imagTensorInfo","complexConfig","Complex","LEAKYRELU","LEAKYRELU_PACKED","leakyReluConfig","LeakyRelu","$alpha","PRELU","PRELU_PACKED","preluConfig","Prelu","unaryKernelFunc","packedOpSnippet","cpuKernelImpl","webglBackend","$dtype","xData","binaryKernelFunc","supportsComplex","aData","bData","complexParts","aPart","bPart","aHandle","bHandle","complexOutput","decodedAVals","decodedBVals","out","mapActivationToShaderProgram","activation","packed","CHECK_NAN_SNIPPET","MatMulPackedProgram","transposeA","transposeB","addBias","hasPreluActivation","hasLeakyreluActivation","sharedDim","sharedDimensionPacked","aSample","bSample","aSwizzle","bSwizzle","activationSnippet","applyActivationSnippet","addBiasSnippet","batchASnippet","batchBSnippet","COMPLEX_MULTIPLY","BinaryOpComplexProgram","MUL","multiply","realProgram","binaryop_complex_gpu.COMPLEX_MULTIPLY","imagProgram","realPart","imagPart","cpuMultiply","multiplyConfig","Multiply","reshape","$shape","inferFromImplicitShape","$xSize","xTexData","reshapeConfig","Reshape","MeanProgram","reduceInfo","divisor","windowSize","outSize","windowSizeNearestVec4","windowSizeVec4Remainder","updateSnippet","denominator","isInt","toPrecision","ReduceProgram","reduceType","initializationValue","compareOp","vecType","reductionType","reductionStages","stages","computeOptimalWindowSize","getReductionStages","previousResult","TransposeProgram","newDim","switched","originalOrder","switchedCoords","getSwitchedCoords","TransposePackedProgram","outputOrder","switchedOrder","nextColumn","getc","keepDims","reductionIndices","origAxes","axes","permutedAxes","getAxesPermutation","sumInputIsTransposed","sumInput","getInnerMostAxes","assertAxesAreInnerMostDims","sumOutShape","expandShapeToKeepDim","reshapedInput","reduced","sumOutType","sumImpl","sumConfig","Sum","transpose","cpuTranspose","transposeConfig","Transpose","batchMatMulImpl","bias","preluActivationWeights","leakyreluAlpha","innerShapeA","innerShapeB","outerShapeA","outerShapeB","outerDimsA","outerDimsB","batchDimA","batchDimB","batchDimsCompatible","a3dShape","b3dShape","a3d","b3d","intermediates","hasBias","hasPreluActivationWeights","hasLeakyreluAlpha","fusedActivation","aVec","bVec","shouldReshapeB","aVec3d","bVec3d","$leakyreluAlpha","outReshaped","_fusedMatMulConfig","_FusedMatMul","absConfig","Abs","acos","acosConfig","Acos","acosh","acoshConfig","Acosh","ADD","addKernelFunc","cpuAdd","addConfig","Add","AddNProgram","shapes","snippets","variable","operation","AddNPackedProgram","addNConfig","AddN","addN","tensors","midIndex","leftSide","rightSide","d1","d2","allConfig","All","permutedX","a2D","anyConfig","Any","ArgMinMaxProgram","firstPass","compOp","indexSnippet","ArgMinMaxPackedProgram","sourceLocSetup","sourceRank","sourceLocDType","inChannel","intChannels","srcRCoords","srcGCoords","srcBCoords","srcACoords","fetchCandidateIdx","fetchValue","getBestIndicesAChannelSnippet","argReduce","bestIndicesA","argReducePacked","argMinMaxReduce","intermediateTensorInfos","reshaped","argMaxConfig","ArgMax","$x","argMinConfig","ArgMin","asin","asinConfig","Asin","asinh","asinhConfig","Asinh","atan","atanConfig","Atan","atan2","CHECK_NAN_SNIPPET_BINARY","atan2Config","Atan2","atanh","atanhConfig","Atanh","Pool2DProgram","convInfo","poolType","computePositions","flattenPositions","includeBatchInIndex","filterWidth","strideHeight","strideWidth","dilationHeight","dilationWidth","effectiveFilterHeight","effectiveFilterWidth","padTop","padInfo","top","padLeft","isAvgPool","batchFlattenPositionStr","inHeight","inWidth","inChannels","flattenPositionStr","filterWidthNearestVec4","filterWidthVec4Remainder","Pool3DProgram","strideDepth","dilationDepth","effectiveFilterDepth","padFront","front","inDepth","avgPoolConfig","AvgPool","filterSize","dimRoundingMode","eitherStridesOrDilationsAreOne","computePool2DInfo","filterHeight","avgPoolProgram","avgPool3DConfig","AvgPool3D","dataFormat","computePool3DInfo","AvgPool2DBackpropProgram","avgMultiplier","outHeight","outWidth","AvgPool3DBackpropProgram","filterDepth","outDepth","avgPoolGrad3DConfig","AvgPool3DGrad","dy","avgPoolBackpropProgram","avgPoolGradConfig","AvgPoolGrad","batchMatMulConfig","BatchMatMul","BatchNormProgram","meanShape","varianceShape","offsetShape","scaleShape","varianceEpsilon","offsetSnippet","scaleSnippet","BatchNormPackedProgram","batchNormConfig","FusedBatchNorm","mean","variance","scale","finalInputs","SliceProgram","destSize","getCoords","body","SlicePackedProgram","sourceLoc","getChannel","upperRow","lowerRow","$begin","$size","parseSliceParams","assertParamsValid","customValues","newTexData","assign","shallowSlice","sliceConfig","Slice","batchToSpaceNDConfig","BatchToSpaceND","blockShape","crops","getReshaped","permuted","getPermuted","reshapedPermuted","getReshapedPermuted","sliceBeginCoords","getSliceBeginCoords","getSliceSize","toDispose","reshapedIntermediate","transposedIntermediate","reshapedIntermediate2","sliced","bincountConfig","Bincount","weights","notEqual","notEqualConfig","NotEqual","realConfig","Real","castConfig","Cast","cast","zerosTensor","tf.zeros","floatX","hasEncodingLoss","int","zerosTensorInfo","CEIL","ceilConfig","Ceil","ClipProgram","ClipPackedProgram","clipByValueConfig","ClipByValue","clipValueMin","clipValueMax","ComplexAbsProgram","makeComplexComponentTensorInfo","complexTensor","complexPart","complexAbsConfig","ComplexAbs","programInputs","ConcatProgram","computeOutShape","offsets","lastIndex","lastShift","ConcatPackedProgram","lastChannels","allChannels","getValueSnippet","shiftedChannels","channelIdx","imagConfig","Imag","reals","imags","realConcated","imagConcated","r","runOnCpu","tensors2D","innerSize","inputsValShapes","finalOutShape","computeTensors2D","reshapedResult","$inputs","assertParamsConsistent","concatConfig","Concat","Conv2DProgram","inputDepthNearestVec4","inputDepthVec4Remainder","isChannelsLast","rowDim","colDim","channelDim","Conv3DProgram","Im2ColPackedProgram","itemsPerBlockRow","unrolled","conv2dByMatMul","sharedMatMulDim","outerShapeX","outerShapeFilter","outChannels","batchMatMulWillBeUnpacked","reshapeWillBeExpensive","xReshaped","originalXTexDataShape","filterReshaped","pointwiseConv","pointwiseConvTexData","conv2dWithIm2Row","x2ColShape","xSqueezed","w2Row","im2ColProgram","im2Col","im2ColReshaped","matmulProgram","conv2DConfig","Conv2D","dilations","$dataFormat","convertConv2DDataFormat","computeConv2DInfo","Conv2DDerFilterProgram","filterShape","Conv2DDerInputProgram","Conv3DDerFilterProgram","Conv3DDerInputProgram","conv2DBackpropFilterConfig","Conv2DBackpropFilter","conv2DBackpropInputConfig","Conv2DBackpropInput","conv3DConfig","Conv3D","computeConv3DInfo","conv3DBackpropFilterV2Config","Conv3DBackpropFilterV2","conv3DBackpropInputConfig","Conv3DBackpropInputV2","cos","CHECK_NAN_SNIPPET_UNARY","cosConfig","Cos","cosh","coshConfig","Cosh","CropAndResizeProgram","imageShape","boxShape","cropSize","method","extrapolationValue","imageHeight","imageWidth","numBoxes","cropHeight","cropWidth","methodId","inputHeightFloat","inputWidthFloat","heightRatio","heightScale","inY","widthRatio","widthScale","inX","cropAndResizeConfig","CropAndResize","image","boxes","boxInd","CumSumProgram","exclusive","reverse","val","idxString","getFinalCoord","cumsumConfig","Cumsum","permutation","permutedAxis","log2","prevResult","reverseTransposedResult","getUndoAxesPermutation","denseBincountConfig","DenseBincount","bufferSync","DepthToSpaceProgram","blockSize","getHeightCoordString","getWidthCoordString","getDepthCoordString","getOutputDepthSize","getInputSamplingString","depthToSpaceConfig","DepthToSpace","inputHeight","inputWidth","inputDepth","outputHeight","outputWidth","outputDepth","DepthwiseConv2DProgram","hasLeakyReluAlpha","xNumRows","xNumCols","channelMul","DepthwiseConvPacked2DProgram","texelsAcross","texelC","colIndex","nextTexelOffset","depthwiseConv2dNativeConfig","DepthwiseConv2dNative","$dilations","DepthwiseConv2DDerFilterProgram","DepthwiseConv2DDerInputProgram","depthwiseConv2dNativeBackpropFilterConfig","DepthwiseConv2dNativeBackpropFilter","depthwiseConv2dNativeBackpropInputConfig","DepthwiseConv2dNativeBackpropInput","DiagProgram","diagConfig","Diag","flat","Dilation2DProgram","dilation2DConfig","Dilation2D","computeDilation2DInfo","einsumConfig","Einsum","equation","allDims","summedDims","idDims","decodeEinsumEquation","checkEinsumDimSizes","path","steps","getEinsumComputePath","nSteps","numDimsRemaining","tensorsToDispose","idTerm","permutationIndices","expandDims","dimsToExpand","getEinsumPermutation","isIdentityPermutation","elu","eluConfig","Elu","eluGradConfig","EluGrad","equal","equalConfig","Equal","erf","ERF_P","ERF_A1","ERF_A2","ERF_A3","ERF_A4","ERF_A5","erfConfig","Erf","EXP","expConfig","Exp","$dim","expandDimsConfig","ExpandDims","EXPM1","expm1Config","Expm1","FFTProgram","component","inverse","innerDim","exponentMultiplierSnippet","PI","resultDenominator","opString","fftImpl","inputSize","innerDimensionSize","input2D","complexOutputReshaped","fftConfig","FFT","FillProgram","inferDtype","fillConfig","Fill","FlipLeftRightProgram","flipLeftRightConfig","FlipLeftRight","FLOOR","floorConfig","Floor","floorDiv","floorDivConfig","FloorDiv","FromPixelsProgram","FromPixelsPackedProgram","fromPixelsConfig","FromPixels","numChannels","isVideo","HTMLVideoElement","isImage","HTMLImageElement","videoWidth","videoHeight","fromPixels2DContext","drawImage","tempPixelHandle","fusedConv2DConfig","FusedConv2D","fusedDepthwiseConv2DConfig","FusedDepthwiseConv2D","shouldPackDepthwiseConv","GatherNDProgram","sliceDim","stridesType","strideString","gatherNdConfig","GatherNd","resultShape","prepareAndValidate","flattenIndices","flattenX","outValue","GatherProgram","currentCoords","gatherV2","batchDims","parsedAxis","segment_util","collectGatherOpShapeInfo","indicesSize","outerSize","dimSize","gatherV2Config","GatherV2","greater","greaterConfig","Greater","greaterEqual","greaterEqualConfig","GreaterEqual","ifftConfig","IFFT","isFinite","isFiniteConfig","IsFinite","isInf","isInfConfig","IsInf","isNaNConfig","IsNan","less","lessConfig","Less","lessEqual","lessEqualConfig","LessEqual","linSpaceConfig","LinSpace","logConfig","Log","log1p","log1pConfig","Log1p","logicalAnd","logicalAndConfig","LogicalAnd","logicalNot","logicalNotConfig","LogicalNot","logicalOr","logicalOrConfig","LogicalOr","LRNProgram","radius","beta","rad","maxD","powOperator","basis","LRNPackedProgram","LRNConfig","LRN","depthRadius","LRNGradProgram","LRNGradConfig","LRNGrad","maxInputIsTransposed","maxInput","maxInputValues","maxOutShape","reshapedOutput","maxConfig","Max","maximum","maximumConfig","Maximum","maxPoolConfig","MaxPool","maxPoolProgram","maxPool3DConfig","MaxPool3D","MaxPool2DBackpropProgram","MaxPool3DBackpropProgram","maxPoolGrad3DConfig","MaxPool3DGrad","maxPool3dPositionsProgram","maxPool3dPositions","maxPoolBackpropProgram","maxPoolGradConfig","MaxPoolGrad","maxPoolPositionsProgram","maxPoolPositions","maxPoolBackPropProgram","maxPoolWithArgmaxConfig","MaxPoolWithArgmax","indexes","poolOutput","maxPoolWithArgmaxImpl","meanConfig","Mean","meanInputIsTransposed","meanInput","meanInputValues","meanOutShape","meanImpl","minConfig","Min","minimum","minimumConfig","Minimum","MirrorPadProgram","paddings","mode","p","unpackedCoords","MirrorPadPackedProgram","cLimit","padSetup","mirrorPadConfig","MirrorPad","mod","modConfig","Mod","MultinomialProgram","numOutcomes","numSamples","realDiv","realDivConfig","RealDiv","SUB","sub","cpuSub","subConfig","Sub","softmax","logits","maxLogit","expandedShape","maxLogitsReshaped","sumExp","sumExpReshaped","softmaxConfig","Softmax","multinomialConfig","Multinomial","seed","normalized","probs","NEG","negConfig","Neg","nonMaxSuppressionV3Impl","nonMaxSuppressionV3Config","NonMaxSuppressionV3","scores","maxOutputSize","iouThreshold","scoreThreshold","boxesVals","scoresVals","selectedIndices","nonMaxSuppressionV4Impl","nonMaxSuppressionV4Config","NonMaxSuppressionV4","padToMaxOutputSize","validOutputs","nonMaxSuppressionV5Impl","nonMaxSuppressionV5Config","NonMaxSuppressionV5","softNmsSigma","maxOutputSizeVal","iouThresholdVal","scoreThresholdVal","softNmsSigmaVal","selectedScores","OneHotProgram","onValue","offValue","oneHotConfig","OneHot","zerosLike","zerosLikeConfig","ZerosLike","onesLikeConfig","OnesLike","onesLike","packConfig","Pack","assertShapesMatch","expandedT","PadProgram","constantValue","PadPackedProgram","componentSetup","paddingArea","padV2","padV2Config","PadV2","pow","powConfig","Pow","prodConfig","Prod","range","rangeConfig","Range","reciprocal","reciprocalConfig","Reciprocal","relu","reluConfig","Relu","relu6","relu6Config","Relu6","ResizeBilinearProgram","newHeight","newWidth","alignCorners","halfPixelCenters","oldHeight","oldWidth","effectiveInSize","effectiveOutSize","sourceFracIndexRC","ResizeBilinearPackedProgram","resizeBilinearConfig","ResizeBilinear","images","ResizeBilinearBackpropProgram","dyShape","xHeight","xWidth","yHeight","yWidth","effectiveXSize","effectiveYSize","invHeightScale","invWidthScale","winHeight","winWidth","resizeBilinearGradConfig","ResizeBilinearGrad","ResizeNearestNeighborProgram","roundBase","ResizeNearestNeighborPackedProgram","resizeNearestNeighborConfig","ResizeNearestNeighbor","ResizeNearestNeigborBackpropProgram","resizeNearestNeighborGradConfig","ResizeNearestNeighborGrad","ReverseProgram","inCoords","getInCoord","ReversePackedProgram","nextRow","inCoordsArray","channels1","getR","getG","getB","getA","reverseConfig","Reverse","$dims","RotateProgram","fillValue","fillSnippet","rotateWithOffsetConfig","RotateWithOffset","radians","center","centerX","centerY","getImageCenter","sin","roundConfig","Round","rsqrt","rsqrtConfig","Rsqrt","ScatterProgram","updateSize","indicesRank","updatesRank","summingDupeIndex","indicesString","indicesSnippet","updatesString","updatesSnippet","scatterNdConfig","ScatterNd","updates","numUpdates","calculateShapes","flattenShape","SelectProgram","cRank","cCoords","abCoords","cCoordVars","abCoordVars","selectConfig","Select","selu","SELU_SCALEALPHA","SELU_SCALE","seluConfig","Selu","sigmoid","sigmoidConfig","Sigmoid","signConfig","Sign","sinConfig","Sin","sinh","sinhConfig","Sinh","softplus","softplusConfig","Softplus","spaceToBatchNDConfig","SpaceToBatchND","completePaddings","paddedX","reshapedPaddedShape","permutedReshapedPaddedPermutation","reshapedPaddedX","paddedXT","sparseFillEmptyRowsConfig","SparseFillEmptyRows","$indices","$values","$denseShape","$defaultValue","outputIndicesShape","sparseReshapeConfig","SparseReshape","$inputShape","from","$inputIndices","sparseSegmentMeanConfig","SparseSegmentMean","$data","$segmentIds","outputDataShape","sparseSegmentSumConfig","SparseSegmentSum","sparseToDenseConfig","SparseToDense","sparseIndices","sparseValues","splitVConfig","SplitV","numOrSizeSplits","splitSizes","prepareSplitSize","sliceT","sqrtConfig","Sqrt","square","squareConfig","Square","SQUARED_DIFFERENCE","squaredDifference","squaredDifferenceConfig","SquaredDifference","stepConfig","Step","StridedSliceProgram","inputDtype","newCoords","outputAxis","stridedSliceConfig","StridedSlice","beginMask","endMask","ellipsisMask","newAxisMask","shrinkAxisMask","nonStrided","$strides","sliceInfo","some","resultReshaped","stringNGramsConfig","StringNGrams","$dataSplits","stringSplitConfig","StringSplit","$input","$delimiter","stringToHashBucketFastConfig","StringToHashBucketFast","tan","tanConfig","Tan","tanh","tanhConfig","Tanh","TileProgram","tile","buf","tileConfig","Tile","SwapProgram","MergeProgram","disposeIntermediateTensorInfoOrNull","roundUpToPow2","pow2","topKConfig","TopK","TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD","TOPK_K_CPU_HANDOFF_THRESHOLD","xtexData","xIsPacked","xUnPacked","x2D","kPow2","lastDimPow2","getInputs","runSwap","dir","inc","NEGATIVE_INFINITY","prevIndices","len","mergeProgram","prevValues","TransformProgram","interpolation","fillMode","interpolationModeId","fillModeId","transformConfig","Transform","transforms","uniqueConfig","Unique","unpackConfig","Unpack","SegmentOpProgram","segOpInfo","segOpType","numSegments","checkValueOutOfBounds","checkSegmentIdOutOfBounds","kernelConfigs","UnsortedSegmentSum","outputDType","segOpCompute","segOpComputeOptimalWindowSize","rangeInfo","tileInfo","kernelConfig","registerKernel"],"mappings":";;;;;;;;;;;;;;;;sQAiBA,MAAMA,EAAmD,GAEnDC,EAA2C,CAC/CC,OAAO,EACPC,WAAW,EACXC,oBAAoB,EACpBC,uBAAuB,EACvBC,OAAO,EACPC,SAAS,EACTC,8BAA8B,YAOhBC,EACZC,EAAsBC,GACxBX,EAASU,GAAgBC,WAGXC,EAAgBF,GAC9B,KAAMA,KAAgBV,GAAW,CAC/B,MAAMa,EAqCV,SAAkCH,GAChC,GAAqB,IAAjBA,GAAuC,IAAjBA,EACxB,MAAM,IAAII,MAAM,0DAElB,MAAMC,EAdR,SAAsBL,GACpB,GAA+B,oBAApBM,iBAAoD,IAAjBN,EAC5C,OAAO,IAAIM,gBAAgB,IAAK,KAC3B,GAAwB,oBAAbC,SAChB,OAAOA,SAASC,cAAc,UAE9B,MAAM,IAAIJ,MAAM,0CAQHK,CAAaT,GAM5B,GAJAK,EAAOK,iBAAiB,oBAAqBC,IAC3CA,EAAGC,wBACItB,EAASU,MACf,GACkB,IAAjBA,EACF,OAAQK,EAAOQ,WAAW,QAAStB,IAC3Bc,EAAOQ,WAAW,qBAAsBtB,GAGlD,OAAOc,EAAOQ,WAAW,SAAUtB,GApDlBuB,CAAyBd,GACxC,GAAe,OAAXG,EAIF,OADAY,QAAQC,IAAI,0CAA2ChB,GAChD,KAHPV,EAASU,GAAgBG,EAM7B,MAAMF,EAAKX,EAASU,GACpB,OAAIC,EAAGgB,wBACE3B,EAASU,GACTE,EAAgBF,KAGzBC,EAAGiB,QAAQjB,EAAGkB,YACdlB,EAAGiB,QAAQjB,EAAGmB,cACdnB,EAAGiB,QAAQjB,EAAGoB,OACdpB,EAAGiB,QAAQjB,EAAGqB,QACdrB,EAAGiB,QAAQjB,EAAGsB,qBACdtB,EAAGiB,QAAQjB,EAAGuB,iBACdvB,EAAGwB,OAAOxB,EAAGyB,cACbzB,EAAGwB,OAAOxB,EAAG0B,WACb1B,EAAG2B,SAAS3B,EAAG4B,MAERvC,EAASU,IC7ClB,IAAY8B,EAqCAC,EAOAC,WAoCIC,EACZC,EAAcC,GAChB,MAAO,CAACA,EAASD,YAgBHE,EAAiBC,GAC/B,MAAMC,EAAOC,OAAKC,cAAcH,GAC1BI,EAAeC,KAAKC,KAAKL,EAAO,GACtC,OAAOC,OAAKK,oBAAoBH,YA4BlBI,EACZX,EAAcC,GAChB,MAAO,CACLO,KAAKI,IAAI,EAAGJ,KAAKC,KAAKR,EAAU,IAAKO,KAAKI,IAAI,EAAGJ,KAAKC,KAAKT,EAAO,cA2BtDa,EAEZ9C,EAA2B+C,GAE7B,MAAMC,EAAQhD,EAEd,IAAIiD,EACAC,EACAC,EACAC,EACAC,EAEAC,EACAC,EAEAC,EACAC,EACAC,EA2BJ,OAzByC,IAArCC,QAAMC,UAAU,kBAClBX,EAAsBD,EAAMa,KAC5BX,EAA0BF,EAAMc,KAChCX,EAAgCH,EAAMe,QACtCX,EAA4BJ,EAAMgB,QAClCX,EAAqBL,EAAMiB,IAC3BV,EAA4B,EAC5BC,EAAqB,EACrBC,EAAuBT,EAAMkB,WAC7BR,EAAmBV,EAAMmB,QAEzBlB,EAAsBjD,EAAGoE,KACzBlB,EAA0BlD,EAAGoE,KAC7BjB,EAAgCnD,EAAGoE,KACnChB,EAA4BJ,EAAMoB,KAClCf,EAAqBrD,EAAGoE,KACxBb,EAA4B,EAC5BC,EAAqB,EACrBC,EAAoD,MAA7BV,EACnBA,EAA0BsB,eAC1B,KACJX,EAAmB1D,EAAGmE,OAExBb,EAAwBtD,EAAGoE,KAEpB,CACLnB,oBAAAA,EACAC,wBAAAA,EACAC,8BAAAA,EACAC,0BAAAA,EACAC,mBAAAA,EACAC,sBAAAA,EACAC,0BAAAA,EACAC,mBAAAA,EACAC,qBAAAA,EACAC,iBAAAA,YClNYY,EAAgBtE,EAA2BuE,GACzD,MAAMC,EAAcD,IAIpB,OAHIZ,QAAMc,QAAQ,UAMpB,SAAyBzE,GACvB,MAAM0E,EAAQ1E,EAAG2E,WACjB,GAAID,IAAU1E,EAAG4E,SACf,MAAM,IAAIzE,MAAM,gBAAkB0E,EAAqB7E,EAAI0E,IAR3DI,CAAgB9E,GAEXwE,GDRT,SAAY3C,GAgBVA,qBAkBAA,mCAlCF,CAAYA,IAAAA,OAqCZ,SAAYC,GACVA,uBACAA,uBACAA,uBACAA,2BAJF,CAAYA,IAAAA,OAOZ,SAAYC,GACVA,2CACAA,2CACAA,2DACAA,+CACAA,+CALF,CAAYA,IAAAA,gBCtBIgD,EAAiBC,GAC/B,SAAIrB,QAAMc,QAAQ,iCAA2C,IAARO,GAJnC,QAKCvC,KAAKwC,IAAID,IAAQvC,KAAKwC,IAAID,GAJ3B,gBAUJH,EACZ7E,EAA2BkF,GAC7B,OAAQA,GACN,KAAKlF,EAAG4E,SACN,MAAO,WACT,KAAK5E,EAAGmF,aACN,MAAO,eACT,KAAKnF,EAAGoF,cACN,MAAO,gBACT,KAAKpF,EAAGqF,kBACN,MAAO,oBACT,KAAKrF,EAAGsF,8BACN,MAAO,gCACT,KAAKtF,EAAGuF,cACN,MAAO,gBACT,KAAKvF,EAAGwF,mBACN,MAAO,qBACT,QACE,MAAO,sBAAsBN,cAInBO,EACZzF,EAA2B0F,GAC7B,OAAOC,EACH3F,GAAI,IAAMA,EAAG4F,aAAaF,IAC1B,cAAgBA,EAAgB,6CAGtBG,EACZ7F,EAA2B8F,GAC7B,MAAMC,EAA4BJ,EAC9B3F,GAAI,IAAMA,EAAGgG,aAAahG,EAAGiG,gBAC7B,wCAGJ,GAFA3B,EAAatE,GAAI,IAAMA,EAAGkG,aAAaH,EAAcD,KACrDxB,EAAatE,GAAI,IAAMA,EAAGmG,cAAcJ,MACuB,IAA3D/F,EAAGoG,mBAAmBL,EAAc/F,EAAGqG,gBAEzC,MADAvF,QAAQC,IAAIf,EAAGsG,iBAAiBP,IAC1B,IAAI5F,MAAM,oCAElB,OAAO4F,WAGOQ,EACZvG,EAA2BwG,GAC7B,MAAMC,EAA8Bd,EAChC3F,GAAI,IAAMA,EAAGgG,aAAahG,EAAG0G,kBAC7B,0CAGJ,GAFApC,EAAatE,GAAI,IAAMA,EAAGkG,aAAaO,EAAgBD,KACvDlC,EAAatE,GAAI,IAAMA,EAAGmG,cAAcM,MACyB,IAA7DzG,EAAGoG,mBAAmBK,EAAgBzG,EAAGqG,gBAG3C,MAMJ,SACIH,EAAsBS,GACxB,MAAMC,EAAwBC,EAAgBC,KAAKH,GACnD,GAA6B,MAAzBC,EAGF,OAFA9F,QAAQC,IAAI,wCAAwC4F,UACpD7F,QAAQC,IAAImF,GAId,MAAMa,GAAcH,EAAsB,GAEpCI,EAAcd,EAAae,MAAM,MACjCC,EAAMF,EAAYG,OAAOC,WAAWD,OAAS,EAC7CE,EAAuBL,EAAYM,KACrC,CAACC,EAAMR,IACHzE,OAAKkF,UAAUT,EAAa,GAAGK,WAAYF,GAAOK,IAC1D,IAAIE,EAAgB,EACpB,IAAK,IAAIC,EAAI,EAAGA,EAAIL,EAAqBF,OAAQO,IAC/CD,EAAgBhF,KAAKI,IAAIwE,EAAqBK,GAAGP,OAAQM,GAG3D,MAAME,EAAmBN,EAAqBO,MAAM,EAAGb,EAAa,GAC9Dc,EAAYR,EAAqBO,MAAMb,EAAa,EAAGA,GACvDe,EAAkBT,EAAqBO,MAAMb,GAEnDjG,QAAQC,IAAI4G,EAAiBI,KAAK,OAClCjH,QAAQC,IAAI4F,EAAcM,MAAM,MAAM,IACtCnG,QAAQC,IACJ,MAAMuB,OAAKkF,SAASK,EAAU,GAAIJ,KAClC,iEACJ3G,QAAQC,IAAI+G,EAAgBC,KAAK,OAtC/BC,CACIxB,EAAsBxG,EAAGsG,iBAAiBG,IACxC,IAAItG,MAAM,sCAElB,OAAOsG,EAGT,MAAMI,EAAkB,oCAkCRoB,EAAcjI,GAC5B,OAAO2F,EACH3F,GAAI,IAAMA,EAAGiI,iBAAiB,2CAGpBC,EAAYlI,EAA2BmI,GAErD,GADA7D,EAAatE,GAAI,IAAMA,EAAGkI,YAAYC,MACkB,IAApDnI,EAAGoI,oBAAoBD,EAASnI,EAAGqI,aAErC,MADAvH,QAAQC,IAAIf,EAAGsI,kBAAkBH,IAC3B,IAAIhI,MAAM,wDAIJoI,EACZvI,EAA2BmI,GAE7B,GADA7D,EAAatE,GAAI,IAAMA,EAAGuI,gBAAgBJ,MACkB,IAAxDnI,EAAGoI,oBAAoBD,EAASnI,EAAGwI,iBAErC,MADA1H,QAAQC,IAAIf,EAAGsI,kBAAkBH,IAC3B,IAAIhI,MAAM,8CAIJsI,EACZzI,EAA2B0I,GAC7B,MAAMC,EAAsBhD,EACxB3F,GAAI,IAAMA,EAAG4I,gBAAgB,gCAGjC,OAFAtE,EAAatE,GAAI,IAAMA,EAAG6I,WAAW7I,EAAG8I,aAAcH,KACtDrE,EAAatE,GAAI,IAAMA,EAAG+I,WAAW/I,EAAG8I,aAAcJ,EAAM1I,EAAGgJ,eACxDL,WAGOM,EACZjJ,EAA2B0I,GAC7B,MAAMC,EAAsBhD,EACxB3F,GAAI,IAAMA,EAAG4I,gBAAgB,gCAIjC,OAHAtE,EAAatE,GAAI,IAAMA,EAAG6I,WAAW7I,EAAGkJ,qBAAsBP,KAC9DrE,EACItE,GAAI,IAAMA,EAAG+I,WAAW/I,EAAGkJ,qBAAsBR,EAAM1I,EAAGgJ,eACvDL,WAUOQ,EAAcnJ,GAC5B,OAAO2F,EACH3F,GAAI,IAAMA,EAAGmJ,iBAAiB,2CAGpBC,EAAoBC,EAAeC,GACjD,MAAMC,EAAiB5F,QAAMC,UAAU,0BACvC,GAAKyF,GAAS,GAAOC,GAAU,EAAI,CAEjC,MAAM,IAAInJ,MAAM,0BADE,IAAIkJ,KAASC,KACyB,gBAE1D,GAAKD,EAAQE,GAAoBD,EAASC,EAAiB,CAGzD,MAAM,IAAIpJ,MACN,0BAHc,IAAIkJ,KAASC,KAI3B,qDAHQ,IAAIC,KAAkBA,KAG+B,eAIrDC,EAAkBxJ,GAChC,OAAO2F,EACH3F,GAAI,IAAMA,EAAGwJ,qBAAqB,+CAGxBC,EACZzJ,EAA2BmI,EAAuBuB,EAClDf,EAAqBgB,EAA6BC,EAClDC,GACF,MAAMC,EAAM9J,EAAG+J,kBAAkB5B,EAASuB,GAC1C,OAAa,IAATI,IAKJxF,EAAatE,GAAI,IAAMA,EAAG6I,WAAW7I,EAAG8I,aAAcH,KACtDrE,EACItE,GACA,IAAMA,EAAGgK,oBACLF,EAAKH,EAAqB3J,EAAGmE,OAAO,EAAOyF,EAC3CC,KACRvF,EAAatE,GAAI,IAAMA,EAAGiK,wBAAwBH,MAC3C,YAGOI,EACZlK,EAA2BmK,EAAuBC,GACpDC,EAAoBrK,EAAIoK,GACxB9F,EAAatE,GAAI,IAAMA,EAAGsK,cAActK,EAAGuK,SAAWH,KACtD9F,EAAatE,GAAI,IAAMA,EAAGwK,YAAYxK,EAAGyK,WAAYN,cAUvCO,EACZ1K,EAA2BmI,EAC3BwC,GACF,OAAOhF,EACH3F,GAAI,IAAMA,EAAG4K,mBAAmBzC,EAASwC,IACzC,YAAcA,EAAc,sCAGlBE,EACZ7K,EAA2BmI,EAC3BwC,GACF,OAAO3K,EAAG4K,mBAAmBzC,EAASwC,YAGxBG,EACZ9K,EAA2BmK,EAC3BY,EAA8CX,GAChD9F,EAAatE,GAAI,IAAMkK,EAAgBlK,EAAImK,EAASC,KACpD9F,EAAatE,GAAI,IAAMA,EAAGgL,UAAUD,EAAwBX,cAS9Ca,EACZjL,EAA2BmK,EAC3Be,GACF5G,EAAatE,GAAI,IAAMA,EAAGmL,gBAAgBnL,EAAGoL,YAAaF,KAC1D5G,EACItE,GACA,IAAMA,EAAGqL,qBACLrL,EAAGoL,YAAapL,EAAGsL,kBAAmBtL,EAAGyK,WAAYN,EAAS,cAGxDoB,EACZvL,EAA2BkL,GAC7B5G,EAAatE,GAAI,IAAMA,EAAGmL,gBAAgBnL,EAAGoL,YAAaF,KAC1D5G,EACItE,GACA,IAAMA,EAAGqL,qBACLrL,EAAGoL,YAAapL,EAAGsL,kBAAmBtL,EAAGyK,WAAY,KAAM,cAGrDe,EAAoBxL,GAClC,MAAMkF,EAASlF,EAAGyL,uBAAuBzL,EAAGoL,aAC5C,GAAIlG,IAAWlF,EAAG0L,qBAChB,MAAM,IAAIvL,MACN,8BAAgCwL,EAA2B3L,EAAIkF,aAIvDyG,EACZ3L,EAA2BkF,GAC7B,OAAQA,GACN,KAAKlF,EAAG4L,kCACN,MAAO,oCACT,KAAK5L,EAAG6L,0CACN,MAAO,4CACT,KAAK7L,EAAG8L,kCACN,MAAO,oCACT,KAAK9L,EAAG+L,wBACN,MAAO,0BACT,QACE,MAAO,iBAAiB7G,KAI9B,SAASS,EACL3F,EAA2BgM,EAC3BC,GACF,MAAMC,EAAkB5H,EAAatE,GAAI,IAAMgM,MAC/C,GAAe,MAAXE,EACF,MAAM,IAAI/L,MAAM8L,GAElB,OAAOC,EAGT,SAAS7B,EAAoBrK,EAA2BoK,GACtD,MAAM+B,EAAiBnM,EAAGoM,iCAAmC,EACvDC,EAAgBjC,EAAcpK,EAAGuK,SACvC,GAAI8B,EAAgBrM,EAAGuK,UAAY8B,EAAgBF,EAAgB,CAEjE,MAAM,IAAIhM,MAAM,0BADS,2BAA2BgM,mBAKxCG,EAAYlK,EAAiBmK,EAAa,GACxD,OAAOjK,OAAKC,cAAcH,EAAMwF,MAAM,EAAGxF,EAAM+E,OAASoF,aAG1CC,EAAYpK,GAC1B,GAAqB,IAAjBA,EAAM+E,OACR,MAAMhH,MAAM,wDAGd,MAAO,CACLiC,EAAM+E,OAAS,EAAI/E,EAAMA,EAAM+E,OAAS,GAAK,EAAG/E,EAAMA,EAAM+E,OAAS,aAIzDsF,EAAarK,GAC3B,IAAIsK,EAAsC,CAAC,EAAG,EAAG,GAMjD,OALkC,IAAjBtK,EAAM+E,QAAkC,IAAjB/E,EAAM+E,QAA6B,IAAb/E,EAAM,KAElEsK,EACI,CAACJ,EAAYlK,MAAWoK,EAAYpK,KAEnCsK,WAGOC,EACZC,EAAoBC,GAAW,GACjC,IAAIC,EAAanJ,QAAMC,UAAU,0BAsBjC,GArBIiJ,IACFC,GAA0B,EAcF,KAPxBF,EAAWA,EAAStF,KAChB,CAACyF,EAAGrF,IAAMA,GAAKkF,EAASzF,OAAS,EAC7B7E,OAAK0K,kBAAkBJ,EAASlF,IAChCkF,EAASlF,MAIJP,SACXyF,EAAW,CAAC,EAAGA,EAAS,MAKJ,IAApBA,EAASzF,OAAc,CACzB,MAAM8F,EAAgB3K,OAAK4K,aAAaN,GACxCA,EAAWK,EAAcE,SAG3B,IAAI9K,EAAOC,OAAKC,cAAcqK,GAC9B,GAAIA,EAASzF,QAAU,GAAK9E,GAAQyK,EAClC,MAAO,CAAC,EAAGzK,GACN,GACiB,IAApBuK,EAASzF,QAAgByF,EAAS,IAAME,GACxCF,EAAS,IAAME,EACjB,OAAOF,EACF,GACiB,IAApBA,EAASzF,QAAgByF,EAAS,GAAKA,EAAS,IAAME,GACtDF,EAAS,IAAME,EACjB,MAAO,CAACF,EAAS,GAAKA,EAAS,GAAIA,EAAS,IACvC,GACiB,IAApBA,EAASzF,QAAgByF,EAAS,IAAME,GACxCF,EAAS,GAAKA,EAAS,IAAME,EAC/B,MAAO,CAACF,EAAS,GAAIA,EAAS,GAAKA,EAAS,IACvC,GACiB,IAApBA,EAASzF,QACTyF,EAAS,GAAKA,EAAS,GAAKA,EAAS,IAAME,GAC3CF,EAAS,IAAME,EACjB,MAAO,CAACF,EAAS,GAAKA,EAAS,GAAKA,EAAS,GAAIA,EAAS,IACrD,GACiB,IAApBA,EAASzF,QAAgByF,EAAS,IAAME,GACxCF,EAAS,GAAKA,EAAS,GAAKA,EAAS,IAAME,EAC7C,MAAO,CAACF,EAAS,GAAIA,EAAS,GAAKA,EAAS,GAAKA,EAAS,IAE1D,GAAIC,EAAU,CAOZ,MAAMO,EAAWd,EAAYM,GAC7B,IAAI3K,EAAO,EAAGoL,EAAO,EAKrB,OAJIT,EAASzF,UACVlF,EAAMoL,GAAQb,EAAYI,IAE7BvK,EAAO+K,GAAYnL,EAAO,IAAMoL,EAAO,GAChC/K,OAAKK,oBAAoBN,GAAMiF,KAAIyF,GAAS,EAAJA,IAEjD,OAAOzK,OAAKK,oBAAoBN,GAIpC,SAASiL,EAAOC,GACd,OAAOA,EAAI,GAAM,WAOHC,EAAcC,EAAkBC,GAI9C,GAHAD,EAASA,EAAO7F,OAAO,GACvB8F,EAASA,EAAO9F,OAAO,GAEnBtF,OAAKqL,YAAYF,EAAQC,GAC3B,OAAO,EAGT,IAAKD,EAAOtG,SAAWuG,EAAOvG,OAC5B,OAAO,EAGT,GAAkB,IAAdsG,EAAO,IAA0B,IAAdA,EAAO,IAA0B,IAAdC,EAAO,IAC/B,IAAdA,EAAO,GACT,OAAO,EAGT,GAAID,EAAOtG,SAAWuG,EAAOvG,OAAQ,CACnC,MAAMyG,EAAaH,EAAO7F,OAAO,GAAG,GAC9BiG,EAAaH,EAAO9F,OAAO,GAAG,GACpC,GAAIgG,IAAeC,EACjB,OAAO,EAGT,GAAIP,EAAOM,IAAeN,EAAOO,KACd,IAAdJ,EAAO,IAA0B,IAAdC,EAAO,IAC7B,OAAO,EAGX,OAAOD,EAAO,KAAOC,EAAO,IAAMJ,EAAOG,EAAO,KAAOH,EAAOI,EAAO,IAMvE,IAAII,EACAC,WAEYC,EAAuBjO,GACrC,GAAwB,MAApB+N,EAA0B,CAC5B,MAAM9N,EAAKC,EAAgBF,GAC3B+N,EAAmB9N,EAAGiO,aAAajO,EAAG8N,kBAExC,OAAOA,WAUOI,EAAuBnO,GACrC,GAA8B,MAA1BgO,EAAgC,CAClC,MAAM/N,EAAKC,EAAgBF,GAC3BgO,EAAyB/N,EAAGiO,aAAajO,EAAGmO,yBAG9C,OAAO1L,KAAK2L,IAAI,GAAIL,YAGNM,EAAkCtO,GAEhD,GAAqB,IAAjBA,EACF,OAAO,EAGT,IAAIuO,EACJ,MAAMtO,EAAKC,EAAgBF,GAU3B,OANEuO,EAFEC,EAAavO,EAAI,oCACA,IAAjBD,EACkB,EACXwO,EAAavO,EAAI,4BACN,EAEA,EAEfsO,WAGOC,EAAavO,EAA2B0F,GAEtD,OAAc,MADF1F,EAAG4F,aAAaF,YAId8I,EAAsBzO,GACpC,IAEE,GAAU,MADCE,EAAgBF,GAEzB,OAAO,EAET,MAAO0O,GAEP,OADA3N,QAAQC,IAAI,qCAAsC0N,IAC3C,EAET,OAAO,WAGOC,EAAmC3O,GAEjD,GAAqB,IAAjBA,EACF,OAAO,EAGT,MAAMC,EAAKC,EAAgBF,GAE3B,GAAqB,IAAjBA,GACF,IAAKwO,EAAavO,EAAI,qBACpB,OAAO,OAGT,IAAKuO,EAAavO,EAAI,0BACpB,OAAO,EAKX,OAD8B2O,GAAuC3O,YAavD4O,EAA8B7O,GAC5C,GAAqB,IAAjBA,EACF,OAAO,EAGT,MAAMC,EAAKC,EAAgBF,GAE3B,GAAqB,IAAjBA,EAOG,CACL,GAAIwO,EAAavO,EAAI,0BACnB,OAAO2O,GAAuC3O,GAGhD,MAAM6O,EAA0B,8BAChC,GAAIN,EAAavO,EAAI6O,GAA0B,CAC7C,MAAM9L,EACF/C,EAAG4F,aAAaiJ,GACpB,OAwCN,SAEI7O,EAA2B+C,GAC7B,MAAM+L,EAAYhM,EAAiB9C,EAAI+C,GACjCoH,EAAUnK,EAAGmJ,gBACnBnJ,EAAGwK,YAAYxK,EAAGyK,WAAYN,GAE9B,MAAMd,EAAQ,EACRC,EAAS,EACftJ,EAAG+O,WACC/O,EAAGyK,WAAY,EAAGqE,EAAU5L,wBAAyBmG,EAAOC,EAAQ,EACpEwF,EAAUzL,mBAAoByL,EAAUrL,qBAAsB,MAElE,MAAMuL,EAAchP,EAAGwJ,oBACvBxJ,EAAGmL,gBAAgBnL,EAAGoL,YAAa4D,GACnChP,EAAGqL,qBACCrL,EAAGoL,YAAapL,EAAGsL,kBAAmBtL,EAAGyK,WAAYN,EAAS,GAElE,MAAM8E,EACFjP,EAAGyL,uBAAuBzL,EAAGoL,eAAiBpL,EAAG0L,qBAOrD,OALA1L,EAAGwK,YAAYxK,EAAGyK,WAAY,MAC9BzK,EAAGmL,gBAAgBnL,EAAGoL,YAAa,MACnCpL,EAAGkP,cAAc/E,GACjBnK,EAAGmP,kBAAkBH,GAEdC,EAlEIG,CACHpP,EAAI+C,GAGV,OAAO,EAnBP,IAAKwL,EAAavO,EAAI,qBACpB,OAAO,EAET,IAAKuO,EAAavO,EAAI,4BACpB,OAAO,EAmBX,OAD8B2O,GAAuC3O,GAIvE,SAAS2O,GAAuC3O,GAE9C,MAAM8O,EAAYhM,EAAiB9C,GAE7BmK,EAAUnK,EAAGmJ,gBACnBnJ,EAAGwK,YAAYxK,EAAGyK,WAAYN,GAI9BnK,EAAG+O,WACC/O,EAAGyK,WAAY,EAAGqE,EAAU7L,oBAHlB,EACC,EAEqD,EAChE6L,EAAUzL,mBAAoByL,EAAUpL,iBAAkB,MAE9D,MAAMsL,EAAchP,EAAGwJ,oBACvBxJ,EAAGmL,gBAAgBnL,EAAGoL,YAAa4D,GACnChP,EAAGqL,qBACCrL,EAAGoL,YAAapL,EAAGsL,kBAAmBtL,EAAGyK,WAAYN,EAAS,GAElE,MAAM8E,EACFjP,EAAGyL,uBAAuBzL,EAAGoL,eAAiBpL,EAAG0L,qBAOrD,OALA1L,EAAGwK,YAAYxK,EAAGyK,WAAY,MAC9BzK,EAAGmL,gBAAgBnL,EAAGoL,YAAa,MACnCpL,EAAGkP,cAAc/E,GACjBnK,EAAGmP,kBAAkBH,GAEdC,WAgCOI,GAAoBtP,GAClC,GAAqB,IAAjBA,EACF,OAAO,EAMT,OAD2C,MAHhCE,EAAgBF,GAGGuP,mBAIhBC,GACZC,EAAiCC,GAC9BC,MAAMC,QAAQH,KACjBA,EAAS,CAACA,IAEZA,EAAOI,SAAQC,IACJ,MAALA,GACFvN,OAAKwN,OACW,cAAZD,EAAEE,OACF,IAAM,GAAGN,iWAtfjB,OAAyC,IAArC9L,QAAMC,UAAU,iBACX,EAEF,+IAwDL5D,EAA2BoK,GAC7BC,EAAoBrK,EAAIoK,GACxB9F,EAAatE,GAAI,IAAMA,EAAGsK,cAActK,EAAGuK,SAAWH,KACtD9F,EAAatE,GAAI,IAAMA,EAAGwK,YAAYxK,EAAGyK,WAAY,8IAwBfzK,GACtCsE,EAAatE,GAAI,IAAMA,EAAGmL,gBAAgBnL,EAAGoL,YAAa,QAC1D9G,EAAatE,GAAI,IAAMA,EAAGgQ,SAAS,EAAG,EAAGhQ,EAAGI,OAAOiJ,MAAOrJ,EAAGI,OAAOkJ,UACpEhF,EAAatE,GAAI,IAAMA,EAAGiQ,QAAQ,EAAG,EAAGjQ,EAAGI,OAAOiJ,MAAOrJ,EAAGI,OAAOkJ,uRAyNnEwE,EAAmB,0CAGnBC,EAAyB,4NCvd3B,MAAMmC,GAAMvM,iBCUIwM,KACd,IAAIC,EACA1G,EACA2G,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EA+EJ,OA7EyC,IAArCjN,QAAMC,UAAU,kBAClBwM,EAAU,kBACV1G,EAAY,KACZ2G,EAAY,MACZC,EAAY,KACZC,EAAY,UACZC,EAAS,cACTC,EAAe,wBAMfC,EAAmB,gVAcnBC,EAAmB,GACnBC,EAAc,4OAWdR,EAAU,GACV1G,EAAY,YACZ2G,EAAY,UACZC,EAAY,UACZC,EAAY,YACZC,EAAS,eACTC,EAAe,GAEfC,EAAmB,0SASnBC,EAAmB,iNAUnBC,EAAc,yLAWT,CACLR,QAAAA,EACA1G,UAAAA,EACA2G,UAAAA,EACAC,UAAAA,EACAC,UAAAA,EACAC,OAAAA,EACAC,aAAAA,EACAC,iBAAAA,EACAC,iBAAAA,EACAC,YAAAA,YC1GYC,GACZC,EAAkB1O,EAAiB2O,EAAQ,SAC7C,MAAMC,EAAU1O,OAAK2O,eAAe7O,GACpC,OAAO4O,EACF1J,KAAI,CAAC4J,EAAQxJ,IAKL,GAJO,OAAOoJ,EAAOpJ,QAAQqJ,OAAWG,QACjCxJ,IAAMsJ,EAAQ7J,OAAS,EACjC,OAAO2J,EAAOpJ,EAAI,QAAQqJ,OAAWD,EAAOpJ,QAAQwJ,IACpD,YAAYJ,EAAOpJ,QAAQwJ,SAGhCnJ,KAAK,aAGIoJ,GACZL,EAAkB1O,EAAiB2O,EAAQ,SAC7C,MAAMC,EAAU1O,OAAK2O,eAAe7O,GACpC,OAAO4O,EACF1J,KAAI,CAAC8J,EAAG1J,IAMA,GALO,OAAOoJ,EAAOpJ,QAAQqJ,uBAA2BrJ,SACjDA,IAAMsJ,EAAQ7J,OAAS,EACjC,OAAO2J,EAAOpJ,EAAI,QAAQqJ,OAAWD,EAAOpJ,wBACxCA,KACJ,YAAYoJ,EAAOpJ,wBAAwBA,UAGhDK,KAAK,aA+CIsJ,GAAmBjP,GACjC,MAAM4O,EAAU1O,OAAK2O,eAAe7O,GAAOkF,KAAIyF,GAAKA,EAAE3F,aAEtD,MAAO,+DAEe4J,EAAQ,mBAAmBA,EAAQ,wBFxE3Dd,GAAIoB,aAAa,aAAa,IAAMpB,GAAItM,UAAU,iBAAmB,IAGrEsM,GAAIoB,aAAa,iBAAiB,IAC5B9C,EAAsB,GACjB,EACEA,EAAsB,GACxB,EAEF,IAIT0B,GAAIoB,aAAa,kCAAkC,KAAM,IAEzDpB,GAAIoB,aACA,0BAA0B,IAAmC,IAA7BpB,GAAIqB,IAAI,mBAG5CrB,GAAIoB,aAAa,qBAAqB,KAAM,IAG5CpB,GAAIoB,aAAa,4BAA4B,KAAM,IAGnDpB,GAAIoB,aAAa,cAAc,IAAMpB,GAAIzL,QAAQ,eAGjDyL,GAAIoB,aAAa,4BAA4B,IAAMpB,GAAIzL,QAAQ,gBAG/DyL,GAAIoB,aAAa,mBAAmB,IAAMpB,GAAIzL,QAAQ,gBAGtDyL,GAAIoB,aAAa,4BAA4B,IAAMpB,GAAIzL,QAAQ,gBAG/DyL,GAAIoB,aACA,gCAAgC,IAAMpB,GAAIzL,QAAQ,gBAGtDyL,GAAIoB,aACA,+BAA+B,IAAMpB,GAAIzL,QAAQ,gBAGrDyL,GAAIoB,aACA,+BAA+B,IAAMpB,GAAIzL,QAAQ,gBAGrDyL,GAAIoB,aACA,+BAA+B,IAAMpB,GAAIzL,QAAQ,gBAGrDyL,GAAIoB,aAAa,qBAAqB,IAAMpB,GAAIzL,QAAQ,gBAGxDyL,GAAIoB,aAAa,uBAAuB,IAAMpB,GAAIzL,QAAQ,gBAG1DyL,GAAIoB,aAAa,qBAAqB,IAAMpB,GAAIzL,QAAQ,gBAGxDyL,GAAIoB,aACA,0BACA,IAAMtD,EAAuBkC,GAAItM,UAAU,oBAG/CsM,GAAIoB,aACA,gCACA,IAAMpD,EAAuBgC,GAAItM,UAAU,oBAU/CsM,GAAIoB,aAAa,gDAAgD,KAC/D,MAAMvR,EAAemQ,GAAItM,UAAU,iBAEnC,OAAqB,IAAjB7D,EACK,EAEFsO,EAAkCtO,MAO3CmQ,GAAIoB,aACA,iDACA,IAAMpB,GAAItM,UAAU,gDAAkD,IACjE4N,cAAYC,aAKrBvB,GAAIoB,aACA,gCACA,IAAM5C,EAAmCwB,GAAItM,UAAU,oBAM3DsM,GAAIoB,aAAa,gCAAgC,KACxCpB,GAAIzL,QAAQ,6BAEfyL,GAAIzL,QAAQ,kCAOlByL,GAAIoB,aACA,gCACA,IAAM1C,EAA8BsB,GAAItM,UAAU,oBAGtDsM,GAAIoB,aACA,2BACA,IAAMjC,GAAoBa,GAAItM,UAAU,oBAK5CsM,GAAIoB,aAAa,6BAA6B,IAKxBpB,GAAIzL,QAAQ,gCACX,EAAI,IAU3ByL,GAAIoB,aACA,kCACA,KACU,IAEVI,IACE,GAAIA,EAAY,IAAoB,IAAfA,EACnB,MAAM,IAAIvR,MAEN,8FAAkCuR,SAa9CxB,GAAIoB,aACA,yBACA,IACSE,cAAYC,YAAcvB,GAAIzL,QAAQ,aAAe,GAAK,IAEnEiN,IACE,GAAIA,EAAY,IAAoB,IAAfA,EACnB,MAAM,IAAIvR,MAEN,2FAAwCuR,SAUpDxB,GAAIoB,aAAa,8BAA8B,IAAM,MAGrDpB,GAAIoB,aAAa,6BAA6B,KAAM,IASpDpB,GAAIoB,aAAa,4CAA4C,IAAM,MASnEpB,GAAIoB,aAAa,gCAAgC,IAAM,MEnIhD,MAAMK,GAAuB,g8BCrFvBC,GAQXC,YAAYC,GAPZC,mBAAgB,CAAC,KAGjBA,mBAAe,EACfA,mBAAe,EACfA,sBAAmBlQ,EAAcmQ,MAG/B,MAAMC,EAAW9P,EAAiB2P,GAC5BI,EAAO/B,KACb4B,KAAKD,YAAcA,EAEnBC,KAAKI,SAAW,8DAGZC,GACI,CAAC,IAAK,IAAK,KAAMN,oIAMZG,EAAS,OAAOA,EAAS,gDACFA,EAAS,iQAUvCC,EAAK1B,yCClCF6B,GAQXR,YAAYC,GAPZC,mBAAgB,CAAC,KAEjBA,mBAAe,EACfA,mBAAe,EAEfA,sBAAmBlQ,EAAcmQ,MAG/B,MAAMC,EAAW9P,EAAiB2P,GAC5BI,EAAO/B,KACb4B,KAAKD,YAAcA,EAEnBC,KAAKI,SAAW,8DAGZC,GACI,CAAC,IAAK,IAAK,KAAMN,oIAMZG,EAAS,OAAOA,EAAS,gDACFA,EAAS,+RAUvCC,EAAK1B,yCClCF8B,GAMXT,YAAYC,GALZC,mBAAgB,CAAC,KAGjBA,iBAAcjQ,EAAayQ,SAGzB,MAAML,EAAO/B,KACb4B,KAAKD,YAAcA,EACnBC,KAAKI,SAAW,WACZR,4EAIEO,EAAK1B,kDCdFgC,GAQXX,YAAYC,GAPZC,mBAAgB,CAAC,KAGjBA,mBAAe,EACfA,mBAAe,EACfA,iBAAcjQ,EAAayQ,SAGzB,MAAML,EAAO/B,KACb4B,KAAKD,YAAcA,EACnBC,KAAKI,SAAW,WACZR,6JAKEO,EAAK1B,kDClBFiC,GAKXZ,YACIC,EAAuCG,EACvCS,GAAsB,GAN1BX,mBAAgB,CAAC,KAOf,MAAMG,EAAO/B,MACN7G,EAAQD,GAAS4I,EACxBF,KAAKD,YAAcA,EAEnB,IAAItB,EAAS,SACTkC,IACFlC,EAAS,8BAGXuB,KAAKI,SAAW,WACZQ,GAA+Bb,iPAUTzI,uCACIA,uDACeA,QAAYC,gCACrC4I,EAAK3B,mTAcnB2B,EAAK1B,iBAAiBA,wCC7BnBoC,GAOXf,YACIC,EAAuCG,EACvCS,GAAsB,GAR1BX,mBAAgB,CAAC,KAGjBA,mBAAe,EACfA,mBAAe,EAKb,MAAMG,EAAO/B,MACN7G,EAAQD,GAAS4I,EACxBF,KAAKD,YAAcA,EAEnB,IAAIe,EAAW,GACXrC,EAAS,SACTkC,IACFlC,EAAS,8BAGX,IAAK,IAAIsC,EAAM,EAAGA,GAAO,EAAGA,IAC1B,IAAK,IAAIC,EAAM,EAAGA,GAAO,EAAGA,IAAO,CACjC,MAAMC,EAAgB,EAANF,EAAUC,EAE1BF,GAAY,oEAEYE,OAASjB,EAAY,wCACrBiB,uCACED,OAAShB,EAAY,0CACrBgB,gMAOFzJ,yCACIA,wDACcA,QAAYC,iCACrC4I,EAAK3B,gFAGLyC,mFAEAA,mFAEAA,mEAEAA,yEAQrBjB,KAAKI,SAAW,WACZQ,GAA+Bb,gOAW7Be,gBAEAX,EAAK1B,YAAYA,8BCnFX3K,GAAmB7F,GACjC,MAAMkS,EAAO/B,KAWb,OAAO8C,EAA8BjT,EAVV,GAAGkS,EAAK9B,4CAE/B8B,EAAKxI,qCACLwI,EAAKxI,2BACLwI,EAAK7B,mIASK6C,GAAmBlT,GAIjC,OAAOmT,EAAoCnT,EAFvB,IAAIoT,aACpB,EAAE,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,cAIpDC,GAAkBrT,GAGhC,OAAOsT,EAAmCtT,EADZ,IAAIuT,YAAY,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,KAIhE,SAASC,GACLxT,EAA2BqJ,EAAeC,EAC1CmK,EAAwBC,EACxBC,GACFC,EAA+BvK,EAAOC,GACtC,MAAMa,EAAU0J,EAAyB7T,GAEnC8T,EAAQ9T,EAAGyK,WAgBjB,OAfAsJ,EAAwB/T,GAAI,IAAMA,EAAGwK,YAAYsJ,EAAO3J,KACxD4J,EACI/T,GAAI,IAAMA,EAAGgU,cAAcF,EAAO9T,EAAGiU,eAAgBjU,EAAGkU,iBAC5DH,EACI/T,GAAI,IAAMA,EAAGgU,cAAcF,EAAO9T,EAAGmU,eAAgBnU,EAAGkU,iBAC5DH,EACI/T,GAAI,IAAMA,EAAGgU,cAAcF,EAAO9T,EAAGoU,mBAAoBpU,EAAGqU,WAChEN,EACI/T,GAAI,IAAMA,EAAGgU,cAAcF,EAAO9T,EAAGsU,mBAAoBtU,EAAGqU,WAChEN,EACI/T,GACA,IAAMA,EAAG+O,WACL+E,EAAO,EAAGL,EAAgBpK,EAAOC,EAAQ,EAAGoK,EAC5CC,EAAa,QACrBI,EAAwB/T,GAAI,IAAMA,EAAGwK,YAAYxK,EAAGyK,WAAY,QACzDN,WAGOoK,GACZC,GACF,OAAOA,EAAcvR,6BAGPwR,GACZzU,EAA2BiC,EAAcC,EACzCsS,GACF,MAAOnL,EAAOC,GACVoL,EAAkDzS,EAAMC,GAC5D,OAAOsR,GACHxT,EAAIqJ,EAAOC,EACXiL,GAAyCC,GACzCA,EAAcnR,mBAAoBrD,EAAGmE,gBAG3BwQ,GACZH,GACF,OAAOA,EAActR,iCAGP0R,GACZ5U,EAA2BiC,EAAcC,EACzCsS,GACF,MAAOnL,EAAOC,GACVoL,EAAkDzS,EAAMC,GAC5D,OAAOsR,GACHxT,EAAIqJ,EAAOC,EACXqL,GAAyCH,GACzCA,EAAcnR,mBAAoBmR,EAAc/Q,+BAGtCoR,GACZL,GACF,OAAOA,EAAclR,+BAGPwR,GACZ9U,EAA2BiC,EAAcC,EACzCsS,GACF,MAAOnL,EAAOC,GACVoL,EAAkDzS,EAAMC,GAC5D,OAAOsR,GACHxT,EAAIqJ,EAAOC,EACXuL,GAA+CL,GAAgBxU,EAAGoE,KAClEpE,EAAG+U,wBAGOC,GACZR,GACF,OAAOA,EAAcpR,mCAGP6R,GACZjV,EAA2BiC,EAAcC,EACzCsS,GACF,MAAOnL,EAAOC,GACV4L,EAAgDjT,EAAMC,GAC1D,OAAOsR,GACHxT,EAAIqJ,EAAOC,EAAQ0L,GAAwCR,GAC3DxU,EAAGoE,KAAMpE,EAAGmE,gBAGFgR,GACZX,GACF,OAAOA,EAAcrR,uCAGPiS,GACZpV,EAA2BiC,EAAcC,EACzCsS,GACF,MAAOnL,EAAOC,GACV4L,EAAgDjT,EAAMC,GAC1D,OAAOsR,GACHxT,EAAIqJ,EAAOC,EACX6L,GAA+CX,GAAgBxU,EAAGoE,KAClEoQ,EAAc/Q,+BAGJ4R,GACZrV,EAA2BmI,EAC3BmN,GAIFvB,EACI/T,GAAI,IAAMA,EAAG6I,WAAW7I,EAAG8I,aAAcwM,KAG7C,OAFgBC,EACZvV,EAAImI,EAAS,eAAgBmN,EAAc,EAJhC,GAFG,IAQdC,EACIvV,EAAImI,EAAS,KAAMmN,EAAc,EAP1B,GADE,aAWHE,GACZxV,EAA2BmK,EAAuBd,EAClDC,EAAgBZ,EAAkB8L,GAGpC,IAAIiB,EAA2BC,EAAuBjC,EAFtDM,EAAwB/T,GAAI,IAAMA,EAAGwK,YAAYxK,EAAGyK,WAAYN,KAG5DzB,aAAgBiN,YAClBF,EAAgB,IAAIE,WAAWtM,EAAQC,EAAS,GAChDoM,EAAgB1V,EAAG+U,cACnBtB,EAAiBzT,EAAGoE,OAEpBqR,EAAgB,IAAIrC,aAAa/J,EAAQC,EAAS,GAClDoM,EAAgB1V,EAAGmE,MACnBsP,EAAiBe,EAAcpR,2BAGjCqS,EAAcG,IAAIlN,GAElBqL,EACI/T,GACA,IAAMA,EAAG+O,WACL/O,EAAGyK,WAAY,EAAGgJ,EAAgBpK,EAAOC,EAAQ,EAAGtJ,EAAGoE,KACvDsR,EAAeD,KAEvB1B,EAAwB/T,GAAI,IAAMA,EAAGwK,YAAYxK,EAAGyK,WAAY,iBAGlDoL,GACZ7V,EAA2BmK,EAC3B2L,GAEF/B,EAAwB/T,GAAI,IAAMA,EAAGwK,YAAYxK,EAAGyK,WAAYN,KAC3D2L,EAAqBpN,gBAAgBiN,WACxC5B,EACI/T,GACA,IAAMA,EAAG+O,WACL/O,EAAGyK,WAAY,EAAGzK,EAAGoE,KAAM0R,EAAOzM,MAAOyM,EAAOxM,OAAQ,EAAGtJ,EAAGoE,KAC9DpE,EAAG+U,cAAgBe,EAAqBpN,QAEhDqL,EACI/T,GACA,IAAMA,EAAG+O,WACL/O,EAAGyK,WAAY,EAAGzK,EAAGoE,KAAMpE,EAAGoE,KAAMpE,EAAG+U,cACvCe,KAIV/B,EAAwB/T,GAAI,IAAMA,EAAGwK,YAAYxK,EAAGyK,WAAY,iBAGlDsL,GACZC,EAA6B/T,EAAcC,EAC3CsS,GAEF,MAAM7L,EAASqN,EAAIpN,eACnBmL,EACIiC,GAAK,IAAMA,EAAInN,WAAWmN,EAAIC,kBAAmBtN,KAGrD,MAEMuN,EAAkBC,GAAiClU,EAAOC,EAehE,OAbA6R,EACIiC,GACA,IAAMA,EAAIjN,WACNiN,EAAIC,kBAAmBC,EAAiBF,EAAII,eAIpDrC,EACIiC,GAAK,IAAMA,EAAIK,WAAW,EAAG,EAAGnU,EAASD,EAAM+T,EAAI5R,KAAM4R,EAAI7R,MAAO,KAExE4P,EACIiC,GAAK,IAAMA,EAAInN,WAAWmN,EAAIC,kBAAmB,QAE9CtN,WAGO2N,GACZtW,EAA2B2I,EAC3BtG,GACF,MAAM2T,EAAMhW,EAENuW,EAAiB,IAAInD,aAAa/Q,GAMxC,OAJA2T,EAAInN,WAAWmN,EAAIC,kBAAmBtN,GACtCqN,EAAIQ,iBAAiBR,EAAIC,kBAAmB,EAAGM,GAC/CP,EAAInN,WAAWmN,EAAIC,kBAAmB,MAE/BM,WAGOE,GACZzW,EAA2BiC,EAAcC,EACzCsS,GACF,MAAOkC,EAAGC,GACNjC,EAAkDzS,EAAMC,GAGtDqU,EAAiB,IAAIZ,WACqB1T,EAAOC,EAFnC,GAYpB,OARA6R,EACI/T,GACA,IAAMA,EAAGqW,WACL,EAAG,EAAGK,EAAGC,EAAGnC,EAAclR,sBAAuBtD,EAAG+U,cACpDwB,KAID,IAAInD,aAAamD,EAAe5N,iBAGzBiO,GACZ5W,EAA2B2I,EAAqBkO,EAAe5U,EAC/DoL,EAAcyJ,EAAsBC,EACpCvC,GACF,MAAMwB,EAAMhW,EAENuW,EACF,IAAInD,sBXzINnR,EAAcC,GAChB,MAAOwU,EAAGC,GAAK/T,EAAuCX,EAAMC,GAC5D,OAAOwU,EAAIC,EAAI,EWuIMK,CACbF,EAAcC,IAMtB,OAJAf,EAAInN,WAAWmN,EAAIC,kBAAmBtN,GACtCqN,EAAIQ,iBAAiBR,EAAIC,kBAAmB,EAAGM,GAC/CP,EAAInN,WAAWmN,EAAIC,kBAAmB,MAE/BM,WAGOU,GACZjX,EAA2B8W,EAC3BC,GACF,MAAMG,EAAa,IAAI9D,aAAa0D,EAAeC,EAAe,GAMlE,OALAhD,EACI/T,GACA,IAAMA,EAAGqW,WACL,EAAG,EAAGU,EAAcD,EAAc9W,EAAGoE,KAAMpE,EAAGmE,MAAO+S,KAEtDA,yxBCzRIC,GAkBXtF,YAAY7R,GAPZ+R,mBAAmC,KACnCA,aAA6B,KACrBA,eAAW,EAuOXA,0BAAsB,EAyPtBA,iBAA0B,GA1dhC,MAAMqF,EAAYzT,QAAMC,UAAU,iBACxB,MAAN5D,GACF+R,KAAK/R,GAAKA,EACVF,EAAgBsX,EAAWpX,IAE3B+R,KAAK/R,GAAKC,EAAgBmX,GAG5B,IAAIC,EAAqB,2BACzB,MAAMxI,EAA0B,8BAChC,GAAyC,IAArClL,QAAMC,UAAU,iBAAwB,CAC1C,MAAM0T,EAAgB,oBAChBC,EAAqB,yBAI3B,GAFAxF,KAAKyF,sBACDC,EAA+B1F,KAAK/R,GAAIsX,GACxCI,EAAwB3F,KAAK/R,GAAIuX,GACnCxF,KAAKhP,0BACD0U,EAA+B1F,KAAK/R,GAAIuX,QACvC,GAAI5T,QAAM4N,IAAI,4BACnB,MAAM,IAAIpR,MACN,sHAKN,GADA4R,KAAK4F,0BAA4B5F,KAAK/R,GAAG4F,aAAayR,GAClDK,EAAwB3F,KAAK/R,GAAI6O,GACnCkD,KAAK6F,8BACDH,EAA+B1F,KAAK/R,GAAI6O,QACvC,GAAIlL,QAAM4N,IAAI,4BACnB,MAAM,IAAIpR,MACN,oIAKN,GADAkX,EAAqB,yBACjBK,EAAwB3F,KAAK/R,GAAIqX,GACnCtF,KAAK4F,0BACD5F,KAAK/R,GAAG4F,aAAayR,OACpB,CAAA,IAAIK,EAAwB3F,KAAK/R,GAAI6O,GAI1C,MAAM,IAAI1O,MAAM,uDAHhB4R,KAAK6F,8BACD7F,KAAK/R,GAAG4F,aAAaiJ,GAM7BkD,KAAKuD,aAAeuC,GAA8B9F,KAAK/R,IACvD+R,KAAK+F,YAAcC,GAA6BhG,KAAK/R,IACrD+R,KAAK7G,YAAc8M,EAA6BjG,KAAK/R,IAErD+R,KAAKyC,cACDyD,EAA0BlG,KAAK/R,GAAI+R,KAAKhP,2BAG9CmV,YACE,OAAOvU,QAAMc,QAAQ,SAGhBoN,UACL,GAAIE,KAAKoG,SACP,OAEkB,MAAhBpG,KAAK5J,SACPrH,QAAQsX,KACJ,wKAIoB,MAAtBrG,KAAKsG,eACPvX,QAAQsX,KACJ,sMAKN,MAAMpY,EAAK+R,KAAK/R,GAChB+T,EAAwB/T,GAAI,IAAMA,EAAGsY,WACrCvE,EAAwB/T,GAAI,IAAMA,EAAGmL,gBAAgBnL,EAAGoL,YAAa,QACrE2I,EAAwB/T,GAAI,IAAMA,EAAGmP,kBAAkB4C,KAAK7G,eAC5D6I,EAAwB/T,GAAI,IAAMA,EAAG6I,WAAW7I,EAAG8I,aAAc,QACjEiL,EACI/T,GAAI,IAAMA,EAAG6I,WAAW7I,EAAGkJ,qBAAsB,QACrD6K,EAAwB/T,GAAI,IAAMA,EAAGuY,aAAaxG,KAAK+F,eACvD/F,KAAKoG,UAAW,EAGXtG,2BAA2B5P,EAAcC,GAG9C,OADA6P,KAAKyG,kBACEC,GACH1G,KAAK/R,GAAIiC,EAAMC,EAAS6P,KAAKyC,eAG5B3C,2BAA2B5P,EAAcC,GAG9C,OADA6P,KAAKyG,kBACEE,GACH3G,KAAK/R,GAAIiC,EAAMC,EAAS6P,KAAKyC,eAG5B3C,iCAAiC5P,EAAcC,GAGpD,OADA6P,KAAKyG,kBACEG,GACH5G,KAAK/R,GAAIiC,EAAMC,EAAS6P,KAAKyC,eAG5B3C,yBACH1H,EACA2L,GAEF/D,KAAKyG,kBACLI,GAAoC7G,KAAK/R,GAAImK,EAAS2L,GAGjDjE,2BACH1H,EAAuBd,EAAeC,EAAgBZ,GACxDqJ,KAAKyG,kBACLK,GACI9G,KAAK/R,GAAImK,EAASd,EAAOC,EAAQZ,EAAMqJ,KAAKyC,eAG3C3C,iCAAiC5P,EAAcC,GAGpD,OADA6P,KAAKyG,kBACEM,GACH/G,KAAK/R,GAAIiC,EAAMC,EAAS6P,KAAKyC,eAG5B3C,0BAA0B5P,EAAcC,GAG7C,OADA6P,KAAKyG,kBACEO,GACHhH,KAAK/R,GAAIiC,EAAMC,EAAS6P,KAAKyC,eAG5B3C,oBAAoB1H,GACzB4H,KAAKyG,kBACDzG,KAAKsG,gBAAkBlO,IACzB6O,EAA6CjH,KAAK/R,GAAI+R,KAAK7G,aAC3D6G,KAAKsG,cAAgB,MAEvBtE,EAAwBhC,KAAK/R,IAAI,IAAM+R,KAAK/R,GAAGkP,cAAc/E,KAGxD0H,gDACH1H,EAAuBlI,EAAcC,GACvC,OAAO6P,KAAKkH,qBACR9O,GACA,IAAM+O,GACFnH,KAAK/R,GAAIiC,EAAMC,EAAS6P,KAAKyC,iBAGhC3C,+BACHlJ,EAAqBkO,EAAe5U,EAAcC,EAClD4U,EAAsBC,GACxB,OAAOoC,GACHpH,KAAK/R,GAAI2I,EAAQkO,EAAO5U,EAAMC,EAAS4U,EAAcC,EACrDhF,KAAKyC,eAGJ3C,gCAAgClJ,EAAqBtG,GAE1D,OAAO+W,GAA2CrH,KAAK/R,GAAI2I,EAAQtG,GAG9DwP,wBACH1H,EAAuBlI,EAAcC,GACvC6P,KAAKsH,yBAAyBlP,GAC9B,MAAMmP,EAASC,GACXxH,KAAK/R,GAA8BiC,EAAMC,EAAS6P,KAAKyC,eAE3D,OADAzC,KAAKyH,6BACEF,EAGFzH,wBACL,MAAM4H,EAAe1H,KAAK2H,YAAY3H,KAAK/R,IAC3C,OAAO+R,KAAK4H,UAAUF,GAGhB5H,YAAY7R,GAClB,IAAI4Z,EACAC,EAEJ,GAAIlW,QAAMc,QAAQ,2BAA4B,CAC5C,MAAMuR,EAAMhW,EAEN8Z,EAAO9D,EAAI1G,UAAU0G,EAAI+D,2BAA4B,GAC3D/Z,EAAGga,QAEHH,EAAgB,KACd,MAAM3U,EAAS8Q,EAAIiE,eAAeH,EAAM,EAAG,GAC3C,OAAO5U,IAAW8Q,EAAIkE,kBAClBhV,IAAW8Q,EAAImE,qBAGrBP,EAAQE,OAENnW,QAAMC,UAAU,gDAAkD,GACpEgW,EAAQ7H,KAAKqI,aACbrI,KAAKsI,WACLR,EAAgB,IAAM9H,KAAKuI,iBACvBV,EACAjW,QAAMC,UAAU,kDAMpBiW,EAAgB,KAAM,EAGxB,MAAO,CAACD,MAAAA,EAAOC,cAAAA,GAGVhI,gCACH1H,EAAuB2M,EACvBC,GACF,OAAOhF,KAAKkH,qBACR9O,GACA,IAAMoQ,GACFxI,KAAK/R,GAAI8W,EAAcC,KAK1BlF,cAAcrL,GACnBuL,KAAKyG,kBACL,MAAMxY,EAAK+R,KAAK/R,GACVyG,EACF+T,EAAgCxa,EAAIwG,GACf,MAArBuL,KAAKhM,eACPgM,KAAKhM,aAAe0U,GAA8Bza,IAEpD,MAAMmI,EAAwBuS,EAAyB1a,GAavD,OAZA+T,EACI/T,GAAI,IAAMA,EAAG2a,aAAaxS,EAAS4J,KAAKhM,gBAC5CgO,EAAwB/T,GAAI,IAAMA,EAAG2a,aAAaxS,EAAS1B,KAC3DmU,EAAuB5a,EAAImI,GACvB4J,KAAKmG,OACP2C,EAA2B7a,EAAImI,GAE5B4J,KAAK+I,sBACR/I,KAAKgJ,WAAW5S,GAChB4J,KAAK+I,oBAAsBE,GACvBhb,EAAI+R,KAAK5J,QAAS4J,KAAKuD,eAEtBnN,EAGF0J,cAAc1J,GACnB4J,KAAKyG,kBACDrQ,IAAY4J,KAAK5J,UACnB4J,KAAK5J,QAAU,MAEF,MAAXA,GACF4L,EAAwBhC,KAAK/R,IAAI,IAAM+R,KAAK/R,GAAGib,cAAc9S,KAI1D0J,WAAW1J,GAChB4J,KAAKyG,kBACLzG,KAAK5J,QAAUA,EACM,MAAhB4J,KAAK5J,SAAoB4J,KAAKmG,OACjC2C,EAA2B9I,KAAK/R,GAAI+R,KAAK5J,SAE3C4L,EAAwBhC,KAAK/R,IAAI,IAAM+R,KAAK/R,GAAGkb,WAAW/S,KAGrD0J,mBACH1J,EAAuBwC,EACvBwQ,GAAc,GAEhB,OADApJ,KAAKyG,kBACD2C,EACKC,EACHrJ,KAAK/R,GAAImI,EAASwC,GAEf0Q,EACHtJ,KAAK/R,GAAImI,EAASwC,GAInBkH,qBAAqB1J,EAAuBuB,GAGjD,OADAqI,KAAKyG,kBACEzE,EACHhC,KAAK/R,IAAI,IAAM+R,KAAK/R,GAAG+J,kBAAkB5B,EAASuB,KAGjDmI,0BAA0B1J,EAAuBwC,GAGtD,OADAoH,KAAKyG,kBACEzG,KAAK/R,GAAG4K,mBAAmBzC,EAASwC,GAGtCkH,sBACHyJ,EAAkCC,EAClCnR,GACF2H,KAAKyG,kBACLzG,KAAKyJ,mBACLC,EACI1J,KAAK/R,GAAIsb,EAAoBC,EAAiBnR,GAG7CyH,uBACH6J,EAAmCzZ,EAAcC,GACnD6P,KAAK4J,6BAA6BD,EAAqBxZ,EAASD,GAG3D4P,6BACH+J,EAAyC3Z,EAAcC,GACzD6P,KAAKyG,kBACL,MAAOnP,EAAOC,GACV4L,EAAgDjT,EAAMC,GAC1D6P,KAAK4J,6BAA6BC,EAA2BvS,EAAOC,GAG/DuI,2BACHgK,EAAkBC,EAAiBC,EACnCC,GACFjK,KAAKkK,iCACDF,EAAaF,EAAUG,EAAYF,GAGlCjK,iCACHgK,EAAkBC,EAAiBC,EACnCC,GACF,MAAM,IAAI7b,MAAM,qDAGX0R,gBACe,MAAhBE,KAAK5J,SACP0S,EAA2B9I,KAAK/R,GAAI+R,KAAK5J,SAE3C+T,EAA+BnK,KAAK/R,IAG/B6R,iBACLE,KAAKyG,kBACLzG,KAAKyJ,mBACL,MAAMxb,EAAK+R,KAAK/R,GACZ+R,KAAKmG,OACPnG,KAAKoK,gBAEPpI,EACI/T,GAAI,IAAMA,EAAGoc,aAAapc,EAAGqc,UAAW,EAAGrc,EAAGsc,eAAgB,KAG7DzK,iCACLE,KAAKyG,kBACLzE,EAAwBhC,KAAK/R,IAAI,IAAM+R,KAAK/R,GAAGsY,WAGzCzG,yBAaN,OAXwC,MAApCE,KAAKwK,8BACPxK,KAAKwK,4BACD9E,EACI1F,KAAK/R,GAEmD,IADxD2D,QAAMC,UACF,gDACA,kCACA,6BAIPmO,KAAKwK,4BAGN1K,+BACN,OAAOE,KAAKyK,yBAGN3K,+BACN,OAAOE,KAAKyK,yBAGd3K,aACE,GAAwE,IAApElO,QAAMC,UAAU,gDAAuD,CACzE,MAAMoS,EAAMjE,KAAK/R,GACXyc,EAAM1K,KAAK2K,+BAEX9C,EAAQ5D,EAAI2G,cAElB,OADA3G,EAAIoE,WAAWqC,EAAIG,iBAAkBhD,GAC9BA,EAET,MAAM6C,EAAM1K,KAAK8K,+BACXjD,EAAQ6C,EAAIK,iBAElB,OADAL,EAAIM,cAAcN,EAAIG,iBAAkBhD,GACjCA,EAGT/H,WACE,GAAwE,IAApElO,QAAMC,UAAU,gDAAuD,CACzE,MAAMoS,EAAMjE,KAAK/R,GACXyc,EAAM1K,KAAK2K,+BAEjB,YADA1G,EAAIqE,SAASoC,EAAIG,kBAGnB,MAAMH,EAAM1K,KAAK8K,+BACjBJ,EAAIO,YAAYP,EAAIG,kBAGf/K,6BAA6B+H,GASlC,aARMtX,OAAK2a,aACP,IAAMlL,KAAKoG,UAGPpG,KAAKuI,iBACDV,EACAjW,QAAMC,UACF,mDACTmO,KAAKmL,aACRtD,EAAOjW,QAAMC,UAAU,iDAGrBiO,aAAa+H,EAAmBtL,GACtC,GAA0B,IAAtBA,EACF,OAAO,KAGT,GAA0B,IAAtBA,EAAyB,CAC3B,MAAM0H,EAAMjE,KAAK/R,GAIjB,OAFyBgW,EAAImH,kBAAkBvD,EAAO5D,EAAIoH,cAEhC,IACrB,CACL,MAAMX,EAAM1K,KAAK8K,+BAKjB,OAFIJ,EAAIY,kBAAkBzD,EAAO6C,EAAIa,kBAEX,KAItBzL,iBAAiB+H,EAAmBtL,GAE1C,GAA0B,IAAtBA,EACF,OAAO,EAGT,GAA0B,IAAtBA,EAAyB,CAC3B,MAAM0H,EAAMjE,KAAK/R,GACXyc,EAAM1K,KAAK2K,+BAEXa,EACFvH,EAAImH,kBAAkBvD,EAAO5D,EAAIwH,wBAKrC,OAJqB,MAAjBzL,KAAK0L,WACP1L,KAAK0L,SAAW1L,KAAK/R,GAAGiO,aAAawO,EAAIiB,mBAGpCH,IAAcxL,KAAK0L,SACrB,CACL,MAAMhB,EAAM1K,KAAK8K,+BAEXU,EACFd,EAAIY,kBAAkBzD,EAAO6C,EAAIkB,4BAKrC,OAJqB,MAAjB5L,KAAK0L,WACP1L,KAAK0L,SAAW1L,KAAK/R,GAAGiO,aAAawO,EAAIiB,mBAGpCH,IAAcxL,KAAK0L,UAI9B5L,UAAU4H,GACR,OAAO,IAAImE,SAAcC,IACvB9L,KAAK+L,eAAc,IAAMrE,EAAaI,kBAAiB,IAAMgE,SAMjEhM,YAEE,MAAMd,WAmG2BgN,GACnC,IAAIrW,EAAI,EACR,KAAOA,EAAIqW,EAAI5W,SAAUO,EAAG,CAE1B,IADeqW,EAAIrW,KAEjB,MAGJ,OAAOA,EAAI,EA3GKsW,CAAqBjM,KAAKkM,YAAY3W,KAAI4W,GAAKA,EAAEC,YAC/D,IAAK,IAAIzW,EAAI,EAAGA,GAAKqJ,IAASrJ,EAAG,CAC/B,MAAM0W,UAACA,GAAarM,KAAKkM,YAAYvW,GACrC0W,IAEFrM,KAAKkM,YAAclM,KAAKkM,YAAYrW,MAAMmJ,EAAQ,GAG5Cc,cAAcsM,EAAyBC,GAC7CrM,KAAKkM,YAAYI,KAAK,CAACF,SAAAA,EAAUC,UAAAA,IAC7BrM,KAAKkM,YAAY9W,OAAS,GAK9B7E,OAAK2a,aAAY,KACflL,KAAKuM,YAE8B,IAA5BvM,KAAKkM,YAAY9W,UAIpB0K,yBAAyB1H,GAC/B4H,KAAKyG,kBACL+F,EACIxM,KAAK/R,GAAImK,EAAS4H,KAAK7G,aACvB6G,KAAKmG,OACPgE,EAA+BnK,KAAK/R,IAIhC6R,6BACoB,MAAtBE,KAAKsG,eACPkG,EACIxM,KAAK/R,GAAI+R,KAAKsG,cAAetG,KAAK7G,aAClC6G,KAAKmG,OACPgE,EAA+BnK,KAAK/R,KAGtCgZ,EAA6CjH,KAAK/R,GAAI+R,KAAK7G,aAIvD2G,qBACJ1H,EACAqU,GACFzM,KAAKsH,yBAAyBlP,GAC9B,MAAMmP,EAASkF,IAGf,OAFAzM,KAAKyH,6BAEEF,EAGDzH,6BACJ4M,EAA8CpV,EAC9CC,GACFyI,KAAKyG,kBACL,MAAMxY,EAAK+R,KAAK/R,GAChBue,EACIve,EAAIye,EAAgC1M,KAAK7G,aACzC6G,KAAKmG,OACPgE,EAA+Blc,GAEjC+R,KAAKsG,cAAgBoG,EACrB1K,EAAwB/T,GAAI,IAAMA,EAAGgQ,SAAS,EAAG,EAAG3G,EAAOC,KAC3DyK,EAAwB/T,GAAI,IAAMA,EAAGiQ,QAAQ,EAAG,EAAG5G,EAAOC,KAGpDuI,iCACJqM,EAAWQ,EAAWrV,EAAeC,GACvCyI,KAAKyG,kBACLzE,EACIhC,KAAK/R,IAAI,IAAM+R,KAAK/R,GAAGiQ,QAAQiO,EAAGQ,EAAGrV,EAAOC,KAG1CuI,kBACN,GAAIE,KAAKoG,SACP,MAAM,IAAIhY,MAAM,2CAIZ0R,mBACN,GAAoB,MAAhBE,KAAK5J,QACP,MAAM,IAAIhI,MAAM,qCC9kBtB,MAAMwe,iBAACA,IAAoBC,wBA4BXC,GACZC,EAAyBhN,EACzB3J,GACF,MAAM4W,EAA2B,GAoCjC,GAnCAD,EAAWlP,SAAQsO,IACjB,MAAM7b,EAAOC,OAAKC,cAAc2b,EAAEc,UAAUC,cAW5C,GARIf,EAAEc,UAAUE,UACdH,EAAeV,KACX,iBAAiBH,EAAEiB,OAAO9c,EAAO,EAAI,IAAIA,KAAU,QAEvD0c,EAAeV,KAAK,qBAAqBH,EAAEiB,SAC3CJ,EAAeV,KAAK,qBAAqBH,EAAEiB,UAGzChX,EAAQiX,oBAAqB,CAC/B,MAAMC,aAACA,GAAgBC,GACnBnX,EAAQoX,aAAcrB,EAAEc,UAAUC,aAAcf,EAAEc,UAAU/M,UAChE,OAAQoN,EAAalY,QACnB,KAAK,EACH4X,EAAeV,KAAK,eAAeH,EAAEiB,cACrC,MACF,KAAK,EACHJ,EAAeV,KAAK,iBAAiBH,EAAEiB,cACvC,MACF,KAAK,EACHJ,EAAeV,KAAK,iBAAiBH,EAAEiB,cACvC,MACF,KAAK,EACHJ,EAAeV,KAAK,iBAAiBH,EAAEiB,cAK3CJ,EAAeV,KAAK,iBAAiBH,EAAEiB,qBAIvChX,EAAQiX,oBAAqB,CAC/B,OAAQtN,EAAYmN,aAAa9X,QAC/B,KAAK,EACH4X,EAAeV,KAAK,yBACpB,MACF,KAAK,EACHU,EAAeV,KAAK,2BACpBU,EAAeV,KAAK,gCACpB,MACF,KAAK,EACHU,EAAeV,KAAK,2BACpBU,EAAeV,KAAK,kCACpB,MACF,KAAK,EACHU,EAAeV,KAAK,2BACpBU,EAAeV,KAAK,kCAKxBU,EAAeV,KAAK,8BAElBlW,EAAQqX,gBACVrX,EAAQqX,eAAe5P,SAAS7C,IAC9BgS,EAAeV,KAAK,WAAWtR,EAAE0S,QAAQ1S,EAAEoS,OACvCpS,EAAE2S,WAAa,IAAI3S,EAAE2S,cAAgB,UAG7C,MAAMC,EAAqBZ,EAAehX,KAAK,MAEzC6X,EAAuBd,EACKxX,KACG4W,GA2EvC,SACI2B,EAAmBC,EAAyBC,GAAqB,EACjEX,GACF,IAAIY,EAAM,GAERA,GADED,EACKE,GAA2BJ,EAAQT,GAEnCc,GAAqBL,EAAQT,GAGtC,MAAMe,EAAUN,EAAOb,UAAUC,aAC3BmB,EAAWN,EAAab,aAC1BkB,EAAQhZ,QAAUiZ,EAASjZ,SAE3B6Y,GADED,EA2/CR,SACIM,EAAsBP,GACxB,MAAMQ,EAAUD,EAAUlB,KACpBoB,EAAiBD,EAAQE,OAAO,GAAGC,cAAgBH,EAAQ1Y,MAAM,GACjE8Y,EAAW,MAAQH,EAAiB,cACpCI,EAASN,EAAUrB,UAAUC,aAAa9X,OAC1CyZ,EAAUd,EAAab,aAAa9X,OAEpC0Z,EAAgBlC,GAClB0B,EAAUrB,UAAUC,aAAca,EAAab,cAE7CQ,EAAOqB,GAAkBF,GACzBG,EAAWH,EAAUD,EAC3B,IAAIK,EACJ,MAAMC,EAAS,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KAGvCD,EADa,IAAXL,EACc,GACPC,EAAU,GAAKC,EAAc1Z,QAAU,EAChC,cAGZ0Z,EAAcvZ,KAAIyF,GAAK,UAAUkU,EAAOlU,EAAIgU,YACvChZ,KAAK,MAEhB,IAAImZ,EAAwB,GAE1BA,EADEN,EAAU,GAAKD,EAAS,EACF,SAEAN,EAAUrB,UAAUC,aACf3X,KAAI,CAAC6Z,EAAGzZ,IAAM,UAAUuZ,EAAOvZ,EAAIqZ,OACnChZ,KAAK,MAGpC,IAAIyI,EAAS,sBACb,MACM4Q,EAA2B,IADlB9e,OAAKC,cAAc8d,EAAUrB,UAAUC,cAGhDoC,EAA6B,IADnB/e,OAAKC,cAAcud,EAAab,cAGhD,GAAe,IAAX0B,GAAiBS,GAAkBC,GAIhC,GAAID,IAAkBC,EAEzB7Q,EADc,IAAZoQ,EACO,uEAIA,qDAIN,GAAIC,EAAc1Z,OAAQ,CAC/B,MAAMlF,EAAO0e,EAAS,EAChBtT,EAAOsT,EAAS,EAElBE,EAAcS,QAAQrf,IAAS,GAAK4e,EAAcS,QAAQjU,IAAS,EACrEmD,EAAS,8BACAqQ,EAAcS,QAAQrf,IAAS,EACxCuO,EAAS,2EAEAqQ,EAAcS,QAAQjU,IAAS,IACxCmD,EAAS,sDAvBXA,EAAS,6DA2BX,MAAO,cACEkQ,gBACHjB,wCACAuB,kCACsBT,KAAkBW,cACxC1Q,eAnkDK+Q,CAA+B1B,EAAQC,GAwkDpD,SACIO,EAAsBP,GACxB,MAAMQ,EAAUD,EAAUlB,KACpBoB,EAAiBD,EAAQE,OAAO,GAAGC,cAAgBH,EAAQ1Y,MAAM,GACjE8Y,EAAW,MAAQH,EAAiB,cACpCiB,EAAc1B,EAAa7N,SAC3BwP,EAAapB,EAAUrB,UAAU/M,SACjC0O,EAASN,EAAUrB,UAAUC,aAAa9X,OAC1CyZ,EAAUd,EAAab,aAAa9X,OAE1C,IAAKkZ,EAAUrB,UAAUE,WAAayB,IAAWC,GACX,MAAlCP,EAAUrB,UAAU0C,YACpBpf,OAAKqL,YAAY8T,EAAYD,GAC/B,MAAO,iBACGd,uCACiBJ,+BAK7B,MAAMb,EAAOqB,GAAkBF,GACzBC,EAAgBlC,GAClB0B,EAAUrB,UAAUC,aAAca,EAAab,cAC7C8B,EAAWH,EAAUD,EAC3B,IAAIK,EACJ,MAAMC,EAAS,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KAGvCD,EADa,IAAXL,EACc,GACPC,EAAU,GAAKC,EAAc1Z,QAAU,EAChC,cAGZ0Z,EAAcvZ,KAAIyF,GAAK,UAAUkU,EAAOlU,EAAIgU,YACvChZ,KAAK,MAEhB,IAAImZ,EAAwB,GAE1BA,EADEN,EAAU,GAAKD,EAAS,EACF,SAEAN,EAAUrB,UAAUC,aACf3X,KAAI,CAAC6Z,EAAGzZ,IAAM,UAAUuZ,EAAOvZ,EAAIqZ,OACnChZ,KAAK,MAGpC,MAAO,eACG2Y,gBACJjB,wCACAuB,sBACUT,KAAkBW,iBAvnDvBS,CAAyB9B,EAAQC,IAG5C,OAAOE,EA9FmC4B,CACD1D,EAAGpM,EAAa3J,EAAQoX,aACxBpX,EAAQiX,uBACfrX,KAAK,MACjCyZ,EAAc1P,EAAYG,SAC1BC,EAAO/B,KACP0R,EAkJR,SAAsC3P,GACpC,MAAO,gFAEMA,EAAK3B,8CArJgBuR,CAA6B5P,GAC/D,IAAI6P,EACAC,EACAC,EAuKN,SAAyB/P,GA6DvB,MA5DsB,GAAGA,EAAK9B,sGAI1B8B,EAAK5B,iCACL4B,EAAKzB,wTAuBLyB,EAAKxB,yBACLwB,EAAKvB,yBACLuB,EAAKtB,2lBAyBLsR,WACAC,WACAC,SAjOeC,CAAgBnQ,GAE/BJ,EAAYjF,UACdkV,EAqFJ,SACI3B,EAAoBoB,EACpBpC,GACF,OAAQgB,EAASjZ,QACf,KAAK,EACH,OAAOmb,KACT,KAAK,EACH,OAgMN,SACIlgB,EAAiB6P,EACjBmN,GACF,MAAMmD,EACF,CAAC9f,KAAKC,KAAKuP,EAAS,GAAK,GAAIxP,KAAKC,KAAKuP,EAAS,GAAK,IACzD,GAA0B,IAAtBsQ,EAAe,GACjB,OAAInD,EACK,0HAOF,wEAE2BmD,EAAe,wBAKnD,GAA0B,IAAtBA,EAAe,GACjB,OAAInD,EACK,0HAOF,wEAE2BmD,EAAe,wBAKnD,GAAInD,EACF,MAAO,8UAUT,MAAO,gHAG2BmD,EAAe,OAAOA,EAAe,yCACxCA,EAAe,+BApPnCC,CACHpC,EAAsBoB,EAAapC,GACzC,KAAK,EACH,OAigBN,SACIhd,EAAyB6P,EACzBmN,GACF,MAAMmD,EACF,CAAC9f,KAAKC,KAAKuP,EAAS,GAAK,GAAIxP,KAAKC,KAAKuP,EAAS,GAAK,IACzD,GAAI3P,OAAKqL,YAAYvL,EAAO6P,GAC1B,OAAImN,EACK,qPAQF,kFAEmCmD,EAAe,OACrDA,EAAe,uBAMrB,MAAME,EAAqBhgB,KAAKC,KAAKN,EAAM,GAAK,GAWhD,GAAIgd,EACF,MAAO,whBAgBT,MAAO,kHAG2BmD,EAAe,OAAOA,EAAe,2CAExCA,EAAe,gDACnBE,kCACDA,kDA5jBfC,CACHtC,EAA8BoB,EAAapC,GACjD,KAAK,EACH,OAoSN,SACIhd,EAAiC6P,EACjCmN,GACF,GAAIA,EACF,MAAO,2rBAoBT,MAAMmD,EACF,CAAC9f,KAAKC,KAAKuP,EAAS,GAAK,GAAIxP,KAAKC,KAAKuP,EAAS,GAAK,IACnDwQ,EAAqBhgB,KAAKC,KAAKN,EAAM,GAAK,GAC1CugB,EAAgBF,EAAqBhgB,KAAKC,KAAKN,EAAM,GAAK,GAEhE,MAAO,kHAG2BmgB,EAAe,OAAOA,EAAe,yCACxCA,EAAe,6CAExBI,0BACHA,oCAEQF,kCACDA,qDA3UfG,CACHxC,EAAsCoB,EACtCpC,GACN,QACE,OA8WN,SACIhd,EAAiB6P,EACjBmN,GACF,GAAIA,EAEF,MAAO,y0BAwBT,MAAMmD,EACF,CAAC9f,KAAKC,KAAKuP,EAAS,GAAK,GAAIxP,KAAKC,KAAKuP,EAAS,GAAK,IAEnDwQ,EAAqBhgB,KAAKC,KAAKN,EAAMA,EAAM+E,OAAS,GAAK,GACzDwb,EACFF,EAAqBhgB,KAAKC,KAAKN,EAAMA,EAAM+E,OAAS,GAAK,GAC7D,IAAI0b,EAAiBF,EACjBG,EAAU,GACVhS,EAAS,UAEb,IAAK,IAAIiS,EAAI,EAAGA,EAAI3gB,EAAM+E,OAAS,EAAG4b,IACpCF,GAAkBzgB,EAAMA,EAAM+E,OAAS4b,EAAI,GAC3CD,EAAU,gBACDC,eAAeF,uBACVE,OAAOF,WACjBC,EACJhS,EAAS,IAAIiS,MAAQjS,EAGvB,MAAO,aACC1O,EAAM+E,6GAEoBob,EAAe,OAAOA,EAAe,yCACxCA,EAAe,6BAExCO,8BAEgBH,0BACHA,oCAEQF,kCACDA,+BAETrgB,EAAM+E,UAAU2J,iBA5atBkS,CACH5C,EAAUoB,EAAapC,IAvGL6D,CACpBnR,EAAYmN,aAAcuC,EAAarZ,EAAQiX,qBACnD4C,EA0JJ,SAAuC9P,GACrC,MAAO,2CAEDA,EAAK1B,2BA7JsB0S,CAA8BhR,KAE7D6P,EAuGJ,SACI3B,EAAoBoB,EACpBpC,GACF,OAAQgB,EAASjZ,QACf,KAAK,EACH,OAAOmb,KACT,KAAK,EACH,OAmON,SACIlgB,EAAiB6P,EACjBmN,GACF,GAAoB,IAAhBnN,EAAS,GACX,OAAImN,EACK,0GAMF,oEAEuBnN,EAAS,wBAIzC,GAAoB,IAAhBA,EAAS,GACX,OAAImN,EACK,0GAMF,oEAEuBnN,EAAS,wBAIzC,GAAImN,EACF,MAAO,oNAQT,MAAO,gHAG2BnN,EAAS,OAAOA,EAAS,oCACjCA,EAAS,8BA/QxBkR,CACH/C,EAAsBoB,EAAapC,GACzC,KAAK,EACH,OA6iBN,SACIhd,EAAyB6P,EACzBmN,GACF,GAAI9c,OAAKqL,YAAYvL,EAAO6P,GAC1B,OAAImN,EACK,8HAMF,8EAE+BnN,EAAS,OAAOA,EAAS,uBAIjE,GAAiB,IAAb7P,EAAM,GACR,OAAIgd,EACK,wQASF,wHAG2BnN,EAAS,OAAOA,EAAS,2CAC5BA,EAAS,mEAK1C,GAAiB,IAAb7P,EAAM,GACR,OAAIgd,EACK,wQASF,wHAG2BnN,EAAS,OAAOA,EAAS,2CAC5BA,EAAS,mEAK1C,GAAImN,EACF,MAAO,kUAWT,MAAO,kHAG2BnN,EAAS,OAAOA,EAAS,yCAC5BA,EAAS,2CAClB7P,EAAM,kCACFA,EAAM,4CAxnBrBghB,CACHhD,EAA8BoB,EAAapC,GACjD,KAAK,EACH,OA4TN,SACIhd,EAAiC6P,EACjCmN,GACF,GAAIA,EAAqB,CAKvB,MAAO,8MAHHiE,GACI,CAAC,IAAK,IAAK,KAAMjhB,wCAY3B,MAAMkhB,EACFlR,GAA+C,CAAC,IAAK,IAAK,KAAMhQ,GAEpE,MAAO,kHAG2B6P,EAAS,OAAOA,EAAS,yCAC5BA,EAAS,2BAClCqR,6CAtVKC,CACHnD,EAAsCoB,EACtCpC,GACN,KAAK,EACH,OA2ZN,SACIhd,EAAyC6P,EACzCmN,GACF,GAAIA,EAAqB,CAKvB,MAAO,mMAHHiE,GACI,CAAC,IAAK,IAAK,IAAK,MAAOjhB,kDAYjC,MAAMkhB,EAAyBlR,GAC3B,CAAC,IAAK,IAAK,IAAK,MAAOhQ,GAE3B,MAAO,6FAGM6P,EAAS,OAAOA,EAAS,yCACPA,EAAS,2BAClCqR,iDArbKE,CACHpD,EAA8CoB,EAC9CpC,GACN,KAAK,EACH,OAubN,SACIhd,EACA6P,GACF,MAAMqR,EAAyBlR,GAC3B,CAAC,IAAK,IAAK,IAAK,KAAM,MAAOhQ,GAEjC,MAAO,oFAEyC6P,EAAS,qCAC5BA,EAAS,2CAEPA,EAAS,6BAElCqR,yFApcKG,CACHrD,EAAsDoB,GAC5D,KAAK,EACH,OAycN,SACIpf,EACA6P,GACF,MAAMqR,EAAyBlR,GAC3B,CAAC,IAAK,IAAK,IAAK,KAAM,KAAM,MAAOhQ,GAEvC,MAAO,6FAGM6P,EAAS,OAAOA,EAAS,yCACPA,EAAS,6BAElCqR,yFArdKI,CACHtD,EACAoB,GACN,QACE,MAAM,IAAIrhB,MACN,GAAGigB,EAASjZ,kDApIMwc,CACpB7R,EAAYmN,aAAcuC,EAAarZ,EAAQiX,qBACnD4C,EA8IJ,SAAoC9P,GAClC,MAAO,4CAEDA,EAAK1B,0CAjJsBoT,CAA2B1R,IAGxD/J,EAAQoX,eACV0C,GAAgB4B,IAQlB,MALe,CACb5B,EAAcJ,EAA2BG,EACzCrC,EAAoBoC,EAAuBnC,EAC3CzX,EAAQgK,UACRpK,KAAK,MAIT,SAASmY,GACLL,EAAmBT,GAAsB,GAC3C,MAAMhd,EAAQyd,EAAOb,UAAUC,aAC/B,OAAQ7c,EAAM+E,QACZ,KAAK,EACH,OAwuBN,SACIkZ,EAAsBjB,GACxB,MAAMkB,EAAUD,EAAUlB,KACpBuB,EAAW,MAAQJ,EAAQE,OAAO,GAAGC,cAAgBH,EAAQ1Y,MAAM,GACzE,GAAIyY,EAAUrB,UAAUE,UACtB,MAAO,SAASwB,eAAsBJ,MAExC,MAAOwD,EAASC,GAAW1D,EAAUrB,UAAU/M,SAC/C,GAAgB,IAAZ6R,GAA6B,IAAZC,EACnB,MAAO,iBACGrD,uCACiBJ,6BAK7B,MAAM0D,EAASC,GAAyB3D,GACxC,GAAIlB,EACF,MAAO,eACCsB,qCACiBJ,iBAAuBA,iBAC5C0D,mCACqB1D,qBAK3B,MAAO4D,EAAOC,GAAS9D,EAAUrB,UAAU/M,SAC3C,MAAO,eACGyO,qCACiBwD,MAAUC,MAAUH,mCACpB1D,qBAvwBhB8D,CAAiBvE,EAAQT,GAClC,KAAK,EACH,OAsyBN,SACIiB,EAAsBjB,GACxB,MAAMkB,EAAUD,EAAUlB,KACpBuB,EAAW,MAAQJ,EAAQE,OAAO,GAAGC,cAAgBH,EAAQ1Y,MAAM,GAEzE,GAAIyY,EAAUrB,UAAUE,UAEtB,MAAO,iBACGwB,2BACJ2D,GAAkBhE,oBAK1B,MAAMpO,EAAWoO,EAAUrB,UAAU/M,SAC/BiS,EAAQjS,EAAS,GACjBkS,EAAQlS,EAAS,GAEvB,GAAc,IAAVkS,GAAyB,IAAVD,EACjB,MAAO,iBACGxD,gDACiBJ,6BAI7B,MAAM0D,EAASC,GAAyB3D,GACxC,GAAc,IAAV6D,EACF,OAAI/E,EACK,iBACCsB,8DAC+BsD,qBACnC1D,iDACqBA,yBAKpB,iBACGI,8DAC+BsD,eAAoBE,uCAClC5D,yBAI7B,GAAc,IAAV4D,EACF,OAAI9E,EACK,iBACCsB,yDAC0BsD,qBAC9B1D,sDACqBA,yBAKpB,iBACGI,yDAC0BsD,eAAoBG,4CAC7B7D,yBAK7B,GAAIlB,EACF,MAAO,eACCsB,8CACiBJ,iBACrBA,yBAA+B0D,mCACV1D,qBAK3B,MAAO,eACGI,8CACiBwD,MAAUC,cAAkBH,mCAC5B1D,qBAl3BhBgE,CAAazE,EAAQT,GAC9B,KAAK,EACH,OA26BN,SACIiB,EAAsBjB,GACxB,MAAMhd,EAAQie,EAAUrB,UAAUC,aAC5BqB,EAAUD,EAAUlB,KACpBuB,EAAW,MAAQJ,EAAQE,OAAO,GAAGC,cAAgBH,EAAQ1Y,MAAM,GACnEqK,EAAWoO,EAAUrB,UAAU/M,SAErC,GAAgB,MAAZA,GAAoB3P,OAAKqL,YAAYvL,EAAO6P,GAAW,CACzD,GAAImN,EACF,MAAO,iBACCsB,6EACuCJ,iBAC3CA,gDACqBA,yBAK3B,MAAMwD,EAAU7R,EAAS,GAEzB,MAAO,eACCyO,2EAFQzO,EAAS,SAGoC6R,qCACpCxD,qBAK3B,MAAMnT,SAACA,EAAQoX,SAAEA,GAAYjiB,OAAK4K,aAAa9K,GACzCoiB,EAAgBrX,EACtB,GAAIqX,EAAcrd,OAAS/E,EAAM+E,OAAQ,CACvC,MACMsd,EAAS,CAAC,MAAO,OACvB,MAAO,WACHvE,GAHiBwE,GAAiBrE,EAAWmE,GAGVpF,mBAC7BsB,yCACGA,KAAYiE,GAAkBF,EAAQF,sBAKrD,GAAIlE,EAAUrB,UAAUE,UAEtB,MAAO,iBACGwB,6EACuCte,EAAM,sBACjDiiB,GAAkBhE,oBAK1B,MAAMyD,EAAU7R,EAAS,GACnB8R,EAAU9R,EAAS,GACnB+R,EAASC,GAAyB3D,GACxC,GAAgB,IAAZyD,EAEF,OAAI3E,EACK,iBACCsB,mEAC6BsD,YACjC1D,yEAC0CA,iDACrBA,yBAIpB,eACCI,iEAC6BsD,YAAiB5hB,EAAM,0DACpB0hB,qCACfxD,qBAI3B,GAAgB,IAAZwD,EAEF,OAAI1E,EACK,iBACCsB,mEAC6BsD,YACjC1D,oEACqCA,sDAChBA,yBAIpB,eACCI,iEAC6BsD,YAAiB5hB,EAAM,qDACzB2hB,0CACVzD,qBAK3B,GAAIlB,EACF,MAAO,iBACGsB,iIAEcJ,qBAA2B0D,oCACxB1D,iBACvBA,uDACuBA,yBAI7B,MAAO,aACCI,yHAEcte,EAAM,cAAc4hB,gCACjBF,MAAYC,wCACZzD,iBA1hCdsE,CAAa/E,EAAQT,GAC9B,KAAK,EACH,OAklCN,SACIiB,EAAsBjB,GACxB,MAAMhd,EAAQie,EAAUrB,UAAUC,aAC5BqB,EAAUD,EAAUlB,KACpBuB,EAAW,MAAQJ,EAAQE,OAAO,GAAGC,cAAgBH,EAAQ1Y,MAAM,GACnEid,EAAUziB,EAAM,GAAKA,EAAM,GAC3B0iB,EAAU1iB,EAAM,IAEhB+K,SAACA,EAAQoX,SAAEA,GAAYjiB,OAAK4K,aAAa9K,GACzCoiB,EAAgBrX,EACtB,GAAIqX,EAAcrd,OAAS/E,EAAM+E,OAAQ,CACvC,MACMsd,EAAS,CAAC,MAAO,MAAO,SAC9B,MAAO,aACDvE,GAHewE,GAAiBrE,EAAWmE,GAGRpF,qBAC7BsB,sDACGA,KAAYiE,GAAkBF,EAAQF,0BAKvD,GAAIlE,EAAUrB,UAAUE,UAEtB,MAAO,iBACGwB,0HAEmBmE,MAAYC,qBACnCT,GAAkBhE,oBAK1B,MAAMpO,EAAWoO,EAAUrB,UAAU/M,SAC/B6R,EAAU7R,EAAS,GACnB8R,EAAU9R,EAAS,GACnByP,EAAarB,EAAUrB,UAAU0C,WACvC,GAAIqC,IAAYc,GAAyB,MAAdnD,EAEzB,OAAItC,EACK,iBACCsB,2DACUJ,yLAIEA,iBAAuBA,gDAClBA,yBAIpB,mBACKI,2HAEoCoE,yFAExBf,QAAcD,yCACTxD,6BAK/B,GAAIyD,IAAYe,GAAyB,MAAdpD,EAEzB,OAAItC,EACK,iBACCsB,mFACkCJ,6GAEOA,iBAC7CA,gDACqBA,yBAIpB,eACCI,iFACkCte,EAAM,kGAEC2hB,QAAcD,qCACtCxD,qBAK3B,MAAM0D,EAASC,GAAyB3D,GACxC,GAAIlB,EACF,MAAO,eACCsB,oIAEUJ,eAAqBA,mCACrBA,uCACIuE,aAAmBC,eAAqBd,kCACrC1D,iBAAuBA,qDACvBA,uBAI3B,MAAO,iBACKI,4IAEcmE,aAAmBC,eAAqBd,oCACrCF,MAAYC,4CACZzD,uBAxrClByE,CAAalF,EAAQT,GAC9B,KAAK,EACH,OA+uCN,SACIiB,EAAsBjB,GACxB,MAAMhd,EAAQie,EAAUrB,UAAUC,aAC5BqB,EAAUD,EAAUlB,KACpBuB,EAAW,MAAQJ,EAAQE,OAAO,GAAGC,cAAgBH,EAAQ1Y,MAAM,GACnEod,EAAU5iB,EAAM,GAChB0iB,EAAU1iB,EAAM,GAAK4iB,EACrBH,EAAUziB,EAAM,GAAK0iB,GAErB3X,SAACA,EAAQoX,SAAEA,GAAYjiB,OAAK4K,aAAa9K,GAC/C,GAAI+K,EAAShG,OAAS/E,EAAM+E,OAAQ,CAClC,MACMsd,EAAS,CAAC,MAAO,MAAO,QAAS,UACvC,MAAO,WACHvE,GAHiBwE,GAAiBrE,EAAWlT,GAGViS,mBAC7BsB,gEACGA,KAAYiE,GAAkBF,EAAQF,sBAKrD,GAAIlE,EAAUrB,UAAUE,UAEtB,MAAO,iBACGwB,8IAEmBmE,MAAYC,MAAYE,qBAC/CX,GAAkBhE,oBAK1B,MAAMqB,EAAarB,EAAUrB,UAAU0C,WACjCzP,EAAWoO,EAAUrB,UAAU/M,SAC/B6R,EAAU7R,EAAS,GACnB8R,EAAU9R,EAAS,GAEnBgT,EAAa,iBAAiB3E,aAC9B4E,EAAa,iBAAiB5E,uBAC9B6E,EAAa,iBAAiB7E,uBACpC,GAAIyD,IAAYc,GAAyB,MAAdnD,EAEzB,OAAItC,EACK,iBACCsB,yDACJuE,cACAC,+NAMgB5E,iBAAuBA,gDAClBA,yBAIpB,iBACGI,yKAISoE,MAAYE,qFAETjB,QAAcD,uCACTxD,yBAI7B,GAAIyD,IAAYiB,GAAyB,MAAdtD,EAEzB,OAAItC,EACK,iBACCsB,gIAEkBJ,eAAqBA,cAC3CA,iIAGeA,iBAAuBA,gDACjBA,yBAIpB,iBACGI,gIAEkBte,EAAM,GAAKA,EAAM,OAAOA,EAAM,0HAGrC2hB,QAAcD,uCACRxD,yBAK7B,MAAM0D,EAASC,GAAyB3D,GACxC,GAAIlB,EACF,MAAO,eACCsB,kIAEJuE,YACAC,YACAC,yHAGqB7E,iBACrBA,yBAA+B0D,mCACV1D,qBAI3B,MAAO,eACGI,oJAEcmE,aAAmBC,0BACzBE,2CACSlB,MAAYC,cAAoBC,mCAChC1D,qBAr2ChB8E,CAAavF,EAAQT,GAC9B,KAAK,EACH,OAw2CN,SAAsBiB,GACpB,MAAMje,EAAQie,EAAUrB,UAAUC,aAC5BqB,EAAUD,EAAUlB,KACpBuB,EAAW,MAAQJ,EAAQE,OAAO,GAAGC,cAAgBH,EAAQ1Y,MAAM,GACnEyd,EAAUjjB,EAAM,GAChB4iB,EAAU5iB,EAAM,GAAKijB,EACrBP,EAAU1iB,EAAM,GAAK4iB,EACrBH,EAAUziB,EAAM,GAAK0iB,GAErB3X,SAACA,EAAQoX,SAAEA,GAAYjiB,OAAK4K,aAAa9K,GAC/C,GAAI+K,EAAShG,OAAS/E,EAAM+E,OAAQ,CAClC,MACMsd,EAAS,CAAC,MAAO,MAAO,QAAS,SAAU,UACjD,MAAO,WACHvE,GAHiBwE,GAAiBrE,EAAWlT,oBAIvCuT,4EACGA,KAAYiE,GAAkBF,EAAQF,sBAKrD,GAAIlE,EAAUrB,UAAUE,UAEtB,MAAO,iBACGwB,kJAGGmE,MAAYC,MAAYE,MAAYK,qCAE3ChB,GAAkBhE,oBAK1B,MAAMqB,EAAarB,EAAUrB,UAAU0C,WACjCzP,EAAWoO,EAAUrB,UAAU/M,SAC/B6R,EAAU7R,EAAS,GACnB8R,EAAU9R,EAAS,GAEzB,GAAI8R,IAAYc,GAAyB,MAAdnD,EAEzB,MAAO,iBACGhB,gLAGkBoE,MAAYE,MAAYK,qFAE9BtB,QAAcD,uCACTxD,yBAK7B,GAAIyD,IAAYsB,GAAyB,MAAd3D,EAEzB,MAAO,iBACGhB,iJAGGte,EAAM,GAAKA,EAAM,GAAKA,EAAM,uBAC5BA,EAAM,GAAKA,EAAM,OAAOA,EAAM,iHAGtB2hB,QAAcD,uCACRxD,yBAK7B,MAAM0D,EAASC,GAAyB3D,GACxC,MAAO,eACGI,gKAEcmE,aAAmBC,eAAqBE,2BAC7CK,gBAAsBrB,kCACdF,MAAYC,0CACZzD,qBAp7ChBgF,CAAazF,GACtB,KAAK,EACH,OAu7CN,SAAsBQ,GACpB,MAAMje,EAAQie,EAAUrB,UAAUC,aAC5BqB,EAAUD,EAAUlB,KACpBuB,EAAW,MAAQJ,EAAQE,OAAO,GAAGC,cAAgBH,EAAQ1Y,MAAM,IAEnEuF,SAACA,EAAQoX,SAAEA,GAAYjiB,OAAK4K,aAAa9K,GAC/C,GAAI+K,EAAShG,OAAS/E,EAAM+E,OAAQ,CAClC,MACMsd,EAAS,CAAC,MAAO,MAAO,QAAS,SAAU,SAAU,UAC3D,MAAO,WACHvE,GAHiBwE,GAAiBrE,EAAWlT,oBAIvCuT,6GAEGA,KAAYiE,GAAkBF,EAAQF,sBAKrD,MAAMgB,EAAUnjB,EAAM,GAChBijB,EAAUjjB,EAAM,GAAKmjB,EACrBP,EAAU5iB,EAAM,GAAKijB,EACrBP,EAAU1iB,EAAM,GAAK4iB,EACrBH,EAAUziB,EAAM,GAAK0iB,EAE3B,GAAIzE,EAAUrB,UAAUE,UAEtB,MAAO,iBACGwB,qLAIGmE,MAAYC,MAAYE,MAAYK,8EAGlCE,qBACTlB,GAAkBhE,oBAK1B,MAAMqB,EAAarB,EAAUrB,UAAU0C,WACjCzP,EAAWoO,EAAUrB,UAAU/M,SAC/B6R,EAAU7R,EAAS,GACnB8R,EAAU9R,EAAS,GACzB,GAAI8R,IAAYc,GAAyB,MAAdnD,EAEzB,MAAO,iBACGhB,kMAIGoE,MAAYE,MAAYK,MAAYE,kHAG3BxB,QAAcD,uCACTxD,yBAI7B,GAAIyD,IAAYwB,GAAyB,MAAd7D,EAEzB,MAAO,iBACGhB,sKAGGte,EAAM,GAAKA,EAAM,GAAKA,EAAM,GAAKA,EAAM,uBACvCA,EAAM,GAAKA,EAAM,GAAKA,EAAM,uBAC5BA,EAAM,GAAKA,EAAM,uBACjBA,EAAM,8HAGE2hB,QAAcD,uCACRxD,yBAI7B,MAAM0D,EAASC,GAAyB3D,GACxC,MAAO,eACGI,+LAGcmE,aAAmBC,eAAqBE,2BAC7CK,gBAAsBE,gBAAsBvB,kCACpCF,MAAYC,0CACZzD,qBA3gDhBkF,CAAa3F,GACtB,QACE,MAAM,IAAI1f,MACN,GAAGiC,EAAM+E,iDAKnB,SAAS8Y,GACLJ,EAAmBT,GAErB,OADcS,EAAOb,UAAUC,aACjB9X,QACZ,KAAK,EACH,OAosBN,SAAgCkZ,GAC9B,MAAMC,EAAUD,EAAUlB,KACpBuB,EAAW,MAAQJ,EAAQE,OAAO,GAAGC,cAAgBH,EAAQ1Y,MAAM,GACnEsK,EAAO/B,KACb,MAAO,cACEuQ,uBACIxO,EAAK3B,aAAa+P,yBA1sBpBmF,CAAuB5F,GAChC,KAAK,EACH,OAivBN,SACIQ,EAAsBjB,GACxB,MAAMkB,EAAUD,EAAUlB,KACpBuB,EAAW,MAAQJ,EAAQE,OAAO,GAAGC,cAAgBH,EAAQ1Y,MAAM,GACnEqK,EAAWoO,EAAUrB,UAAU/M,SAC/BC,EAAO/B,KACb,GAAIiP,EACF,MAAO,cACAsB,iEAEHJ,oCAA0CA,gIAGnCpO,EAAK3B,aAAa+P,qBAI/B,MAAMiC,EACF,CAAC9f,KAAKC,KAAKuP,EAAS,GAAK,GAAIxP,KAAKC,KAAKuP,EAAS,GAAK,IACzD,MAAO,cACEyO,4DAED6B,EAAe,OAAOA,EAAe,6BAChCrQ,EAAK3B,aAAa+P,qBAxwBpBoF,CAAmB7F,EAAQT,GACpC,KAAK,EACH,OA41BN,SACIiB,EAAsBjB,GACxB,MAAMhd,EAAQie,EAAUrB,UAAUC,aAC5BqB,EAAUD,EAAUlB,KACpBuB,EAAW,MAAQJ,EAAQE,OAAO,GAAGC,cAAgBH,EAAQ1Y,MAAM,GACnEqK,EAAWoO,EAAUrB,UAAU/M,SAE/B6R,EAAU7R,EAAS,GACnB8R,EAAU9R,EAAS,GACnBC,EAAO/B,KACb,GAAgB,MAAZ8B,GAAoB3P,OAAKqL,YAAYvL,EAAO6P,GAC9C,OAAImN,EACK,gBACAsB,6EACwCJ,iBAC3CA,oCAEOpO,EAAK3B,aAAa+P,yBAIxB,gBACEI,6EACwCqD,QAAcD,2BAElD5R,EAAK3B,aAAa+P,yBAKjC,GAAIlB,EACF,MAAO,cACAsB,wEAEHJ,oCAA0CA,mEACRA,oIAE3BpO,EAAK3B,aAAa+P,qBAI/B,MAAMiC,EACF,CAAC9f,KAAKC,KAAKuP,EAAS,GAAK,GAAIxP,KAAKC,KAAKuP,EAAS,GAAK,IACnD0T,EAAeljB,KAAKC,KAAKN,EAAM,GAAK,GAE1C,MAAO,cACEse,yDACsBiF,MAAiBpD,EAAe,OAC3DA,EAAe,gCACNrQ,EAAK3B,aAAa+P,qBA74BpBsF,CAAmB/F,EAAQT,GACpC,KAAK,EACH,OAogCN,SACIiB,EAAsBjB,GACxB,MAAMhd,EAAQie,EAAUrB,UAAUC,aAC5BqB,EAAUD,EAAUlB,KACpBuB,EAAW,MAAQJ,EAAQE,OAAO,GAAGC,cAAgBH,EAAQ1Y,MAAM,GACnEqK,EAAWoO,EAAUrB,UAAU/M,SAC/BsQ,EACF,CAAC9f,KAAKC,KAAKuP,EAAS,GAAK,GAAIxP,KAAKC,KAAKuP,EAAS,GAAK,IAEzD,GAAiB,IAAb7P,EAAM,GAAU,CAClB,MACMmiB,EAAW,CAAC,EAAG,GAEfE,EAAS,CAAC,IAAK,MAAO,OAC5B,MAAO,aACDxE,GAHeyE,GAAiBrE,EAFhBje,EAAMwF,MAAM,IAKawX,oBACpCsB,kDACIA,KAAYiE,GAAkBF,EAAQF,0BAKvD,MAAMrS,EAAO/B,KACb,GAAIiP,EACF,MAAO,cACAsB,+EAEHJ,oCAA0CA,mEACRA,gFAElCA,gKAGOpO,EAAK3B,aAAa+P,qBAK/B,MAAMwD,EAAUvB,EAAe,GACzBwB,EAAUxB,EAAe,GAEzBoD,EAAeljB,KAAKC,KAAKN,EAAM,GAAK,GACpCugB,EAAgBgD,EAAeljB,KAAKC,KAAKN,EAAM,GAAK,GAE1D,MAAO,cACEse,0EAEDoD,MAAYC,MAAYpB,MAAkBgD,kCACrCzT,EAAK3B,aAAa+P,qBApjCpBuF,CAAmBhG,EAAQT,GACpC,QACE,OAkqCN,SACIiB,EAAsBjB,GACxB,MAAMkB,EAAUD,EAAUlB,KACpBuB,EAAW,MAAQJ,EAAQE,OAAO,GAAGC,cAAgBH,EAAQ1Y,MAAM,GACnEsK,EAAO/B,KACb,GAAIiP,EAEF,MAAO,cACAsB,iFAC+BJ,gFAElCA,4HAEiBA,wGAGjBA,oCAA0CA,6NAI1CpO,EAAK3B,aAAa+P,qBAIxB,MAAMle,EAAQie,EAAUrB,UAAUC,aAC5B6G,EAAO1jB,EAAM+E,OACb8K,EAAWoO,EAAUrB,UAAU/M,SAC/BsQ,EACF,CAAC9f,KAAKC,KAAKuP,EAAS,GAAK,GAAIxP,KAAKC,KAAKuP,EAAS,GAAK,IACnD6R,EAAUvB,EAAe,GACzBwB,EAAUxB,EAAe,GAEzBoD,EAAeljB,KAAKC,KAAKN,EAAM0jB,EAAO,GAAK,GACjD,IAAInD,EAAgBgD,EAAeljB,KAAKC,KAAKN,EAAM0jB,EAAO,GAAK,GAC3DrB,EAAS,0BACT1T,EAAQ,OAAO4R,mBAA+BgD,gBAClD,IAAK,IAAI5C,EAAI,EAAGA,EAAI+C,EAAO,EAAG/C,IAC5B0B,EAAS,QAAQ1B,MAAQ0B,EACzB9B,GAAiBvgB,EAAM0jB,EAAO/C,EAAI,GAClChS,EAAQ,IAAIgS,OAAOJ,OAAqB5R,EAE1C,MAAO,cACE2P,KAAY+D,2BACH1T,gCACOgT,uCACOA,0DACmBA,MAAYD,qBAClD5R,EAAK3B,aAAa+P,qBAjtCpByF,CAAmBlG,EAAQT,IAyKxC,MAAM8C,GAAoB,kbAcpBC,GAAoB,qTAUpBC,GAAoB,2VAWpByB,GAAuB,sWAa7B,SAASvB,KACP,MAAO,4DA8dT,SAAS2B,GAAyB3D,GAChC,MAAO,SAASA,IAk0BlB,SAAS+D,GAAkBhE,GACzB,MAAMC,EAAUD,EAAUlB,KACpB6G,EAAS1jB,OAAKC,cAAc8d,EAAUrB,UAAUC,cAEtD,OAAI+G,EAAS,EACJ,UAAU1F,KAGZ,6BACiB0F,sDAET1F,qCA0IDQ,GAAkBgF,GAChC,GAAIA,GAAQ,EACV,MAAO,MACF,GAAa,IAATA,EACT,MAAO,QACF,GAAa,IAATA,EACT,MAAO,QACF,GAAa,IAATA,EACT,MAAO,QACF,GAAa,IAATA,EACT,MAAO,QACF,GAAa,IAATA,EACT,MAAO,QAEP,MAAM3lB,MAAM,gBAAgB2lB,mCAIhBxG,GACZzS,EAAmBzK,EAAiB6P,GACtC,MAAM9E,SAACA,GAAY7K,OAAK4K,aAAa9K,GAC/B0jB,EAAO1jB,EAAM+E,OACb8e,EAAwBpZ,GAAqB,IAATiZ,GAA2B,IAAb1jB,EAAM,GACxD8K,EAAe+Y,EAAwB7jB,EAAMwF,MAAM,GAAKuF,EACxD+Y,GACArZ,GAAYiZ,EAAO,IAAMxjB,OAAKqL,YAAYvL,EAAO6P,IAClD9E,EAAShG,OAAS2e,GACnBG,EAEJ,MAAO,CAACC,gBAAAA,EAAiB7G,aADJ6G,EAAkBhZ,EAAe9K,YAKxCsiB,GACZ7E,EAAmB2E,GAErB,MAAM2B,EAA0BC,KAAKC,MAAMD,KAAKE,UAAUzG,IAE1D,OADAsG,EAAanH,UAAUC,aAAeuF,EAC/B2B,EAGT,SAASxB,GAAkBF,EAAkBF,GAC3C,OAAOA,EAASjd,KAAIyF,GAAK0X,EAAO1X,KAAIhF,KAAK,MCptD3C,SAASwe,GACLC,EAAyBC,GAC3B,GAAID,EAAWrf,SAAWsf,EAAOtf,OAC/B,MAAMhH,MACF,4BAA4BqmB,EAAWrf,wCAClBsf,EAAOtf,iBAGlCqf,EAAW5W,SAAQ,CAACuR,EAAGzZ,KACrB,MAAMgf,EAASvF,EAAElC,aACX0H,EAAQF,EAAO/e,GACfkf,EAASD,EAAMvkB,MAErB,IAAKE,OAAKqL,YAAY+Y,EAAQE,GAC5B,MAAMzmB,MAEF,2EAA4BumB,SAAcE,gBAGhD,GAAIzF,EAAEjC,WAAayH,EAAMzH,UACvB,OAGF,MAAM2H,EAAY1F,EAAElP,SACd6U,EAAYH,EAAMzH,UAAY,KAAOyH,EAAMI,QAAQ9U,SACzD,IAAK3P,OAAKqL,YAAYkZ,EAAWC,GAC/B,MAAM3mB,MAEF,kFAAwB0mB,SAAiBC,4BA2OnCE,GAAiBlB,GAE/B,OAAOniB,QAAMc,QAAQ,8BAAgCqhB,GAAQ,EC1ZxD,SAASmB,GAA6BC,GACzC,MAAO,CAACC,EAAQC,EAAQC,EAAOC,EAAOvX,KAClC,MAAM5C,EAAWyR,eAAa2I,2BAA2BJ,EAAQC,GAC3DI,EAAara,EAAShG,OACtBsgB,EAAgBnlB,OAAK2O,eAAe9D,GACpCua,EAAaplB,OAAKC,cAAc4K,GAChCmM,EAAShX,OAAKqlB,uBAAuB5X,EAAO2X,GAC5CE,EAAQT,EAAOhgB,OACf0gB,EAAQT,EAAOjgB,OACf2gB,EAAWxlB,OAAK2O,eAAekW,GAC/BY,EAAWzlB,OAAK2O,eAAemW,GAC/BY,EAAiBpJ,eAAaD,iBAAiBwI,EAAQha,GACvD8a,EAAiBrJ,eAAaD,iBAAiByI,EAAQja,GAC7D,GAAI6a,EAAe7gB,OAAS8gB,EAAe9gB,SAAW,EAClD,IAAK,IAAIO,EAAI,EAAGA,EAAI4R,EAAOnS,SAAUO,EACjC4R,EAAO5R,GAAKwf,EAAGG,EAAM3f,EAAI2f,EAAMlgB,QAASmgB,EAAM5f,EAAI4f,EAAMngB,cAI5D,IAAK,IAAIO,EAAI,EAAGA,EAAI4R,EAAOnS,SAAUO,EAAG,CACpC,MAAMoC,EAAMxH,OAAK4lB,WAAWxgB,EAAG8f,EAAYC,GACrCU,EAAOre,EAAIlC,OAAOggB,GACxBI,EAAepY,SAAQ7C,GAAKob,EAAKpb,GAAK,IACtC,MAAMqb,EAAS9lB,OAAK+lB,WAAWF,EAAMP,EAAOE,GACtCQ,EAAOxe,EAAIlC,OAAOigB,GACxBI,EAAerY,SAAQ7C,GAAKub,EAAKvb,GAAK,IACtC,MAAMwb,EAASjmB,OAAK+lB,WAAWC,EAAMT,EAAOE,GAC5CzO,EAAO5R,GAAKwf,EAAGG,EAAMe,GAASd,EAAMiB,IAG5C,MAAO,CAACjP,EAAQnM,IC/BjB,MAAMqb,GAAUvB,KAA+BwB,EAAG1F,IAAM0F,EAAI1F,ICC5D,SAAS2F,GAAsBxB,GAClC,MAAO,CAACyB,EAAQ5Y,EAAO6Y,KACnB,MAAMC,EAAYvmB,OAAKqlB,uBAAuB5X,EAAO4Y,EAAOxhB,QAC5D,IAAK,IAAIO,EAAI,EAAGA,EAAIihB,EAAOxhB,SAAUO,EACjCmhB,EAAUnhB,GAAKwf,EAAGyB,EAAOjhB,GAAIkhB,GAEjC,OAAOC,GCPR,MAAMC,GAAWJ,IAAuBK,GAAOtmB,KAAKC,KAAKqmB,KCAzD,MAAMC,GAAY/B,IAA6B,CAACwB,EAAG1F,IAAO0F,IAAM1F,EAAK,EAAI,ICAnEkG,GAAUP,IAAuBK,GAAOtmB,KAAKymB,IAAIH,KCAjDI,GAAYT,IAAuBK,GAAOtmB,KAAK2mB,MAAML,KCArDM,GAAYX,IAAuBK,GAAOtmB,KAAK6mB,MAAMP,KCA3D,MAAMQ,GAActC,IAA6B,CAACwB,EAAG1F,IAAO0F,EAAI1F,EAAK,EAAI,ICAnEyG,GAAmBvC,IAA6B,CAACwB,EAAG1F,IAAO0F,GAAK1F,EAAK,EAAI,ICAzE0G,GAAWxC,IAA6B,CAACwB,EAAG1F,IAAO0F,EAAI1F,EAAK,EAAI,ICAhE2G,GAAgBzC,IAA6B,CAACwB,EAAG1F,IAAO0F,GAAK1F,EAAK,EAAI,ICA5E,MAAM4G,GAAUjB,IAAuBK,GAAOtmB,KAAK1B,IAAIgoB,KCAvD,MAAMa,GAAc3C,KAA+B4C,EAAQC,IAAWrnB,KAAKI,IAAIgnB,EAAQC,KCAjFC,GAAc9C,KAA+B4C,EAAQC,IAAWrnB,KAAK2L,IAAIyb,EAAQC,KCAjFE,GAAe/C,KAA+B4C,EAAQC,IAAWD,EAASC,ICAhF,MAAMG,GAAehD,KAA+BwB,EAAG1F,IAAO0F,IAAM1F,EAAK,EAAI,ICA7E,MAAMmH,GAAYxB,IAAuBK,GAAO,EAAItmB,KAAK0nB,KAAKpB,KCA9D,MAAMqB,GAAwBnD,KAA+BwB,EAAG1F,KACnE,MAAMsH,EAAO5B,EAAI1F,EACjB,OAAOsH,EAAOA,KCElB,MAAMC,GACFzY,YAAY0Y,EAAWC,EAAaC,EAASjjB,EAAUkjB,EAAUC,GAC7D5Y,KAAKwY,UAAYjoB,OAAKsoB,aAAaL,GACnCxY,KAAKyY,YAAcA,EACnBzY,KAAK0Y,QAAUnoB,OAAKsoB,aAAaH,GACjC1Y,KAAKvK,SAAWlF,OAAKsoB,aAAapjB,GAClCuK,KAAK2Y,SAAWA,EAChB3Y,KAAK8Y,cAAgBF,EAEzB9Y,YAAYiZ,GAIR,OAAOroB,KAAK2L,IAAI2D,KAAK2Y,SAAW,EAAII,EAAa,EAAI/Y,KAAK2Y,SAAUI,EAAa,GAErFjZ,aAAa1K,EAAQ2jB,GACjB,MAAMJ,EAAW3Y,KAAKgZ,YAAYD,GAClC,OAAOroB,KAAKI,IAAI,EAAKsE,EAAS,EAAIujB,EAAYI,EAAc,GAEhEjZ,aAAanJ,EAAMsiB,EAAYxa,EAAQya,EAAkBC,EAAWJ,GAChE,IAAK,IAAIK,EAAa,EAAGA,EAAaD,IAAaC,EAAY,CAC3D,MAAMT,EAAW3Y,KAAKgZ,YAAYD,GAC5BM,EAAc3oB,KAAKI,IAAI,EAAG6nB,EAAWS,GACrCE,EAAe5oB,KAAKI,IAAI,EAAG6nB,GAAYQ,GAAaC,EAAa,KACjEG,EAAYR,GAAcM,EAAcC,GACxCE,EAAiBP,GAAcI,EAAc,EAAI,EAAID,EAAaT,GAGxE,IAAIc,EAAY,EAEhBA,GAAaJ,EAAcrZ,KAAK0Y,QAAQtjB,OAExC,IAAK,IAAIoG,EAAI,EAAGA,EAAI+d,IAAa/d,EAC7Bie,GAAa9iB,EAAK6iB,EAAiBhe,GAAGpG,OAG1CqkB,GAAaH,EAAetZ,KAAKvK,SAASL,OAG1CqkB,IADsBJ,EAAcC,EAAeC,EAAY,GAClCvZ,KAAKwY,UAAUpjB,OAE5CqJ,EAAOya,EAAmBE,GAAc,IAAIxV,WAAW6V,GACvD,MAAMC,EAAQjb,EAAOya,EAAmBE,GACxC,IAAIO,EAAiB,EACrB,MAAMC,EAAiBC,GAAQA,EAAIhc,SAASic,GAAUJ,EAAMC,KAAoBG,IAChF,IAAK,IAAIte,EAAI,EAAGA,EAAI6d,IAAe7d,EAC/Boe,EAAc5Z,KAAK0Y,SACnBkB,EAAc5Z,KAAKwY,WAGvB,IAAK,IAAIhd,EAAI,EAAGA,EAAI+d,EAAY,IAAK/d,EACjCoe,EAAcjjB,EAAK6iB,EAAiBhe,IACpCoe,EAAc5Z,KAAKwY,WAIvB,GAAIe,EAAY,EAAG,CAIfK,EAAcjjB,EAAK6iB,EAAiBD,EAAY,IAChD,IAAK,IAAI/d,EAAI,EAAGA,EAAI8d,IAAgB9d,EAChCoe,EAAc5Z,KAAKwY,WACnBoB,EAAc5Z,KAAKvK,cAGtB,CAKD,IAAK,IAAI+F,EAAI,EAAGA,EAAI8d,EAAe,IAAK9d,EACpCoe,EAAc5Z,KAAKvK,UACnBmkB,EAAc5Z,KAAKwY,WAEvBoB,EAAc5Z,KAAKvK,YAO/BqK,QAAQnJ,EAAMojB,GAGV,MAAMC,EAAgBrjB,EAAKvB,OACrB6kB,EAAaF,EAAO3kB,OAC1B,GAAI6kB,EAAa,EAAG,CAChB,IAAIC,EAAYH,EAAO,GACvB,GAAkB,IAAdG,EACA,MAAM,IAAI9rB,MAAM,oCAAoC8rB,KAExD,IAAK,IAAIvkB,EAAI,EAAGA,EAAIskB,IAActkB,EAAG,CACjC,IAAIwkB,EAAcJ,EAAOpkB,IAAMukB,EAE/B,GADAC,EAAcA,GAAgBJ,EAAOpkB,IAAMqkB,GACtCG,EACD,MAAM,IAAI/rB,MAAM,uBAAuB2rB,EAAOpkB,mBAAmBukB,MAAcF,MAEnFE,EAAYH,EAAOpkB,GAEvB,GAAIukB,IAAcF,EACd,MAAM,IAAI5rB,MAAM,gDAAgD4rB,UAAsBE,KAG9F,MAAME,EAAgBH,EAAa,EAC7BI,EAAe9pB,OAAK+pB,kBAAkB,QAASL,GAErD,GAAsB,IAAlBD,GAAsC,IAAfC,EAAkB,CACzC,MAAMM,EAAQ,IAAI5c,MAAMqc,GACxB,IAAK,IAAIrkB,EAAI,EAAGA,GAAKykB,IAAiBzkB,EAClC0kB,EAAa1kB,GAAK,EAEtB,MAAO,CAAC4kB,EAAOF,GAEnBA,EAAa,GAAK,EAClB,IAAK,IAAI1kB,EAAI,EAAGA,GAAKykB,IAAiBzkB,EAAG,CACrC,MAAMP,EAAS2kB,EAAOpkB,GAAKokB,EAAOpkB,EAAI,GACtC,IAAIwjB,EAAY,EAChBnZ,KAAKyY,YAAY5a,SAASkb,IACtBI,GAAanZ,KAAKwa,aAAaplB,EAAQ2jB,MAEvC/Y,KAAK8Y,eAAiB1jB,EAAS,GAAmB,IAAd+jB,IACpCA,EAAY,GAEhBkB,EAAa1kB,GAAK0kB,EAAa1kB,EAAI,GAAKwjB,EAE5C,MAAMsB,EAAS,IAAI9c,MAAM0c,EAAaD,IACtC,IAAK,IAAIzkB,EAAI,EAAGA,EAAIykB,IAAiBzkB,EAAG,CACpC,MAAMsjB,EAAac,EAAOpkB,GAC1B,IAAI+kB,EAAiBL,EAAa1kB,GAYlC,GAXAqK,KAAKyY,YAAY5a,SAASkb,IACtB,MAAM3jB,EAAS2kB,EAAOpkB,EAAI,GAAKokB,EAAOpkB,GAChCwjB,EAAYnZ,KAAKwa,aAAaplB,EAAQ2jB,GAC5C/Y,KAAK2a,aAAahkB,EAAMsiB,EAAYwB,EAAQC,EAAgBvB,EAAWJ,GACvE2B,GAAkBvB,KAOlBnZ,KAAK8Y,eAAiB4B,IAAmBL,EAAa1kB,GAAI,CAC1D,MAAMilB,EAAab,EAAOpkB,EAAI,GAAKokB,EAAOpkB,GAG1C,GAAmB,IAAfilB,EACA,SAKJ,MAAM7B,EAAa6B,EAAa,EAAI5a,KAAK2Y,SACnCQ,EAAY,EAClBnZ,KAAK2a,aAAahkB,EAAMsiB,EAAYwB,EAAQC,EAAgBvB,EAAWJ,IAG/E,MAAO,CAAC0B,EAAQJ,IClKxB,SAASnlB,GAAM2kB,EAAKgB,EAAYC,GAC5B,IAAKjB,EAAIzkB,OACL,MAAO,GAGX,GAA0B,IAAtBylB,EAAWzlB,OAAc,CACzB,MAAMmS,EAAS,IAAI5J,MAAMkc,EAAIzkB,QAC7B,IAAK,IAAIO,EAAI,EAAGA,EAAIkkB,EAAIzkB,SAAUO,EAC9B4R,EAAO5R,GAAKkkB,EAAIkB,SAASplB,EAAGA,EAAI,GAEpC,OAAO4R,EAGX,GAA0B,IAAtBsT,EAAWzlB,OAAc,CACzB,MAAM4lB,EAAYH,EAAW,GACvBtT,EAAS,GACf,IAAI0T,EAAIpB,EAAItK,QAAQyL,GACpB,MAAc,IAAPC,GAAU,CACb,MAAMC,EAAQrB,EAAIkB,SAAS,EAAGE,GACzBH,GAA8B,IAAjBI,EAAM9lB,QACpBmS,EAAO+E,KAAK4O,GAGhBD,GADApB,EAAMA,EAAIkB,SAASE,EAAI,IACf1L,QAAQyL,GAKpB,OAHKF,GAA4B,IAAfjB,EAAIzkB,QAClBmS,EAAO+E,KAAKuN,GAETtS,EAIX,MAAMA,EAAS,GACf,IAAI4T,EAAa,EACjB,IAAK,IAAIxlB,EAAI,EAAGA,EAAIkkB,EAAIzkB,OAAS,EAAGO,IAChC,GAAKA,IAAMkkB,EAAIzkB,SAA4C,IAAhCylB,EAAWtL,QAAQsK,EAAIlkB,IAAa,CAC3D,MAAMulB,EAAQrB,EAAIkB,SAASI,EAAYxlB,GAClCmlB,GAA8B,IAAjBI,EAAM9lB,QACpBmS,EAAO+E,KAAK4O,GAEhBC,EAAaxlB,EAAI,EAGzB,OAAO4R,ECzCJ,MAAM6T,GAAUlG,KAA+B4C,EAAQC,IAAWD,EAASC,ICDlF,MAAMsD,GAAc,CAAC3E,EAAG1F,KACpB,MAAMsK,EAAYtK,EAAE8I,MAAQpD,EAAEoD,MAC9B,OAAqB,IAAdwB,EAAkB5E,EAAE1X,MAAQgS,EAAEhS,MAAQsc,GAajD,SAASC,GAAOC,EAAOC,EAAGC,EAAO,EAAGC,EAAQH,EAAMpmB,OAAS,GACvD,KAAOumB,EAAQD,GAAM,CAIjB,GAAIC,EAAQD,EAAO,IAAK,CACpB,MAAMlgB,EAAImgB,EAAQD,EAAO,EACnB/lB,EAAI8lB,EAAIC,EAAO,EACfE,EAAIlrB,KAAK1B,IAAIwM,GACb4T,EAAI,GAAM1e,KAAKymB,IAAI,EAAIyE,EAAI,GAC3BC,EAAK,GAAMnrB,KAAK0nB,KAAKwD,EAAIxM,GAAK5T,EAAI4T,GAAK5T,GAAK9K,KAAKorB,KAAKnmB,EAAI6F,EAAI,GAGpE+f,GAAOC,EAAOC,EAFE/qB,KAAKI,IAAI4qB,EAAMhrB,KAAK6mB,MAAMkE,EAAI9lB,EAAIyZ,EAAI5T,EAAIqgB,IACzCnrB,KAAK2L,IAAIsf,EAAOjrB,KAAK6mB,MAAMkE,GAAKjgB,EAAI7F,GAAKyZ,EAAI5T,EAAIqgB,KAItE,MAAM/d,EAAI0d,EAAMC,GAChB,IAAI9lB,EAAI+lB,EACJK,EAAIJ,EAKR,IAJAprB,OAAKyrB,KAAKR,EAAOE,EAAMD,GACnBJ,GAAYG,EAAMG,GAAQ7d,GAAK,GAC/BvN,OAAKyrB,KAAKR,EAAOE,EAAMC,GAEpBhmB,EAAIomB,GAAG,CAIV,IAHAxrB,OAAKyrB,KAAKR,EAAO7lB,EAAGomB,GACpBpmB,IACAomB,IACOV,GAAYG,EAAM7lB,GAAImI,GAAK,GAC9BnI,GAAQ,EAEZ,KAAO0lB,GAAYG,EAAMO,GAAIje,GAAK,GAC9Bie,GAAQ,EAGoB,IAAhCV,GAAYG,EAAME,GAAO5d,GACzBvN,OAAKyrB,KAAKR,EAAOE,EAAMK,IAGvBA,GAAQ,EACRxrB,OAAKyrB,KAAKR,EAAOO,EAAGJ,IAIpBI,GAAKN,IACLC,EAAOK,EAAI,GAEXN,GAAKM,IACLJ,EAAQI,EAAI,uDC9DjB,SAAuBE,GAC1B,MAAMC,EAAe,IAAI7a,aAAa4a,EAAK7mB,QAC3C,IAAK,IAAIO,EAAI,EAAGA,EAAIsmB,EAAK7mB,SAAUO,EAC/BumB,EAAavmB,GAAKjF,KAAKwC,IAAI+oB,EAAKtmB,IAEpC,OAAOumB,2BCNJ,SAAsBC,EAAOC,EAAaC,EAAcC,EAAchsB,GACzE,MAAMisB,EAAchsB,OAAKC,cAAc8rB,GACjCE,EAAUjsB,OAAKksB,oBAAoBnsB,EAAM+rB,GAC/C,IAAK,IAAI1mB,EAAI,EAAGA,EAAIwmB,EAAM/mB,OAAQO,IAAK,CACnC,MAAMmkB,EAAQqC,EAAMxmB,GACpB,GAAImkB,EAAQ,EACR,MAAM,IAAI1rB,MAAM,iCAEhB0rB,GAASxpB,IAITksB,EAAQ1C,IADRyC,EAAc,EACIH,EAAYzmB,GAGZ,GAG1B,OAAO6mB,sBAEJ,SAA4BE,EAAMC,EAAYrsB,EAAMssB,GAAe,GACtE,MAAM7S,EAAU2S,EAAKrsB,MAAM,GACrBwsB,EAAUH,EAAKrsB,MAAM,GACrBysB,EAASlmB,SAAO,CAACmT,EAASzZ,GAAOqsB,EAAW3e,OAClD,IAAK,IAAIrI,EAAI,EAAGA,EAAIoU,EAASpU,IACzB,IAAK,IAAIomB,EAAI,EAAGA,EAAIc,EAASd,IAAK,CAC9B,MAAMjC,EAAQ4C,EAAKld,IAAI7J,EAAGomB,GAC1B,GAAIjC,EAAQ,EACR,MAAM,IAAI1rB,MAAM,iCAEhB0rB,GAASxpB,IAGTssB,EACAE,EAAOjZ,IAAI,EAAGlO,EAAGmkB,GAGb6C,EAAWrsB,KAAO,EAClBwsB,EAAOjZ,IAAIiZ,EAAOtd,IAAI7J,EAAGmkB,GAAS6C,EAAWnd,IAAI7J,EAAGomB,GAAIpmB,EAAGmkB,GAG3DgD,EAAOjZ,IAAIiZ,EAAOtd,IAAI7J,EAAGmkB,GAAS,EAAGnkB,EAAGmkB,IAKxD,OAAOgD,0BC9CJ,SAAoBpI,EAAQrG,EAAUrQ,EAAO+e,GAChD,MAAMP,EAAUjsB,OAAK+pB,kBAAkBtc,EAAOzN,OAAKC,cAAc6d,IACjE,GAAI0O,GAA0B,WAAV/e,EAAoB,CAEpC,IAAIiU,EAAS,EACbyC,EAAO7W,SAAQ+W,IACX,MAAMtkB,EAAOC,OAAKC,cAAcokB,EAAMvkB,OACtCmsB,EAAQ3Y,IAAI+Q,EAAMqH,KAAMhK,GACxBA,GAAU3hB,SAGb,CACD,IAAI0sB,EAAY,EAChBtI,EAAO7W,SAAQ+W,IACX,MAAMqI,EAAwB,WAAVjf,EAChB6O,eAAaqQ,uBAAuBtI,EAAMqH,MAC1CrH,EAAMqH,KACV,IAAIkB,EAAO,EACX,IAAK,IAAIpc,EAAM,EAAGA,EAAM6T,EAAMvkB,MAAM,KAAM0Q,EAAK,CAC3C,MAAMqc,EAASrc,EAAMsN,EAAS,GAAK2O,EACnC,IAAK,IAAIhc,EAAM,EAAGA,EAAM4T,EAAMvkB,MAAM,KAAM2Q,EACtCwb,EAAQY,EAASpc,GAAOic,EAAYE,KAG5CH,GAAapI,EAAMvkB,MAAM,MAGjC,OAAOmsB,kEC3BJ,SAAsBa,EAAaC,EAAWtf,EAAOuf,EAAWC,EAAWC,EAAWxe,EAASye,EAAaC,GAC/G,MAAMb,EAASlmB,SAAO,CAAC2mB,EAAWE,GAAYzf,GAC9C,IAAK,IAAIrI,EAAI,EAAGA,EAAI4nB,EAAW5nB,IAAK,CAChC,MAAMqJ,EAAQ,GACd,IAAI4e,EAAe,EACnB,IAAK,IAAI7B,EAAI,EAAGA,EAAIyB,EAAWzB,IAAK,CAChC,MAAM8B,EAAMR,EAAY1nB,EAAI6nB,EAAYzB,GACxC6B,GAAgBC,EAAM5e,EAAQ8c,GAC9B/c,EAAMsN,KAAKuR,GAEf,GAAID,EAAe,GAAKA,GAAgBD,EAAaF,EACjD,MAAM,IAAIrvB,MAAM,oBAAoB4Q,yBAA6B0e,KAErE,IAAK,IAAIjC,EAAI,EAAGA,EAAIgC,EAAWhC,IAC3BqB,EAAOlG,OAAOjhB,EAAI8nB,EAAYhC,GAC1B6B,EAAU9d,OAAO8d,EAAUnH,WAAWyH,EAAeH,EAAYhC,IAG7E,OAAOqB,gBClBJ,SAAsBJ,EAAMoB,EAAYC,GAC3C,MAAMjB,EAASlmB,SAAOmnB,EAAoBrB,EAAK1e,OAC/C,IAAK,IAAIrI,EAAI,EAAGA,EAAImnB,EAAOxsB,OAAQqF,EAAG,CAClC,MACMqoB,EADSlB,EAAO3G,WAAWxgB,GACNE,QACrBooB,EAAWD,EAAY,GACvBE,EAAaF,EAAY,GACzBG,EAAeL,EAAWxH,WAAW,CAAC2H,EAAUC,IACtDF,EAAY,GAAKF,EAAWlH,OAAOuH,GACnC,MAAMC,EAAgB1B,EAAKpG,WAAW0H,GACtClB,EAAOlG,OAAOjhB,GAAK+mB,EAAK9F,OAAOwH,GAEnC,OAAOtB,gFCZJ,SAAsBuB,EAAOC,EAAMrrB,GACtC,MAAMsrB,GAAQD,EAAOD,IAAUprB,EAAM,GAC/B2jB,EAASrmB,OAAKksB,oBAAoBxpB,EAAK,WAC7C2jB,EAAO,GAAKyH,EACZ,IAAK,IAAI1oB,EAAI,EAAGA,EAAIihB,EAAOxhB,OAAQO,IAC/BihB,EAAOjhB,GAAKihB,EAAOjhB,EAAI,GAAK4oB,EAEhC,OAAO3H,sBCPJ,SAAiBtB,EAAOkJ,EAAYnQ,EAAUrQ,GACjD,MAAMie,EAAO1rB,OAAKqlB,uBAAuB5X,EAAOzN,OAAKC,cAAc6d,IACnE,IAAK,IAAI1Y,EAAI,EAAGA,EAAIsmB,EAAK7mB,SAAUO,EAAG,CAClC,MAAMsc,EAAStc,EAAI6oB,EACnB,IAAI1tB,EAAMwkB,EAAMrD,GAChB,IAAK,IAAI8J,EAAI,EAAGA,EAAIyC,IAAczC,EAAG,CACjC,MAAMjC,EAAQxE,EAAMrD,EAAS8J,IACzB0C,OAAOC,MAAM5E,IACbA,EAAQhpB,KACRA,EAAMgpB,GAGdmC,EAAKtmB,GAAK7E,EAEd,OAAOmrB,yDCZJ,SAAiBE,EAAOwC,EAAQC,GACnC,MAAMC,EAAWtuB,OAAKuuB,mBAAmB,EAAGF,GAC5C,OAAO3G,GAAa,GAAI0G,EAAQE,EAAU1C,EAAOyC,6BCF9C,SAAkBD,EAAQC,EAAQzC,EAAO4C,GAC5C,MAAO1Q,EAAU2Q,GAAenS,eAAaoS,0BAA0BN,EAAQI,GACzEG,EAAWC,aAAWP,EAAQ,SAC9BpC,EAAUjsB,OAAKksB,oBAAoBlsB,OAAKC,cAAc6d,GAAW6Q,GACjEV,EAAajuB,OAAKC,cAAcwuB,GACtC,IAAK,IAAIrpB,EAAI,EAAGA,EAAI6mB,EAAQpnB,SAAUO,EAAG,CACrC,MAAMsc,EAAStc,EAAI6oB,EACnB,IAAIY,EAAO,EACX,IAAK,IAAIrD,EAAI,EAAGA,EAAIyC,IAAczC,EAC9BqD,GAAQjD,EAAMlK,EAAS8J,GAE3BS,EAAQ7mB,GAAKypB,EAEjB,MAAO,CAAE5C,QAAAA,EAASnO,SAAAA,EAAU6Q,SAAAA,cCfzB,SAAmBb,EAAOC,EAAMC,EAAMvgB,GAIzC,GAHsBqgB,IAAUC,GACID,EAAQC,GAAQC,EAAO,GACvBD,EAAOD,GAASE,EAAO,EAGvD,OAAOhuB,OAAKksB,oBAAoB,EAAGze,GAEvC,MAAMqhB,EAAc3uB,KAAKwC,IAAIxC,KAAKC,MAAM2tB,EAAOD,GAASE,IAClD3H,EAASrmB,OAAKksB,oBAAoB4C,EAAarhB,GACjDsgB,EAAOD,GAAkB,IAATE,IAGhBA,GAAQ,GAEZ3H,EAAO,GAAKyH,EACZ,IAAK,IAAI1oB,EAAI,EAAGA,EAAIihB,EAAOxhB,OAAQO,IAC/BihB,EAAOjhB,GAAKihB,EAAOjhB,EAAI,GAAK4oB,EAEhC,OAAO3H,0BClBJ,SAAmBqF,EAAMqD,EAAOhvB,EAAMD,EAAO2N,GAChD,MAAMuhB,EAAcC,aAAWC,iBAAiBpvB,EAAOivB,EAAOhvB,GACxD8E,EAAS7E,OAAKC,cAAcF,GAC5BovB,EAAWnvB,OAAK2O,eAAe7O,GACrC,GAAIkvB,EAAa,CACb,MAAM5P,EAAa6P,aAAWG,kBAAkBL,EAAOI,GACvD,MAAc,WAAV1hB,EACOie,EAAKpmB,MAAM8Z,EAAYA,EAAava,GAExC6mB,EAAKlB,SAASpL,EAAYA,EAAava,GAElD,MAAM6nB,EAAwB,WAAVjf,EAChB6O,eAAaqQ,uBAAuBjB,GACpCA,EACE2D,EAAQhpB,SAAOvG,EAAO2N,EAAOif,GAC7BH,EAASlmB,SAAOtG,EAAM0N,GAC5B,IAAK,IAAIrI,EAAI,EAAGA,EAAImnB,EAAOxsB,OAAQqF,EAAG,CAClC,MAAMkqB,EAAS/C,EAAO3G,WAAWxgB,GAC3BmqB,EAAQD,EAAOtqB,KAAI,CAACwqB,EAAKhE,IAAMgE,EAAMT,EAAMvD,KACjDe,EAAOjZ,IAAI+b,EAAMpgB,OAAOsgB,MAAWD,GAEvC,MAAc,WAAV7hB,EACO6O,eAAamT,uBAAuBlD,EAAOlG,QAE/CkG,EAAOlG,gCCzBX,SAAiCqJ,EAASC,EAAcC,EAAcvJ,EAAQwJ,EAAaC,EAAYC,GAC1G,MAAMC,EAAeL,EAAa,GAC5BM,EAAYH,EAAW,GACvBI,EAAoB,IAAI9iB,MAAM6iB,GAC9BE,EAAkB,IAAI/iB,MAAM4iB,GAC5BxM,EAAOmM,EAAa,GAC1B,GAAkB,IAAdM,EAAiB,CACjB,GAAqB,IAAjBD,EACA,MAAM,IAAInyB,MAAM,iFACEmyB,KAItB,MAAO,CAFehwB,OAAK+pB,kBAAkB6F,EAAc,GAGxC,CAAC,EAAGpM,GAFFxjB,OAAK+pB,kBAAkB8F,EAAa,GAEbK,EAAmBC,GAGnE,IAAIC,GAAiB,EACjBC,EAAiB,EACrB,MAAMC,EAAY,IAAIljB,MAAM6iB,GAAWM,KAAK,GAC5C,IAAK,IAAInrB,EAAI,EAAGA,EAAI4qB,IAAgB5qB,EAAG,CAEnC,MAAMoL,EAAMkf,EAAQtqB,EAAIoe,GACxB,GAAIhT,EAAM,EACN,MAAM,IAAI3S,MAAM,WAAWuH,qBAAqBoL,SAEpD,GAAIA,GAAOyf,EACP,MAAM,IAAIpyB,MAAM,WAAWuH,qBAAqBoL,QAAUyf,OAE5DK,EAAU9f,GACZ4f,EAAiBA,GAAmB5f,GAAO6f,EAC3CA,EAAiB7f,EAErB,IAAIggB,GAAc,EAClB,IAAK,IAAIhgB,EAAM,EAAGA,EAAMyf,IAAazf,EAAK,CAEtC,MAAMigB,EAA+B,IAAnBH,EAAU9f,GAC5B0f,EAAkB1f,GAAOigB,EACzBD,EAAcA,IAAgBC,EAE9BH,EAAU9f,GAAOrQ,KAAKI,IAAI+vB,EAAU9f,GAAM,GAOtCA,EAAM,IACN8f,EAAU9f,IAAQ8f,EAAU9f,EAAM,IAG1C,GAAIggB,GAAeJ,EAAgB,CAC/B,MAAMM,EAAgBhB,EAChBiB,EAAetK,EACrB,IAAK,IAAIjhB,EAAI,EAAGA,EAAI4qB,IAAgB5qB,EAChC+qB,EAAgB/qB,GAAKA,EAEzB,MAAO,CACHsrB,EAAe,CAACV,EAAcxM,GAAOmN,EAAcT,EACnDC,GAGH,CACD,MAAMS,EAAmBN,EAAUL,EAAY,GACzCS,EAAgB1wB,OAAK+pB,kBAAkB6F,EAAcgB,EAAmBpN,GACxEmN,EAAe3wB,OAAK+pB,kBAAkB8F,EAAae,GACnDC,EAAc,IAAIzjB,MAAM6iB,GAAWM,KAAK,GAE9C,IAAK,IAAInrB,EAAI,EAAGA,EAAI4qB,IAAgB5qB,EAAG,CAEnC,MAAMoL,EAAMkf,EAAQtqB,EAAIoe,GAClB9B,EAASmP,EAAYrgB,GACrBsgB,GAAoB,IAARtgB,EAAa,EAAI8f,EAAU9f,EAAM,IAAMkR,EACzDmP,EAAYrgB,KACZ,IAAK,IAAIgb,EAAI,EAAGA,EAAIhI,IAAQgI,EAExBkF,EAAcI,EAAUtN,EAAOgI,GAAKkE,EAAQtqB,EAAIoe,EAAOgI,GAE3DmF,EAAaG,GAAWzK,EAAOjhB,GAE/B+qB,EAAgB/qB,GAAK0rB,EAGzB,IAAK,IAAItgB,EAAM,EAAGA,EAAMyf,IAAazf,EAAK,CAEtC,GAAiB,IADAqgB,EAAYrgB,GACT,CAChB,MAAMugB,EAAyB,IAARvgB,EAAa,EAAI8f,EAAU9f,EAAM,GAIxDkgB,EAAcK,EAAgBvN,EAAO,GAAKhT,EAC1C,IAAK,IAAIC,EAAM,EAAGA,EAAM+S,IAAQ/S,EAC5BigB,EAAcK,EAAgBvN,EAAO/S,GAAO,EAEhDkgB,EAAaI,GAAiBhB,GAGtC,MAAO,CACHW,EAAe,CAACE,EAAkBpN,GAAOmN,EAAcT,EACvDC,uBCnGL,SAA2Ba,EAAcC,EAAmBC,EAAYC,EAAYC,GACvF,MAAMC,EAAYrxB,OAAKC,cAAckxB,GAC/BG,EAAML,EAAkB,GACxBM,EAAaH,EAAYvsB,OAGzB2K,EAAc,GACpB,IAAIgiB,EAAU,EACVC,GAAgB,EACpB,IAAK,IAAIhnB,EAAI,EAAGA,EAAI8mB,IAAc9mB,EAAG,CACjC,MAAM1K,EAAOqxB,EAAY3mB,GACzB,IAAc,IAAV1K,EAAa,CACb,IAAsB,IAAlB0xB,EACA,MAAM,IAAI5zB,MAAM,iDAAiD4zB,SAAoBhnB,KAEzFgnB,EAAehnB,EACf+E,EAAYuM,KAAK,OAEhB,CACD,GAAIhc,EAAO,EACP,MAAM,IAAIlC,MAAM,QAAQ4M,+BAA+B1K,KAE3DyxB,GAAWzxB,EACXyP,EAAYuM,KAAKhc,IAGzB,IAAsB,IAAlB0xB,EAAqB,CACrB,GAAID,GAAW,EACX,MAAM,IAAI3zB,MAAM,iHAIpB,MAAM6zB,EAAUvxB,KAAKwxB,MAAMN,EAAYG,GACvC,GAAIA,EAAUE,IAAYL,EACtB,MAAM,IAAIxzB,MAAM,2CAA2CwzB,6EACEG,iBAAuBL,kBAA2B3hB,KAEnHA,EAAYiiB,GAAgBC,EAEhC,MAAME,EAAa5xB,OAAKC,cAAcuP,GACtC,GAAIoiB,IAAeP,EACf,MAAM,IAAIxzB,MAAM,qCAAqCwzB,+CAAuDO,iBAA0BT,iBAA0B3hB,KAEpK,MAAMqiB,EAAYV,EAAWtsB,OACvBitB,EAAe,GACrB,GAAID,EAAY,EAAG,CACfC,EAAaD,EAAY,GAAK,EAC9B,IAAK,IAAIpnB,EAAIonB,EAAY,EAAGpnB,GAAK,IAAKA,EAClCqnB,EAAarnB,GAAKqnB,EAAarnB,EAAI,GAAK0mB,EAAW1mB,EAAI,GAG/D,MAAMsnB,EAAgB,GACtB,GAAIR,EAAa,EAAG,CAChBQ,EAAcR,EAAa,GAAK,EAChC,IAAK,IAAI9mB,EAAI8mB,EAAa,EAAG9mB,GAAK,IAAKA,EACnCsnB,EAActnB,GAAKsnB,EAActnB,EAAI,GAAK+E,EAAY/E,EAAI,GAGlE,MAAMunB,EAAahyB,OAAK+pB,kBAAkBmH,EAAYI,EAAMC,GAC5D,IAAK,IAAInsB,EAAI,EAAGA,EAAIksB,IAAOlsB,EAAG,CAC1B,IAAI6sB,EAAK,EACT,IAAK,IAAIzG,EAAI,EAAGA,EAAIqG,IAAarG,EAE7ByG,GAAMjB,EAAa5rB,EAAIysB,EAAYrG,GAAKsG,EAAatG,GAEzD,IAAK,IAAIA,EAAI,EAAGA,EAAI+F,IAAc/F,EAE9BwG,EAAW5sB,EAAImsB,EAAa/F,GAAKrrB,KAAKwxB,MAAMM,EAAKF,EAAcvG,IAC/DyG,GAAMF,EAAcvG,GAG5B,MAAO,CAACwG,EAAY,CAACV,EAAKC,GAAa/hB,+BCvEpC,SAAoC6U,EAAO8M,EAAYD,EAAYxB,EAASwC,EAAYC,GAAS,EAAOpC,EAAe,GAC1H,MAAMqC,EAAa1C,EAAQ7qB,OAC3B,GAAIutB,IAAeF,EAAWrtB,OAC1B,MAAM,IAAIhH,MAAM,iDAGpB,MAAMw0B,EAAY,CAAClB,EAAW,GAAI9M,EAAMxf,OAASssB,EAAW,IACtDmB,EAASD,EAAU,GAInBE,EADuBH,EAAa,EAAIF,EAAWE,EAAa,GAAK,EAAI,EAE/E,GAAIG,EAAa,EACb,MAAM,IAAI10B,MAAM,4BAEpB,MAAM2R,EAAc2hB,EAAW7rB,QAC/BkK,EAAY,GAAK+iB,EACjB,MAAMC,EAAehjB,EAAYijB,QAAO,CAACjB,EAASjI,IAAUiI,EAAUjI,GAAO,GAEvErb,EAASlO,OAAK+pB,kBAAkBmH,EAAYsB,GAGlD,GAAmB,IAAfJ,EAIA,OAHIG,EAAa,GACbrkB,EAAOqiB,KAAKR,GAET,CAAC7hB,EAAQsB,GAEpB,GAAI+iB,GAAc,EACd,MAAM,IAAI10B,MAAM,4BAEpB,IAAIiwB,EAAQ,EAAG4E,EAAM,EAEjBC,EAAqB,EACrBC,EAAWV,EAAWpE,GAC1B,OAAa,CAET,IAAI+E,EAAY,EAChB,GAAIH,EAAMN,EAAY,CAElB,GADAS,EAAYX,EAAWQ,GACnBE,IAAaC,EAAW,GACtBH,EACF,SAGJ,GAAIE,GAAYC,EACZ,MAAM,IAAIh1B,MAAM,kCAGxB,GAAI+0B,EAAW,GAAKA,GAAYL,EAC5B,MAAM,IAAI10B,MAAM,cAAc+0B,sBAA6BL,wDAI3DK,EAAWD,GACXzkB,EAAOqiB,KAAKR,EAAc4C,EAAqBL,EAAQM,EAAWN,GAEtE,IAAK,IAAIltB,EAAI0oB,EAAO1oB,EAAIstB,IAAOttB,EAAG,CAC9B,MAAMqJ,EAAQihB,EAAQtqB,GACtB,GAAIqJ,EAAQ,GAAKA,GAAS4jB,EAAU,GAChC,MAAM,IAAIx0B,MAAM,gBAAgBuH,SAASsqB,EAAQtqB,uBAAuBitB,EAAU,OAEtF,IAAK,IAAI7G,EAAI,EAAGA,EAAI8G,EAAQ9G,IACxBtd,EAAO0kB,EAAWN,EAAS9G,IAAMnH,EAAM5V,EAAQ6jB,EAAS9G,GAGhE,GAAI2G,EACA,IAAK,IAAI3G,EAAI,EAAGA,EAAI8G,EAAQ9G,IACxBtd,EAAO0kB,EAAWN,EAAS9G,IAAMkH,EAAM5E,EAO/C,GAJAA,EAAQ4E,IACNA,EACFC,EAAqBC,EAAW,EAChCA,EAAWC,EACPH,EAAMN,EACN,MAOR,OAHIO,EAAqBJ,GACrBrkB,EAAOqiB,KAAKR,EAAc4C,EAAqBL,EAAQC,EAAaD,GAEjE,CAACpkB,EAAQsB,8CCnFb,SAA0BsO,EAAUqO,EAAMzd,EAASqgB,GACtD,MAAMxC,EAASlmB,SAAOyX,EAAUqO,EAAK1e,OACrC,IAAK,IAAIrI,EAAI,EAAGA,EAAImnB,EAAOxsB,KAAMqF,IAAK,CAClC,MAAMoC,EAAM+kB,EAAO3G,WAAWxgB,GACxB0tB,EAAS,IAAI1lB,MAAM5F,EAAI3C,QAC7B,IAAK,IAAI2mB,EAAI,EAAGA,EAAIsH,EAAOjuB,OAAQ2mB,IAC/BsH,EAAOtH,GAAKhkB,EAAIgkB,GAAK9c,EAAQ8c,GAAKuD,EAAMvD,GAE5Ce,EAAOjZ,IAAI6Y,EAAKld,OAAO6jB,MAAYtrB,GAEvC,OAAO+kB,oBlB2JJ,SAA0BnmB,EAAM2sB,EAAY9K,EAAWC,EAAaC,EAASjjB,EAAUkjB,EAAUC,GACpG,OAAO,IAAIL,GAAeC,EAAWC,EAAaC,EAASjjB,EAAUkjB,EAAUC,GAC1E2K,QAAQ5sB,EAAM2sB,oBC1HhB,SAAyB1O,EAAOoG,EAAWF,GAC9C,MAAM0I,EAAY5O,EAAMxf,OAElBquB,EAAS,GACf,IAAItB,EAAa,EACbuB,EAAgB,EACpB,MAAMf,EAAa,IAAIhlB,MAAM6lB,GAC7B,IAAK,IAAI7tB,EAAI,EAAGA,EAAI6tB,IAAa7tB,EAAG,CAChC,MAAMguB,EAAQzuB,GAAM0f,EAAMjf,GAAIqlB,EAAWF,GACnC8I,EAAWD,EAAMvuB,OACvButB,EAAWhtB,GAAKiuB,EAChBzB,GAAcyB,EACdF,EAAgBhzB,KAAKI,IAAI4yB,EAAeE,GACxCH,EAAOnX,QAAQqX,GAEnB,MAAM1D,EAAU1vB,OAAK+pB,kBAAkB,QAAsB,EAAb6H,GAC1CvL,EAAS,IAAIjZ,MAAMwkB,GACnB9xB,EAAQ,CAACmzB,EAAWE,GAC1B,IAAIG,EAAI,EACR,IAAK,IAAIluB,EAAI,EAAGA,EAAI6tB,IAAa7tB,EAC7B,IAAK,IAAIomB,EAAI,EAAGA,EAAI4G,EAAWhtB,KAAMomB,EAEjCkE,EAAY,EAAJ4D,GAASluB,EACjBsqB,EAAY,EAAJ4D,EAAQ,GAAK9H,EACrBnF,EAAOiN,GAAKJ,EAAOI,KACjBA,EAGV,MAAO,CAAC5D,EAASrJ,EAAQvmB,+BkBzEtB,SAAoCukB,EAAOkP,GAC9C,MAAMrlB,EAASlO,OAAK+pB,kBAAkB,QAAS1F,EAAMxf,QACrD,IAAK,IAAIO,EAAI,EAAGA,EAAIif,EAAMxf,SAAUO,EAChC8I,EAAO9I,GACHpF,OAAKwzB,cAAcnP,EAAMjf,IAAIquB,OAAOF,GAAYG,qBAExD,OAAOxlB,uBCFJ,SAAkBie,EAAMwH,GAC3B,MAAM9oB,EAAW,IAAIuC,MAAM+e,EAAK3I,MAChC,IAAK,IAAIpe,EAAI,EAAGA,EAAIyF,EAAShG,OAAQO,IACjCyF,EAASzF,GAAK+mB,EAAKrsB,MAAMsF,GAAKuuB,EAAKvuB,GAEvC,MAAM4R,EAAS3Q,SAAOwE,EAAUshB,EAAK1e,OACrC,IAAK,IAAIrI,EAAI,EAAGA,EAAI4R,EAAOqP,OAAOxhB,SAAUO,EAAG,CAC3C,MAAM0tB,EAAS9b,EAAO4O,WAAWxgB,GAC3BqoB,EAAc,IAAIrgB,MAAM+e,EAAK3I,MACnC,IAAK,IAAIgI,EAAI,EAAGA,EAAIiC,EAAY5oB,OAAQ2mB,IACpCiC,EAAYjC,GAAKsH,EAAOtH,GAAKW,EAAKrsB,MAAM0rB,GAE5C,MAAMqC,EAAgB1B,EAAKpG,WAAW0H,GACtCzW,EAAOqP,OAAOjhB,GAAK+mB,EAAK9F,OAAOwH,GAEnC,OAAO7W,YjBgDJ,SAAkB4E,EAAGwS,EAAQC,EAAQnD,EAAG0I,GAE3C,MAAMC,EAAUzF,EAAOA,EAAOvpB,OAAS,IAChC0P,EAAOxU,GAAQ,CAAC6b,EAAE/W,OAASgvB,EAASA,GACrCC,EAAc9zB,OAAKqlB,uBAAuBgJ,EAAQ9Z,EAAQ2W,GAC1D6I,EAAiB/zB,OAAKqlB,uBAAuB,QAAS9Q,EAAQ2W,GACpE,IAAK,IAAIzK,EAAI,EAAGA,EAAIlM,EAAOkM,IAAK,CAC5B,MAAMiB,EAASjB,EAAI1gB,EACb2rB,EAAO9P,EAAE4O,SAAS9I,EAAQA,EAAS3hB,GACzC,IAAIi0B,EAAY,IAAI5mB,MAAMse,EAAK7mB,QAC/B6mB,EAAKpe,SAAQ,CAACic,EAAO9a,IAAUulB,EAAUvlB,GAAS,CAAE8a,MAAAA,EAAO9a,MAAAA,KACvDyc,EAAI8I,EAAUnvB,SACdmmB,GAAOgJ,EAAW9I,GAClB8I,EAAYA,EAAU1uB,MAAM,EAAG4lB,IAE/B0I,GACAI,EAAUC,KAAKnJ,IAEnB,MAAMoJ,EAAYzT,EAAIyK,EAChBiJ,EAAWL,EAAYtJ,SAAS0J,EAAWA,EAAYhJ,GACvDkJ,EAAcL,EAAevJ,SAAS0J,EAAWA,EAAYhJ,GACnE,IAAK,IAAI9lB,EAAI,EAAGA,EAAI8lB,EAAG9lB,IACnB+uB,EAAS/uB,GAAK4uB,EAAU5uB,GAAGmkB,MAC3B6K,EAAYhvB,GAAK4uB,EAAU5uB,GAAGqJ,MAKtC,MAAMe,EAAc4e,EAAO9oB,QAE3B,OADAkK,EAAYA,EAAY3K,OAAS,GAAKqmB,EAC/B,CACH7kB,SAAOmJ,EAAa6e,EAAQyF,GAC5BztB,SAAOmJ,EAAa,QAASukB,mBkBnG9B,SAAuBnI,EAAOwC,EAAQ3gB,EAAO4mB,EAAMxpB,GACtD,MAAMypB,EAAQlG,EAAOvpB,OACf0vB,EAAQv0B,OAAKC,cAAcmuB,GAC3Be,EAAWnvB,OAAK2O,eAAeyf,GAC/BoG,EAAax0B,OAAK2O,eAAe9D,GACjCmM,EAAShX,OAAKqlB,uBAAuB5X,EAAOzN,OAAKC,cAAc4K,IACrE,IAAK,IAAIzF,EAAI,EAAGA,EAAImvB,IAASnvB,EAAG,CAC5B,MAAMoC,EAAMxH,OAAK4lB,WAAWxgB,EAAGkvB,EAAOnF,GAEhC2D,EAAS,IAAI1lB,MAAM5F,EAAI3C,QAC7B,IAAK,IAAIO,EAAI,EAAGA,EAAI0tB,EAAOjuB,OAAQO,IAC/B0tB,EAAO1tB,GAAKoC,EAAI6sB,EAAKjvB,IAGzB4R,EADiBhX,OAAK+lB,WAAW+M,EAAQwB,EAAOE,IAC7B5I,EAAMxmB,GAE7B,OAAO4R,cChBJ,SAAoBqP,EAAQoO,EAAM30B,EAAO2N,GAE5C,MAAMinB,EAAQ10B,OAAK20B,eAAeF,EAAM30B,GAAO,GAwDzC+K,EAAW,CAAC,EAAG/K,EAAM,GAAI,GAC/B,IAAK,IAAIsF,EAAI,EAAGA,EAAIsvB,EAAOtvB,IACvByF,EAAS,IAAM/K,EAAMsF,GAEzByF,EAAS,GAAK/K,EAAM40B,GACpB,IAAK,IAAItvB,EAAIsvB,EAAQ,EAAGtvB,EAAItF,EAAM+E,OAAQO,IACtCyF,EAAS,IAAM/K,EAAMsF,GAIzB,MAAMwvB,EAAiB,GAGjBlF,EAAU,IAAImF,WAAW/0B,EAAM40B,IAE/BI,EAAc,IAAIC,eAAalqB,EAAU4C,EAAO4Y,GAGhD2O,EAAgB,GAChBC,EAA6B,IAAhBpqB,EAAS,IAA4B,IAAhBA,EAAS,GACjD,IAAK,IAAIzF,EAAI,EAAGA,EAAItF,EAAM40B,GAAQtvB,IAAK,CAEnC,IAAI8vB,EACJ,GAAID,EAEAC,EAAU7O,EAAOjhB,GAAGN,eAEnB,CACD,MAAMqwB,EAAa,GACnB,IAAK,IAAIC,EAAI,EAAGA,EAAIvqB,EAAS,GAAIuqB,IAC7B,IAAK,IAAInqB,EAAI,EAAGA,EAAIJ,EAAS,GAAII,IAC7BkqB,EAAWpZ,KAAK+Y,EAAY7lB,IAAImmB,EAAGhwB,EAAG6F,IAG9CiqB,EAAUC,EAAW1vB,KAAK,KAG9B,QAAgC4vB,IAA5BT,EAAeM,GACfxF,EAAQtqB,GAAKwvB,EAAeM,OAE3B,CACD,MAAMI,EAAcC,OAAOC,KAAKZ,GAAgB/vB,OAChD+vB,EAAeM,GAAWI,EAC1B5F,EAAQtqB,GAAKkwB,EACbN,EAAcjZ,KAAK3W,IAM3B,MAAMqwB,EAAiB5qB,EAASvF,QAChCmwB,EAAe,GAAKF,OAAOC,KAAKZ,GAAgB/vB,OAChD,MAAM6wB,EAAe,IAAIX,eAAaU,EAAgBhoB,GACtDunB,EAAc1nB,SAAQ,CAACqoB,EAAoBvwB,KACvC,IAAK,IAAIgwB,EAAI,EAAGA,EAAIvqB,EAAS,GAAIuqB,IAC7B,IAAK,IAAInqB,EAAI,EAAGA,EAAIJ,EAAS,GAAII,IAC7ByqB,EAAapiB,IAAIwhB,EAAY7lB,IAAImmB,EAAGO,EAAoB1qB,GAAImqB,EAAGhwB,EAAG6F,MAM9E,MAAMuE,EAAc1P,EAAMwF,QAE1B,OADAkK,EAAYklB,GAASe,EAAe,GAC7B,CACH9E,aAAc+E,EAAarP,OAC3B7W,YAAAA,EACAkgB,QAAAA,MCjHR,MACExJ,QAAS0P,GACTC,aAAcC,GACdC,mBAAoBC,GACpBxP,SAAUyP,GACVC,WAAYC,GACZzP,UAAW0P,GACXzP,QAAS0P,GACTxP,UAAWyP,GACXvP,UAAWwP,GACXC,aAAcC,GACdC,aAAcC,GACd1P,YAAa2P,GACb1P,iBAAkB2P,GAClB1P,SAAU2P,GACV1P,cAAe2P,GACfC,aAAcC,GACd5P,QAAS6P,GACTC,QAASC,GACT9P,YAAa+P,GACb5P,YAAa6P,GACb5P,aAAc6P,GACdC,QAASC,GACT9P,aAAc+P,GACdC,SAAUC,GACVC,UAAWC,GACXlQ,UAAWmQ,GACXC,cAAeC,GACfC,UAAWC,GACXC,wBAAyBC,GACzBC,kBAAmBC,GACnBC,2BAA4BC,GAC5BC,iBAAkBC,GAClBC,iBAAkBC,GAClBC,gBAAiBC,GACjBC,2BAA4BC,GAC5BpO,QAASqO,GACTC,SAAUC,GACVC,SAAUC,GACVC,cAAeC,GACfC,WAAYC,IACVC,YCrDYC,GAAe/c,EAAc2G,GAC3C,MAAO,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KAAKle,MAAM,EAAGke,GAAMxe,KAAIyF,GAAK,GAAGoS,KAAQpS,eAG3DovB,GAAYhd,EAAc2G,GACxC,OAAa,IAATA,EACK,CAAC3G,GAEH+c,GAAe/c,EAAM2G,SCJjBsW,GAOXvqB,YACIC,GAPJC,mBAAgB,CAAC,KAGjBA,mBAAe,EACfA,mBAAe,EAMbA,KAAKD,YAAcA,EACnB,MAAMgU,EAAOhU,EAAY3K,OAEzB,GAAa,IAAT2e,EACF/T,KAAKI,SAAW,iGAKX,CACL,MAAMkqB,EAAWF,GAAY,KAAMrW,GAC7B/V,EAAQ+Q,GAAkBgF,GAC1BwW,EAyCZ,SACIxW,EAAc1jB,EAAiBm6B,GACjC,GAAa,IAATzW,EACF,MAAO,QAAQ1jB,EAAM,KAGvB,IAAIo6B,EAAO,GACX,IAAK,IAAI90B,EAAIoe,EAAO,EAAGpe,EAAIoe,EAAMpe,IAC/B80B,GAAQ,GAAGD,EAAK70B,SAAStF,EAAMsF,KAC3BA,EAAIoe,EAAO,IACb0W,GAAQ,MAIZ,OAAOA,EAtDCC,CAAwB3W,EAAMhU,EAAauqB,GACzCK,EAwDZ,SACI5W,EAAczY,EAAcpL,EAAcs6B,GAC5C,GAAa,IAATzW,EACF,MAAO,GAGT,MAAM6W,EAAYJ,EAAK30B,OAAO,GAE9B,MAAO,iBACK+0B,EAAU,oBACVA,EAAU,8EAIEtvB,+BACApL,SAvEN26B,CACV9W,EAAMhU,EAAYA,EAAY3K,OAAS,GACvC2K,EAAYA,EAAY3K,OAAS,GAAIk1B,GACnC7rB,EAwEZ,SAAmBpO,EAAiBm6B,GAClC,MAAMzW,EAAO1jB,EAAM+E,OACb01B,EAvDR,SAA4B/W,EAAcyW,GACxC,MAAMzrB,EAAS,GAEf,IAAK,IAAIgC,EAAM,EAAGA,GAAO,EAAGA,IAC1B,IAAK,IAAIC,EAAM,EAAGA,GAAO,EAAGA,IAAO,CACjC,IAAI+pB,EAAQ,GAAW,IAARhqB,EAAY,IAAM,UAAkB,IAARC,EAAY,IAAM,QAE7D,IAAK,IAAIhG,EAAI,EAAGA,EAAI+Y,EAAM/Y,IACxB+vB,EAAQ,GAAGP,EAAKA,EAAKp1B,OAAS,EAAI4F,MAAQ+vB,EAG5ChsB,EAAOuN,KAAKye,GAGhB,OAAOhsB,EAyCcisB,CAAmBjX,EAAMyW,GAC9C,GAAa,IAATzW,EACF,MAAO,oCACa1jB,EAAM,4CAI5B,MAAO,QAAQy6B,EAAa,qCACAA,EAAa,qCACbA,EAAa,8CACJA,EAAa,MApF/BG,CAAUlrB,EAAauqB,GAEtCtqB,KAAKI,SAAW,sCAEVpC,6CAEGusB,0EAGDI,mCAEelsB,+CCxChBysB,GAOXprB,YAAYC,EAAuC2hB,GANnD1hB,mBAAgB,CAAC,KACjBA,mBAAe,EACfA,mBAAe,EAObA,KAAKD,YAAcA,EAEnB,IAAIe,EAAW,GACf,IAAK,IAAInL,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAIw1B,EAAS,eACTx1B,EAAI,GAAM,IACZw1B,GAAU,kBAERx1B,EAAI,IACNw1B,GAAU,kBAGZrqB,GAAY,aACRqqB,cACAx1B,EAAI,EAAI,0CAA4C,iOAM3CA,mGAETA,EAAI,EAAI,IAAM,aAyBxB,IAAgCtF,EArB5B2P,KAAKI,SAAW,WAqBY/P,EApBDqxB,EAwBtB,oEAFHrhB,GAA+C,CAAC,IAAK,IAAK,KAAMhQ,wDArB9DuQ,GAA+Bb,oJAQlBA,EAAY,2BACZA,EAAY,kBAEvBe,wDC9CGsqB,GAUXtrB,YAAoBurB,GAAArrB,WAAAqrB,EATZrrB,qBAAkB,EAClBA,qBAAkB,EAClBA,wBAAqB,EACrBA,mBAAgB,EAEhBA,kBAAkD,GAClDA,iBAAa,EACbA,kBAAkD,GAI1DF,eACIwrB,EAA2BC,EAC3BzwB,GACF,MAAM0wB,EAAkBC,GAAkCF,EAAOzwB,GAE3D4wB,EAAWC,GAAuBL,EAASE,EAAiB1wB,GAC5D4wB,KAAY1rB,KAAK4rB,eACrB5rB,KAAK4rB,aAAaF,GAAY,IAE1BA,KAAY1rB,KAAK6rB,eACrB7rB,KAAK6rB,aAAaH,GAAY,IAGhC,MAAMI,EAAWC,GACbT,EAASE,EAAiBxrB,KAAKqrB,MAAMp9B,GAAI+R,KAAKqrB,MAAM5oB,cACpD3H,GAEJ,GAAIkF,KAAK4rB,aAAaF,GAAUt2B,OAAS,EAAG,CAC1C4K,KAAKgsB,kBACLhsB,KAAKisB,kBACLjsB,KAAKksB,eAAiBJ,EACtB9rB,KAAKhR,MACL,MAAMm9B,EAAansB,KAAK4rB,aAAaF,GAAUU,QAE/C,OADApsB,KAAK6rB,aAAaH,GAAUpf,KAAK6f,GAC1BA,EAGT,IAAIA,EAuBJ,OAtBIX,IAAoBx7B,EAAoBq8B,mBAC1CF,EAAansB,KAAKqrB,MAAMnoB,0BAA0BooB,EAAQ,GAAIA,EAAQ,IAC7DE,IAAoBx7B,EAAoBs8B,mBACjDH,EACInsB,KAAKqrB,MAAMhoB,iCAAiCioB,EAAQ,GAAIA,EAAQ,IAC3DE,IAAoBx7B,EAAoBu8B,iBACjDJ,EACInsB,KAAKqrB,MAAM3oB,2BAA2B4oB,EAAQ,GAAIA,EAAQ,IACrDE,IAAoBx7B,EAAoBw8B,iBACjDL,EACInsB,KAAKqrB,MAAMxoB,2BAA2ByoB,EAAQ,GAAIA,EAAQ,IAE5DE,IAAoBx7B,EAAoBy8B,2BAC1CN,EACInsB,KAAKqrB,MAAMtoB,iCAAiCuoB,EAAQ,GAAIA,EAAQ,KAEtEtrB,KAAK6rB,aAAaH,GAAUpf,KAAK6f,GAEjCnsB,KAAKisB,kBACLjsB,KAAK0sB,oBAAsBZ,EAC3B9rB,KAAKhR,MAEEm9B,EAGTrsB,eACI1H,EAAuB/H,EACvBs8B,EAA8B7xB,GAChC,GAAyB,MAArBkF,KAAK4rB,aAEP,OAEF,MAAMJ,EACFC,GAAkCkB,EAAgB7xB,GAChD4wB,EAAWC,GAAuBt7B,EAAOm7B,EAAiB1wB,GAC1D4wB,KAAY1rB,KAAK4rB,eACrB5rB,KAAK4rB,aAAaF,GAAY,IAGhC,MAAMI,EAAWC,GACb17B,EAAOm7B,EAAiBxrB,KAAKqrB,MAAMp9B,GAAI+R,KAAKqrB,MAAM5oB,cAClD3H,GACE8xB,EAAqBh7B,QAAM4N,IAAI,mCACT,IAAxBotB,GACA5sB,KAAK0sB,mBAAqBE,GAC5B5sB,KAAKqrB,MAAMwB,oBAAoBz0B,GAC/B4H,KAAK0sB,oBAAsBZ,IAE3B9rB,KAAK4rB,aAAaF,GAAUpf,KAAKlU,GACjC4H,KAAKgsB,kBACLhsB,KAAKksB,eAAiBJ,GAGxB9rB,KAAKisB,kBAEL,MAAMa,EAAU9sB,KAAK6rB,aAAaH,GAC5BqB,EAAWD,EAAQvd,QAAQnX,GACjC,GAAI20B,EAAW,EACb,MAAM,IAAI3+B,MACN,4EAGN0+B,EAAQE,OAAOD,EAAU,GACzB/sB,KAAKhR,MAGC8Q,MACN,IAAKE,KAAKitB,WACR,OAEF,MAAMC,EAAQltB,KAAKgsB,gBAAkBhsB,KAAKisB,gBAC1Cl9B,QAAQC,IACJ,YAAa,GAAGgR,KAAKgsB,qBAAqBhsB,KAAKisB,kBAC/C,IAAIiB,MACR,MAAMC,EAAYntB,KAAKksB,cAAgBlsB,KAAK0sB,mBAC5C39B,QAAQC,IAAI,oBAAoBgR,KAAK0sB,sBACrC39B,QAAQC,IAAI,iBAAiBgR,KAAKksB,kBAC9Bx7B,KAAK08B,MAAM,IAAMD,QAGvBE,wBACE,OAAOrtB,KAAK0sB,mBAGdY,mBACE,OAAOttB,KAAKksB,cAGdpsB,qBACE,OAAOE,KAAKisB,gBAGdnsB,qBACE,OAAOE,KAAKgsB,gBAGdlsB,UACE,GAAyB,MAArBE,KAAK4rB,aAAT,CAIA,IAAK,MAAM1rB,KAAYF,KAAK4rB,aAC1B5rB,KAAK4rB,aAAa1rB,GAAUrC,SAAQ0vB,IAClCvtB,KAAKqrB,MAAMwB,oBAAoBU,MAGnC,IAAK,MAAMrtB,KAAYF,KAAK6rB,aAC1B7rB,KAAK6rB,aAAa3rB,GAAUrC,SAAQ0vB,IAClCvtB,KAAKqrB,MAAMwB,oBAAoBU,MAGnCvtB,KAAK4rB,aAAe,KACpB5rB,KAAK6rB,aAAe,KACpB7rB,KAAKisB,gBAAkB,EACvBjsB,KAAKgsB,gBAAkB,EACvBhsB,KAAK0sB,mBAAqB,EAC1B1sB,KAAKksB,cAAgB,aAsBTH,GACZ17B,EAAyBm7B,EACzBv9B,EAA2BwU,EAC3B3H,GAMF,MAAM4G,EAmBR,SACI8pB,EACA/oB,GACF,OAAQ+oB,GACN,KAAKx7B,EAAoBq8B,mBACvB,OAAOppB,GAAwCR,GACjD,KAAKzS,EAAoBs8B,mBACvB,OAAOlpB,GAA+CX,GACxD,KAAKzS,EAAoBu8B,iBACvB,OAAO/pB,GAAyCC,GAClD,KAAKzS,EAAoBw8B,iBACvB,OAAO5pB,GAAyCH,GAClD,KAAKzS,EAAoBy8B,yBACvB,OAAO3pB,GAA+CL,GACxD,QACE,MAAM,IAAIrU,MAAM,iCAAiCo9B,MAjCjDgC,CAAiChC,EAAiB/oB,GAEtD,IAAI4c,EACJ,GAAIvkB,EAAU,CACZ,MAAO2yB,EAAaC,GAChB78B,EAAuCR,EAAM,GAAIA,EAAM,IAC3DgvB,EAAcoO,EAAcC,MAEvB,CACL,MAAOp2B,EAAOC,GACVtH,EAAyCI,EAAM,GAAIA,EAAM,IAC7DgvB,EAAc/nB,EAAQC,EAIxB,OAAO8nB,EA3CT,SACIpxB,EAA2ByT,GAE7B,MAAMzQ,EAAQhD,EACd,GAAIyT,IAAmBzQ,EAAMa,KAC3B,OAAO,EACF,GAAI4P,IAAmBzQ,EAAMc,KAClC,OAAO,EACF,GAAI2P,IAAmBzQ,EAAMgB,QAClC,OAAO,GACF,GAAIyP,IAAmBzT,EAAGoE,KAC/B,OAAO,GACF,GAAIqP,IAAmBzQ,EAAMe,QAClC,OAAO,EAET,MAAM,IAAI5D,MAAM,2BAA2BsT,KA2BnBisB,CAA0B1/B,EAAIyT,GAsCxD,SAAS+pB,GACLkB,EAA8B7xB,GAChC,GAAI6xB,IAAmB58B,EAAa69B,OAClC,OAAO59B,EAAoBq8B,mBACtB,GAAIM,IAAmB58B,EAAa89B,QAA4B,MAAlBlB,EACnD,OApBJ,SAAwC7xB,GAEtC,OAAIlJ,QAAMc,QAAQ,gCACZoI,EACK9K,EAAoBq8B,mBAEtBr8B,EAAoBu8B,iBAGzBzxB,EACK9K,EAAoBs8B,mBAEtBt8B,EAAoBw8B,iBAQlBsB,CAA+BhzB,GACjC,GACH6xB,IAAmB58B,EAAayQ,UAChCmsB,IAAmB58B,EAAag+B,OAClC,OAAO/9B,EAAoBy8B,yBAE7B,MAAM,IAAIr+B,MAAM,gCAAgCu+B,KAGlD,SAAShB,GACLqC,EAAgCxC,EAChC1wB,GACF,MAAO,GAAGkzB,EAAa,MAAMA,EAAa,MAAMxC,KAAmB1wB,UCrQxDmzB,GAMXnuB,YAAYsV,EAAkB8Y,GAL9BluB,mBAAgB,CAAC,KAMfA,KAAKD,YAAcqV,EACnBpV,KAAKqN,oBAAsB4H,GAAiBjV,KAAKD,YAAY3K,QAC7D4K,KAAKI,SAAW,oDAEV8tB,yJAaH,MAIMC,GAAM,iBAiBNC,GAAQ,kBCNRC,GAQXvuB,YAAYsV,EAAkB8Y,GAP9BluB,mBAAgB,CAAC,KAIjBA,mBAAe,EACfA,mBAAe,EAGbA,KAAKD,YAAcqV,EACnBpV,KAAKqN,oBAAsB4H,GAAiBjV,KAAKD,YAAY3K,QAC7D4K,KAAKI,SAAW,kDAEV8tB,6JClDGI,GAOXxuB,YAAYC,GANZC,mBAAgB,CAAC,KACjBA,mBAAe,EACfA,mBAAe,EAKbA,KAAKD,YAAcA,EACnB,MAAMgU,EAAOhU,EAAY3K,OAEnBk1B,EAAWF,GAAY,KAAMrW,GAC7B/V,EAAQ+Q,GAAkBgF,GAC1B+W,WNNsB/W,EAAcyW,GAC5C,GAAa,IAATzW,EACF,MAAO,KAGT,IAAIhV,EAAS,GACb,IAAK,IAAIpJ,EAAI,EAAGA,EAAIoe,EAAMpe,IACxBoJ,GAAUyrB,EAAK70B,GACXA,EAAIoe,EAAO,IACbhV,GAAU,KAGd,OAAOA,EMNgBwvB,CAAgBxa,EAAMuW,GACrCM,EAAYN,EAASz0B,OAAO,GAC5BkJ,EAASgV,GAAQ,EAAI,KAAO,QAAQ6W,EAAU50B,KAAK,QAEzDgK,KAAKI,SAAW,kCAEVpC,8DACwB8sB,oDAEU/rB,uBCE5C,MAAMyvB,GAAYC,eAAaD,UA+BzBE,GAAuE,GAY7E,MAAMC,GACF/8B,QAAMC,UAAU,oCAeP+8B,WAAyBC,gBAwCpC/uB,YAAYurB,GAEV,GADAyD,QAhCM9uB,iBAAc,IAAI+uB,QAGlB/uB,qBAAkB,IAAIgvB,QAI9BhvB,kBAAe,IAAI+uB,QACX/uB,mBAAgB,EAOhBA,kBAAe,EAEfA,oBAAiB,EAGjBA,qBAAkB,EASlBA,wBAAoB,EA2YpBA,oBAAiB,EA6XjBA,eAAW,GApwBZpO,QAAMc,QAAQ,aACjB,MAAM,IAAItE,MAAM,yCAGlB,GAAa,MAATi9B,EAAe,CACjB,MAAMp9B,EAAKC,EAAgB0D,QAAMC,UAAU,kBAC3CmO,KAAKivB,cA1EoBjhC,EA0ES4D,QAAMC,UAAU,oBAzElC68B,KAGpBA,GAAa1gC,GAAgB,IAFpB0gC,GAAa1gC,IAyElBgS,KAAKqrB,MAAQ,IAAIjmB,GAAanX,GAC9B+R,KAAK3R,OAASJ,EAAGI,OACjB2R,KAAKkvB,qBAAsB,OAE3BlvB,KAAKqrB,MAAQA,EACbrrB,KAAKivB,YAAc,GACnBjvB,KAAKkvB,qBAAsB,EAC3BlvB,KAAK3R,OAASg9B,EAAMp9B,GAAGI,WAlFEL,EAoF3BgS,KAAKmvB,eAAiB,IAAI/D,GAAeprB,KAAKqrB,OAC9CrrB,KAAKovB,mBAnEoB,MAAvBx9B,QAAMy9B,OAAOC,OACR,KAED19B,QAAMy9B,OAAOC,OAAO/3B,OAAS3F,QAAMy9B,OAAOC,OAAOh4B,MACjDi4B,OAAOC,iBANc,IAOA,KAAO,KAgElCxvB,KAAKgV,QAAU,IAAIya,cAAYzvB,KAAM0vB,YAxD/B5vB,aACN,OAAO8uB,GAAiBe,aA0D1B7vB,aACE,OAAOE,KAAKgV,QAAQ4a,aAAe5vB,KAAK6vB,eAG1C/vB,MAAM8W,EAAuBvmB,EAAiB2N,GAK5C,IAJIpM,QAAMc,QAAQ,mCACdd,QAAMc,QAAQ,WAChBsN,KAAK8vB,uBAAuBlZ,GAEhB,cAAV5Y,GAAmC,MAAV4Y,EAC3B,MAAM,IAAIxoB,MACN,yEAGN,MAAM2hC,EAAS,CAACvN,GAAIxiB,KAAK2vB,cAIzB,OAHA3vB,KAAKgV,QAAQnR,IACTksB,EACA,CAAC1/B,MAAAA,EAAO2N,MAAAA,EAAO4Y,OAAAA,EAAQ2U,MAAOx7B,EAAa69B,OAAQoC,SAAU,IAC1DD,EAITjwB,SAASiwB,GACP,GAAI/vB,KAAKgV,QAAQib,IAAIF,GAAS,CAE5B,OADmB/vB,KAAKgV,QAAQxV,IAAIuwB,GAClBC,SAEpB,OAAO,EAITlwB,OAAOiwB,GACW/vB,KAAKgV,QAAQxV,IAAIuwB,GACzBC,WAIVlwB,OAAOiwB,GACL,GAAI/vB,KAAKgV,QAAQib,IAAIF,GAAS,CACZ/vB,KAAKgV,QAAQxV,IAAIuwB,GACzBC,YAIZlwB,KACIiwB,EAAgBnZ,EAAuBvmB,EAAiB2N,EACxDgyB,GAIF,GAHIp+B,QAAMc,QAAQ,UAChBsN,KAAK8vB,uBAAuBlZ,GAEhB,cAAV5Y,EACF,MAAM,IAAI5P,MACN,yEAGN4R,KAAKgV,QAAQnR,IACTksB,EAAQ,CAAC1/B,MAAAA,EAAO2N,MAAAA,EAAO4Y,OAAAA,EAAQ2U,MAAOx7B,EAAa69B,OAAQoC,SAAAA,IAGjElwB,8BAA8BowB,GAC5BlwB,KAAKmwB,YAAYD,EAAWH,QAG9BjwB,SAASiwB,GACP,MAAM/a,EAAUhV,KAAKgV,QAAQxV,IAAIuwB,IAC3BnZ,OAACA,EAAM5Y,MAAEA,EAAKoyB,mBAAEA,EAAkBv6B,MAAEA,EAAKxF,MAAEA,EAAKyK,SAAEA,GAAYka,EAKpE,GAAa,MAATnf,EAAe,CACjB,IAAIO,EAEFA,EADE0E,EACQ,IAAIuzB,GAAqBh+B,EAAOggC,IAEhC,IAAIpC,GAAe59B,EAAOggC,IAEtC,MAAMpiB,EACFjO,KAAKswB,gBAAgBl6B,EAAS,CAAC,CAAC25B,OAAAA,EAAQ1/B,MAAAA,EAAO2N,MAAAA,IAASA,GACtDrH,EAAOqJ,KAAKuwB,SAAStiB,EAAI8hB,QAE/B,OADA/vB,KAAKwwB,8BAA8BviB,GAC5BtX,EAET,GAAc,MAAVigB,EACF,OAAO5W,KAAKywB,qBAAqBV,GAEnC,GAAc,WAAV/xB,EACF,OAAO4Y,EAET,MAAM8Z,EAAyC,MAArB1wB,KAAK2wB,aAC/B,IAAItS,EAKA9W,EACJ,GALImpB,IACFrS,EAAQ9tB,OAAKqgC,OAID,cAAV5yB,EAAuB,CACzB,MAAM6yB,EACF7wB,KAAKuwB,SAASH,EAAmBU,KAAKf,QACpCgB,EACF/wB,KAAKuwB,SAASH,EAAmBY,KAAKjB,QAC1CxoB,EAASsF,eAAaokB,uBAAuBJ,EAAYE,QAEzDxpB,EAASvH,KAAKkxB,qBAAqBnB,GAMrC,OAHIW,IACF1wB,KAAKmxB,gBAAkB5gC,OAAKqgC,MAAQvS,GAE/Bre,KAAKywB,qBAAqBV,EAAQxoB,GAG3CzH,WAAWiwB,GACT,GAAI/vB,KAAKoxB,YAAYnB,IAAIF,GAAS,CAChC,MAAMsB,EAAcrxB,KAAKoxB,YAAY5xB,IAAIuwB,GACzC,OAAO,IAAIlkB,SAAoBC,GAAWulB,EAAY/kB,KAAKR,KAE7D,MAAMkJ,EAAUhV,KAAKgV,QAAQxV,IAAIuwB,IAC3BnZ,OAACA,EAAMvmB,MAAEA,EAAKwF,MAAEA,EAAKmI,MAAEA,EAAKoyB,mBAAEA,EAAkBt1B,SAAEA,GAAYka,EAKpE,GAAa,MAATnf,EAAe,CACjB,IAAIO,EAEFA,EADE0E,EACQ,IAAIuzB,GAAqBh+B,EAAOggC,IAEhC,IAAIpC,GAAe59B,EAAOggC,IAEtC,MAAMpiB,EACFjO,KAAKswB,gBAAgBl6B,EAAS,CAAC,CAAC25B,OAAAA,EAAQ1/B,MAAAA,EAAO2N,MAAAA,IAASA,GACtDrH,EAAOqJ,KAAKsxB,KAAKrjB,EAAI8hB,QAE3B,OADA/vB,KAAKwwB,8BAA8BviB,GAC5BtX,EAGT,GAAc,MAAVigB,EACF,OAAO5W,KAAKywB,qBAAqBV,GAGnC,IAAKn+B,QAAMc,QAAQ,iCACsB,IAArCd,QAAMC,UAAU,iBAClB,MAAM,IAAIzD,MACN,gGAIN,IACImjC,EAmBAtV,EApBArlB,EAAsB,KAG1B,GAAc,cAAVoH,GAAyBpM,QAAM4N,IAAI,0BAA2B,CAEhE+xB,EAAoBvxB,KAAKwxB,OAAOzB,GAChC,MAAM0B,EAAUzxB,KAAKgV,QAAQxV,IAAI+xB,EAAkBxB,QAEnDn5B,EAASoJ,KAAKqrB,MAAMqG,wBAChBD,EAAQr5B,WAAYu5B,EAA0BthC,IAYpD,GATA2P,KAAKoxB,YAAYvtB,IAAIksB,EAAQ,IAEf,cAAV/xB,SAEIgC,KAAKqrB,MAAMuG,wBAKL,cAAV5zB,EAAuB,CACzB,MAAM6zB,QAAWhmB,QAAQimB,IAAI,CAC3B9xB,KAAKsxB,KAAKlB,EAAmBU,KAAKf,QAClC/vB,KAAKsxB,KAAKlB,EAAmBY,KAAKjB,UAG9Bc,EAAagB,EAAG,GAChBd,EAAac,EAAG,GACtB5V,EAAOpP,eAAaokB,uBAChBJ,EAA4BE,QAC3B,GAAc,MAAVn6B,EACTqlB,EAAOjc,KAAKkxB,qBAAqBnB,OAC5B,CACL,MAAMz/B,EAAOC,OAAKC,cAAcH,GAChC4rB,EAAOjc,KAAKqrB,MAAM9mB,gCAAgC3N,EAAQtG,GAK5D,GAHyB,MAArBihC,GACFvxB,KAAKwwB,8BAA8Be,GAEvB,MAAV36B,EAAgB,CAClB,MAAM3I,EAAK+R,KAAKqrB,MAAMp9B,GACtB+T,EAAwB/T,GAAI,IAAMA,EAAGuY,aAAa5P,KAEpD,MAAMm7B,EAAY/xB,KAAKywB,qBAAqBV,EAAQ9T,GAE9CoV,EAAcrxB,KAAKoxB,YAAY5xB,IAAIuwB,GAYzC,OAXA/vB,KAAKoxB,YAAYY,OAAOjC,GAGxBsB,EAAYxzB,SAAQiO,GAAWA,EAAQimB,KACnC/xB,KAAKiyB,gBAAgBhC,IAAIF,KAC3B/vB,KAAKiyB,gBAAgBD,OAAOjC,GACxB/vB,KAAKmwB,YAAYJ,IACnBL,WAASwC,aAAanC,EAAQ/vB,MAEhCA,KAAK6vB,kBAEAkC,EAGTjyB,WAA2BhC,GACzB,MAAMnH,EAAOqJ,KAAKuwB,SAASzyB,EAAEiyB,QAC7B,IAAI9S,EAActmB,EAClB,GAAgB,WAAZmH,EAAEE,MACJ,IAEEif,EAAetmB,EAAsBpB,KAAIyF,GAAKzK,OAAK4hC,aAAan3B,KAChE,SACA,MAAM,IAAI5M,MAAM,oDAGpB,OAAOwI,SAAOkH,EAAEzN,MAAsByN,EAAEE,MAAOif,GAIzCnd,uBAAuB8W,GAC7B,GAAc,MAAVA,EAGJ,IAAK,IAAIjhB,EAAI,EAAGA,EAAIihB,EAAOxhB,OAAQO,IAAK,CACtC,MAAM1C,EAAM2jB,EAAOjhB,GACnB,IAAKy8B,EAA4Bn/B,GAAM,CACrC,GAAIrB,QAAMc,QAAQ,gCAChB,MAAMtE,MACF,aAAa6E,kJAInB,MAAM7E,MAAM,aAAa6E,6CAKvB6M,qBAAqBiwB,GAC3B,MAAM1/B,MAACA,EAAK2N,MAAEA,EAAKlD,SAAEA,GAAYkF,KAAKgV,QAAQxV,IAAIuwB,GAC5Cz/B,EAAOC,OAAKC,cAAcH,GAChC,GAAIuB,QAAMc,QAAQ,gCAAiC,CACjD,MAAM2/B,EAAYryB,KAAKwxB,OAAOzB,GACxB0B,EAAUzxB,KAAKgV,QAAQxV,IAAI6yB,EAAUtC,QACrC9T,EAAOjc,KAAKqrB,MACAiH,gCACGb,EAAQr5B,WAAYu5B,EAA0BthC,IACjD0qB,SAAS,EAAGzqB,GAI9B,OAFA0P,KAAKwwB,8BAA8B6B,GAE5BpW,EAGT,MAAMsW,EACF3gC,QAAMc,QAAQ,gBAA8B,IAAboI,EAC7BiF,EACFwyB,EAAyBC,EAAwBniC,GAASA,EACxD+F,EAAUm8B,EACZ,IAAI9xB,GAAyBV,GAC7B,IAAIQ,GAAmBR,GACrBtB,EAASuB,KAAKswB,gBAChBl6B,EAAS,CAAC,CAAC/F,MAAO0P,EAAa/B,MAAAA,EAAO+xB,OAAAA,IAAU,WAC9C0B,EAAUzxB,KAAKgV,QAAQxV,IAAIf,EAAOsxB,QAClC9T,EACFjc,KAAKqrB,MACA3mB,gDACG+sB,EAAQr5B,QAASq5B,EAAQvxB,SAAS,GAAIuxB,EAAQvxB,SAAS,IAC1D6a,SAAS,EAAGzqB,GAGrB,OAFA0P,KAAKwwB,8BAA8B/xB,GAE5Bwd,EAGTnc,iBACE,OAAOlO,QAAMC,UAAU,iDAAmD,EAG5EiO,WAAWmb,GACT,MAAMwX,EAAkBzyB,KAAK2wB,aACvB+B,EAA+B,GAErC,IAAIC,GAAgB,EACW,MAA3B3yB,KAAK4yB,oBACP5yB,KAAK4yB,mBAAqBF,EAC1BC,GAAgB,GAEhB3yB,KAAK2wB,aAAarkB,KAAKomB,GAEzB1yB,KAAK2wB,aAAe+B,EAEpBzX,IAGA,MAAM4X,EACFtiC,OAAKuiC,QAAQ9yB,KAAK2wB,aAAap7B,KAAKyF,GAAkBA,EAAE6M,SACnDkrB,QAAO/3B,GAAU,MAALA,IACfg4B,EACFziC,OAAKuiC,QAAQ9yB,KAAK2wB,aAAap7B,KAAKyF,GAAkBA,EAAEoS,QACnD2lB,QAAO/3B,GAAU,MAALA,IAErBgF,KAAK2wB,aAAe8B,EAEhBE,IACF3yB,KAAK4yB,mBAAqB,MAG5B,MAAM3kB,EAAuB,CAC3BglB,aAAcjzB,KAAKizB,aACnB9B,eAAgBnxB,KAAKmxB,eACrB+B,SAAU,KACVC,OAAQ,MAGV,GAAIvhC,QAAMC,UAAU,iDAAmD,EAAG,CACxE,MAAMqhC,QAAiBrnB,QAAQimB,IAAIe,GAEnC5kB,EAAc,SAAI1d,OAAK6iC,IAAIF,GAC3BjlB,EAAyB,oBAAI,IACzBilB,EAAS39B,KAAI,CAACyF,EAAGrF,MAAQyX,KAAM4lB,EAA0Br9B,GAAI09B,GAAIr4B,MAC5DzF,KAAIyF,GAAK,GAAGA,EAAEoS,SAASpS,EAAEq4B,OACzBr9B,KAAK,WAEdiY,EAAc,SAAI,CAChBtb,MAAO,6DAMX,OAFAqN,KAAKizB,aAAe,EACpBjzB,KAAKmxB,eAAiB,EACfljB,EAETnO,SACE,MAAO,CACLwzB,YAAY,EACZC,cAAevzB,KAAKuzB,cACpBC,uBAAwBxzB,KAAKmvB,eAAe9B,kBAC5CoG,kBAAmBzzB,KAAKmvB,eAAe7B,cAInCxtB,aACN,OAAIlO,QAAMC,UAAU,iDAAmD,EAC9DmO,KAAKqrB,MAAMhjB,aAEb,CAACqrB,QAASnjC,OAAKqgC,MAAO+C,MAAO,MAG9B7zB,SAAS+H,GACf,OAAIjW,QAAMC,UAAU,iDAAmD,GACrEmO,KAAKqrB,MAAM/iB,WACJT,IAERA,EAAwB8rB,MAAQpjC,OAAKqgC,MAC/B/oB,GAGD/H,mBAAmB+H,GACzB,GAAIjW,QAAMC,UAAU,iDAAmD,EACrE,OAAOmO,KAAKqrB,MAAMuI,uBAAuB/rB,GAE3C,MAAMgsB,EAAahsB,EACnB,OAAOgsB,EAAWF,MAAQE,EAAWH,QAevC5zB,YAAYiwB,EAAgB+D,GAAQ,GAClC,GAAI9zB,KAAKiyB,gBAAgBhC,IAAIF,GAC3B,OAAO,EAIT,IAAK/vB,KAAKgV,QAAQib,IAAIF,GACpB,OAAO,EAYT,GANI+D,EACF9zB,KAAKgV,QAAQxV,IAAIuwB,GAAQC,SAAW,EAEpChwB,KAAKgV,QAAQxV,IAAIuwB,GAAQC,YAGtB8D,GAAS9zB,KAAKgV,QAAQxV,IAAIuwB,GAAQC,SAAW,EAChD,OAAO,EAGT,GAAIhwB,KAAKoxB,YAAYnB,IAAIF,GAGvB,OAFA/vB,KAAKiyB,gBAAgB8B,IAAIhE,GACzB/vB,KAAK6vB,kBACE,EAGT7vB,KAAKg0B,eAAejE,GACpB,MAAMK,mBAACA,GAAsBpwB,KAAKgV,QAAQxV,IAAIuwB,GAQ9C,OAP0B,MAAtBK,IACFpwB,KAAKmwB,YAAYC,EAAmBU,KAAKf,OAAQ+D,GACjD9zB,KAAKmwB,YAAYC,EAAmBY,KAAKjB,OAAQ+D,IAGnD9zB,KAAKgV,QAAQgd,OAAOjC,IAEb,EAGDjwB,eAAeiwB,GACrB,MAAM33B,QAACA,EAAO4F,MAAEA,EAAKkC,SAAEA,EAAQqrB,MAAEA,EAAKzwB,SAAEA,EAAQjF,MAAEA,GAC9CmK,KAAKgV,QAAQxV,IAAIuwB,GACfkE,EAAMp+B,GAASA,EAAMq+B,YAAcnE,EACnCC,EAAWhwB,KAAKm0B,aAAa30B,IAAIy0B,GAEnCjE,EAAW,EACbhwB,KAAKm0B,aAAatwB,IAAIowB,EAAKjE,EAAW,IAEtChwB,KAAKm0B,aAAanC,OAAOiC,GACV,MAAX77B,IACF4H,KAAKuzB,eAAiBvzB,KAAK+rB,aAAa7rB,EAAUlC,GAClDgC,KAAKmvB,eAAeiF,eAAeh8B,EAAS8H,EAAUqrB,EAAOzwB,KAIjE,MAAMka,EAAUhV,KAAKgV,QAAQxV,IAAIuwB,GACjC/a,EAAQ5c,QAAU,KAClB4c,EAAQ9U,SAAW,KACnB8U,EAAQla,UAAW,EACnBka,EAAQnf,MAAQ,KAGlBiK,WAAWiwB,GAET,OADA/vB,KAAKq0B,YAAYtE,GACV/vB,KAAKgV,QAAQxV,IAAIuwB,GAAQ33B,QAOlC0H,YAAYiwB,GACV,OAAO/vB,KAAKgV,QAAQxV,IAAIuwB,GAU1BjwB,mBACI4U,EACA4f,EAAgB3F,IAClB,OAAO/8B,QAAMc,QAAQ,sBACjBgiB,EAAO6f,OACH3f,GAAmD,MAA1C5U,KAAKgV,QAAQxV,IAAIoV,EAAMmb,QAAQ33B,SACpC7H,OAAKC,cAAcokB,EAAMvkB,OAASikC,IAGhDx0B,kBACE,OAAOE,KAAKqrB,MAGdvrB,MAAM00B,GACJ3nB,eAAaxG,KACT,yEAEJ,MAAMouB,EAAWD,EAAUE,WAC3B,OAAOlG,GAAUgG,EAAUnkC,MAAOokC,GAG5B30B,cAAcqM,EAAegJ,EAAYnX,GAC/C,MAAM5H,EAAU,IAAIi4B,GAAqBliB,EAAE9b,MAAO8kB,GAC5Cwf,EAAU30B,KAAK40B,cAAcx+B,EAAS,CAAC+V,GAAInO,GACjD,OAAO0xB,WAASmF,qBACZF,EAAQ5E,OAAQ4E,EAAQtkC,MAAOskC,EAAQ32B,OAM7C8B,IAAsBqM,GAEpB,GAAInM,KAAK80B,mBAAmB,CAAC3oB,KAAmB,cAAZA,EAAEnO,MAAuB,CAC3D,MAAM+2B,EACFvM,GAAiBxoB,KAAKgV,QAAQxV,IAAI2M,EAAE4jB,QAAQnZ,QAChD,OAAO5W,KAAKg1B,WAAW7oB,EAAE9b,MAAO8b,EAAEnO,MAAO+2B,GAG3C,GAAInjC,QAAMc,QAAQ,+BAChB,OAAOsN,KAAKi1B,cAAc9oB,EAAG+oB,GAAc/oB,EAAEnO,OAG/C,MAAM5H,EAAU,IAAI63B,GAAe9hB,EAAE9b,MAAO6kC,IACtCP,EAAU30B,KAAK40B,cAAcx+B,EAAS,CAAC+V,IAC7C,OAAOujB,WAASmF,qBACLF,EAAQ5E,OAAQ4E,EAAQtkC,MAAOskC,EAAQ32B,OAGpD8B,eACIzP,EAAiB2N,EACjB4Y,GACF,IAAImZ,EACJ,GAAc,WAAV/xB,GAAgC,MAAV4Y,GAAkBA,EAAOxhB,OAAS,GACxD7E,OAAK4kC,SAASve,EAAO,IAAK,CAC5B,MAAMwe,EACDxe,EAA0BrhB,KAAIyF,GAAKzK,OAAKsoB,aAAa7d,KAE1D+0B,EAAS/vB,KAAKq1B,MAAMD,EAAe/kC,EAAO2N,QAE1C+xB,EAAS/vB,KAAKq1B,MAAMze,EAAsBvmB,EAAO2N,GAInD,OADAgC,KAAKgV,QAAQxV,IAAIuwB,GAAQxE,MAAQ,KAC1B,CAACwE,OAAAA,EAAQ1/B,MAAAA,EAAO2N,MAAAA,GAGjB8B,WACJzP,EAAiB2N,EAAiB4Y,GACpC,MAAMmZ,OAACA,GAAU/vB,KAAKs1B,eAAejlC,EAAO2N,EAAO4Y,GACnD,OAAO8Y,WAASmF,qBAAqB9E,EAAQ1/B,EAAO2N,EAAOgC,MAG7DF,aAAa8U,GACX,MAAMxe,EAAU,IAAIk4B,GAAc1Z,EAAMvkB,OACxC,OAAO2P,KAAKswB,gBAAgBl6B,EAAS,CAACwe,GAAQA,EAAM5W,OAGtD8B,WAAW8U,GACT,MAAMxe,EAAU,IAAIi0B,GAAYzV,EAAMvkB,OAEtC,OAAO2P,KAAKswB,gBACRl6B,EAAS,CAACwe,GAAQA,EAAM5W,MAAO,MAFC,GAM9B8B,cAAc8U,EAAmB2gB,GACvC,MAAMC,EAAe,CACnBC,EAAuB7gB,EAAMvkB,UAC1BqlC,EAAuB9gB,EAAMvkB,QAE5BslC,EAAsB,CAC1B33B,MAAO4W,EAAM5W,MACb3N,MAAOmlC,EACPzF,OAAQnb,EAAMmb,QAEV6F,EAAiB,CACrBH,EAAuBF,MAAgBG,EAAuBH,IAG1Dn/B,EAAU,IAAI80B,GAAqB0K,EAAgBJ,GAEnD/2B,EAASuB,KAAKswB,gBAChBl6B,EAAS,CAACu/B,GAAU/gB,EAAM5W,MAAO,MAFC,GAItC,MAAO,CAAC+xB,OAAQtxB,EAAOsxB,OAAQ1/B,MAAOklC,EAAYv3B,MAAOS,EAAOT,OAG1D8B,OAAOiwB,GACb,MAAM/a,EAAUhV,KAAKgV,QAAQxV,IAAIuwB,IAC3Bj1B,SAACA,EAAQzK,MAAEA,EAAK2N,MAAEA,GAASgX,EAC3Bra,EACF63B,EAAwBniC,GAC5B,IAAI+F,EAEFA,EADE0E,EACQ,IAAIwF,GAA0B3F,GAE9B,IAAIkF,GAAoBlF,GAMpC,MAAO,CAACqD,MAAAA,EAAO3N,MAAAA,EAAO0/B,OAHV/vB,KAAKswB,gBACbl6B,EAAS,CAAC,CAAC/F,MAAOsK,EAAWqD,MAAAA,EAAO+xB,OAAAA,IAAU/xB,EAC9C,MAHkC,GAIJ+xB,QAGpCjwB,gBACI1J,EAAuBse,EAAsBmhB,EAC7CC,EACAC,GAAgC,GAClC,MAAMt3B,EAASuB,KAAKs1B,eAAel/B,EAAQ2J,YAAa81B,GAClDG,EAAUh2B,KAAKgV,QAAQxV,IAAIf,EAAOsxB,QAIxC,GAHI35B,EAAQ6/B,eACVD,EAAQl7B,UAAW,GAEjB1E,EAAQ8/B,mBAAqBC,EAAuBl2B,MAAO,CAC7D,MAAMm2B,EAAazE,EAA0Bv7B,EAAQ2J,aAKrDi2B,EAAQ91B,SAAWk2B,EAAW7gC,KAAIyF,GAAS,EAAJA,IAKzC,GAH2B,MAAvB5E,EAAQigC,cACVL,EAAQzK,MAAQn1B,EAAQigC,aAEe,IAArC9lC,OAAKC,cAAciO,EAAOpO,OAK5B,OAFA2lC,EAAQpf,OACJrmB,OAAKqlB,uBAAuBnX,EAAOT,MAAoB,GACpDS,EAGT,MAAM63B,EAA8B,GAC9BC,EAA2B7hB,EAAOnf,KAAIqf,IAC1C,GAAoB,cAAhBA,EAAM5W,MACR,MAAM,IAAI5P,MACN,mIAKN,IAAI4mB,EAAUhV,KAAKgV,QAAQxV,IAAIoV,EAAMmb,QAErC,GAAuB,MAAnB/a,EAAQ5c,QAAiB,CAC3B,IAAKhC,EAAQoX,cACTjd,OAAKC,cAAcokB,EAAMvkB,QACrBuB,QAAMC,UAAU,6BAMtB,MAAO,CACLxB,MAAOukB,EAAMvkB,MACb2kB,QAAS,KACT7H,WAAW,EACXqpB,cAAexhB,EAAQ4B,QAMvBxgB,EAAQoX,eACVwH,EAAQla,UAAW,EACnBka,EAAQ3kB,MAAQukB,EAAMvkB,YAEnB,KAAM2kB,EAAQla,YAAe1E,EAAQoX,aAC1CoH,EAAQI,EAAQla,SAAWkF,KAAKy2B,aAAa7hB,GAClB5U,KAAK02B,WAAW9hB,GAC3C0hB,EAAchqB,KAAKsI,GACnBI,EAAUhV,KAAKgV,QAAQxV,IAAIoV,EAAMmb,aAC5B,GACH/a,EAAQla,WACP67B,EAAyB3hB,EAAQ3kB,MAAOukB,EAAMvkB,OAAQ,CAQzD,MAAMumC,EAAahiB,EACb+M,EAAc/M,EAAMvkB,MAE1BukB,EAAMvkB,MAAQ2kB,EAAQ3kB,MACtBukB,EAAQ5U,KAAK62B,cAAcjiB,EAAiB+M,GAC5C2U,EAAchqB,KAAKsI,GACnBI,EAAUhV,KAAKgV,QAAQxV,IAAIoV,EAAMmb,QAEjC6G,EAAWvmC,MAAQsxB,EAIrB,OADA3hB,KAAKq0B,YAAYzf,EAAMmb,QAChB,CAAC1/B,MAAOukB,EAAMvkB,MAAO2kB,QAAAA,EAAS7H,WAAW,MAGlDnN,KAAKq0B,YAAY51B,EAAOsxB,QACxB,MAAM+G,EACW,CAACzmC,MAAOoO,EAAOpO,MAAO2kB,QAASghB,EAAS7oB,WAAW,GAC9D8mB,WnDhfN79B,EAAuBse,EAAsBjW,GAC/C,IAAIs4B,EAAY,GAChBriB,EAAOsiB,OAAOv4B,GAAQZ,SAAQsO,IAC5B,MAAM8qB,EAAyB,MAAb9qB,EAAE6I,SAAsC,MAAnB7I,EAAE6I,QAAQnf,OAC7CsW,EAAE6I,QAAQnf,MAAM8Z,WAAa,EAEjC,GAAIvZ,EAAQiX,sBAAwBlB,EAAEgB,UAAW,CAC/C,MAAM+pB,EAAY/qB,EAAE6I,QAAQ9U,UACtBiU,gBAACA,EAAe7G,aAAEA,GACpB6pB,GACI/gC,EAAQoX,aAAcrB,EAAE9b,MAAO6mC,GACvC,IAAIE,EAAQ,GAAIC,EAAQ,GAAIC,EAAS,GACrC,GAA4B,IAAxBhqB,EAAalY,QAAgBgB,EAAQoX,aAAc,CACrD,MAAMgD,EACF,CAAC9f,KAAKC,KAAKumC,EAAU,GAAK,GAAIxmC,KAAKC,KAAKumC,EAAU,GAAK,IAC3DE,EAAQ,GAAG5mB,EAAe,GAAK,KAAKA,EAAe,GAAK,SACnD,GAA4B,IAAxBlD,EAAalY,QAAiBgB,EAAQoX,cAE1C,GAAIF,EAAalY,OAAS,IAAMgB,EAAQoX,aAAc,CAC3D,MAAMvO,EAAU1O,OAAK2O,eAAeoO,GACpCgqB,EAAS,GAAGr4B,EAAQ,KAAOi4B,EAAU,MACjCj4B,EAAQA,EAAQ7J,OAAS,KAAO8hC,EAAU,WAJ9CG,EAAQ,GAAG/pB,EAAa,GAAK,KAAKA,EAAa,GAAK,IAMtD,MAAMuX,EAAQ1Y,EAAE9b,MAAM+E,OAChBmiC,EACQ,IAAV1S,GAAet0B,OAAKqL,YAAYuQ,EAAE9b,MAAO6mC,GACvCM,EAA2C,IAAhCjnC,OAAKC,cAAc2b,EAAE9b,OAChCye,EACFjC,eAAaD,iBAAiBT,EAAE9b,MAAOoO,EAAOpO,OAC5ConC,GAAwBrhC,EAAQoX,cAClCqX,IAAUpmB,EAAOpO,MAAM+E,QACvB7E,OAAKqL,YAAYs7B,EAAWz4B,EAAOuW,QAAQ9U,UACzCw3B,EAA2BthC,EAAQoX,cAAgBqX,EAAQ,EAC7D,GACA,GAAGqS,EAAU,GAAK,KAAKA,EAAU,GAAK,IAmB1CH,GAAa,GAAGlS,KAAS4S,KAAwBtjB,KAC7C7G,EAAalY,UAAUoiC,KAAY1oB,KACnCyoB,KAA8BH,KAASC,KAASC,KAChDI,KAA4BT,QAC3B,CACL,MAAM/2B,EAAWiM,EAAEgB,UAAY,UAAYhB,EAAE6I,QAAQ9U,SACrD62B,GAAa,GAAG5qB,EAAE9b,SAAS6P,KAAY+2B,QAG3C,MAAMU,EAAcvhC,EAAQgK,SAC5B,IAAI6zB,EAAM79B,EAAQwhC,YAAYxqB,KAI9B,OAFA6mB,GAAO,IAAM8C,EAAY,IAAMY,EAC3B,GAAG/lC,QAAMC,UAAU,mBAChBoiC,EmD6aO4D,CAAyBzhC,EAASmgC,EAAYO,GACpDgB,EAAS93B,KAAK+3B,iBAAiB9D,GAAK,anD9wB1C5I,EAAqBj1B,EAAuBse,EAC5CjW,GACF,MAAMu5B,EAA0BtjB,EAAOnf,KAAI,CAACqf,EAAOjf,KACjD,MAAMsX,EAAuB,CAC3BC,aAAc0H,EAAMvkB,MACpB6P,SAAU0U,EAAMzH,UAAY,KAAOyH,EAAMI,QAAQ9U,SACjDiN,UAAWyH,EAAMzH,UACjBrS,UAAU8Z,EAAMzH,WAAoByH,EAAMI,QAAQla,SAClD6U,WAAY,MAMd,OAJqB,MAAjBiF,EAAMI,SAA0C,MAAvBJ,EAAMI,QAAQnf,OACvC+e,EAAMI,QAAQnf,MAAM8Z,WAAa,IACnC1C,EAAU0C,WAAaiF,EAAMI,QAAQnf,MAAM8Z,YAEtC,CAACvC,KAAMhX,EAAQ6hC,cAActiC,GAAIsX,UAAAA,MAEpCirB,EAAeF,EAAWziC,KAAI4W,GAAKA,EAAEc,YACrCc,EAA0B,CAC9Bb,aAAczO,EAAOpO,MACrB6P,SAAUzB,EAAOuW,QAAQ9U,SACzBiN,WAAW,EACXrS,SAAU2D,EAAOuW,QAAQla,SACzB6U,WAAY,MAERwoB,EAASC,GAA2BJ,EAAYjqB,EAAc3X,GAE9DiiC,EAAehN,EAAMn1B,cAAciiC,GAGzC,IAAIG,EAA+B,KACnC,MAAMC,EAASlN,EAAMxyB,mBAAmBw/B,EAAc,OAAO,GACpB,IAArCzmC,QAAMC,UAAU,mBAClBymC,EAASjN,EAAMxyB,mBAAmBw/B,EAAc,YAAY,IAI9D,MAAMjvB,GAAc,EACdovB,EAA2D,GAC3DC,EAA4D,GAC5DC,EAA+D,GACrE,IAAK,IAAI/iC,EAAI,EAAGA,EAAIS,EAAQ6hC,cAAc7iC,OAAQO,IAAK,CACrD,MAAMgjC,EAAUviC,EAAQ6hC,cAActiC,GACtC6iC,EAAiBG,GACbtN,EAAMxyB,mBAAmBw/B,EAAcM,EAASvvB,GACpDovB,EAAiB,SAASG,KACtBtN,EAAMxyB,mBAAmBw/B,EAAc,SAASM,IAAWvvB,GAC3DhT,EAAQiX,sBACVorB,EAAkB,GAAGE,UAAkBtN,EAAMxyB,mBACzCw/B,EAAc,GAAGM,SAAgBvvB,GACrCsvB,EAAqB,GAAGC,aAAqBtN,EAAMxyB,mBAC/Cw/B,EAAc,GAAGM,YAAmBvvB,IAI5C,IAAIwvB,EACAC,EACAC,EACA1iC,EAAQiX,sBACVurB,EACIvN,EAAMxyB,mBAAmBw/B,EAAc,WAAYjvB,GACvD0vB,EACIzN,EAAMxyB,mBAAmBw/B,EAAc,kBAAmBjvB,GAC9DyvB,EACIxN,EAAMxyB,mBAAmBw/B,EAAc,cAAejvB,IAG5D,MAAM2vB,EAAiD,GAQvD,OAPI3iC,EAAQqX,gBACVrX,EAAQqX,eAAe5P,SAAQ,CAAC7C,EAAGrF,KACjCojC,EAAuBpjC,GACnB01B,EAAMxyB,mBAAmBw/B,EAAcr9B,EAAEoS,KAAMhE,MAIhD,CACLhT,QAAAA,EACA+hC,OAAAA,EACAE,aAAAA,EACAG,iBAAAA,EACAO,uBAAAA,EACAb,aAAAA,EACAnqB,aAAAA,EACAuqB,OAAAA,EACAC,OAAAA,EACAE,kBAAAA,EACAC,qBAAAA,EACAE,iBAAAA,EACAE,wBAAAA,EACAD,oBAAAA,GmDurBSG,CACHh5B,KAAKqrB,MAAOj1B,EAASmgC,EAAYO,KAEjCpG,EAAyC,MAArB1wB,KAAK2wB,aAC/B,IAAI9oB,EACA6oB,IACF7oB,EAAQ7H,KAAKi5B,uBnDvpBf5N,EAAqByM,EAAqBpjB,EAC1CjW,EAAoBq3B,GACjBgC,EAAO1hC,QAAQiX,sBAClBmH,GAAyBsjB,EAAOI,aAAcxjB,GAC9CF,GAAyB,CAACsjB,EAAO/pB,cAAe,CAACtP,KAGnD,MAAMy6B,EAASz6B,EAAOuW,QAAQ5c,QACxBqX,EAAchR,EAAOuW,QAAQ9U,SAC/BzB,EAAOuW,QAAQla,SACjBuwB,EAAM8N,6BAA6BD,EAAQzpB,EAAY,GAAIA,EAAY,IAEvE4b,EAAM+N,uBAAuBF,EAAQzpB,EAAY,GAAIA,EAAY,IAEnE4b,EAAMriB,WAAW8uB,EAAOO,cAGiB,IAArCzmC,QAAMC,UAAU,kBACI,OAAlBimC,EAAOQ,QACTjN,EAAMp9B,GAAGorC,UAAUvB,EAAOQ,OAAQgB,EAAAA,GAGhB,OAAlBxB,EAAOS,QACTlN,EAAMp9B,GAAGorC,UAAUvB,EAAOS,OAAQgB,KAIpC7kB,EAAO7W,SAAQ,CAAC+W,EAAOjf,KACrB,MAAMgjC,EAAUb,EAAO1hC,QAAQ6hC,cAActiC,GACvC6jC,EAAS1B,EAAOU,iBAAiBG,GACjCc,EAAe3B,EAAOU,iBAAiB,SAASG,KAChDe,EAAc5B,EAAOW,kBAAkB,GAAGE,UAC1CgB,EAAiB7B,EAAOY,qBAAqB,GAAGC,aAEtD,GAAIe,EAAa,CACf,MAAMpsB,aAACA,GAAgB6pB,GACnBW,EAAO1hC,QAAQoX,aAAcoH,EAAMvkB,MAAOukB,EAAMI,QAAQ9U,UAC5D,OAAQoN,EAAalY,QACnB,KAAK,EACHi2B,EAAMp9B,GAAG2rC,WAAWF,EAAa,IAAItU,WAAW9X,IAChD,MACF,KAAK,EACH+d,EAAMp9B,GAAG4rC,WAAWH,EAAa,IAAItU,WAAW9X,IAChD,MACF,KAAK,EACH+d,EAAMp9B,GAAG6rC,WAAWJ,EAAa,IAAItU,WAAW9X,IAChD,MACF,KAAK,EACH+d,EAAMp9B,GAAG8rC,WAAWL,EAAa,IAAItU,WAAW9X,KAWtD,GALIqsB,GACFtO,EAAMp9B,GAAG+rC,UACLL,EAAgB/kB,EAAMI,QAAQ9U,SAAS,GAAI0U,EAAMI,QAAQ9U,SAAS,IAG1D,MAAVs5B,EAKJ,GAAI5kB,EAAMzH,UAER,GAAI5c,OAAKC,cAAcokB,EAAMvkB,OAAS,EACpCg7B,EAAMp9B,GAAGorC,UAAUG,EAAQ5kB,EAAM4hB,cAAc,QAC1C,CACL,IAAIva,EAAOrH,EAAM4hB,cACXva,aAAgB5a,eACpB4a,EAAO,IAAI5a,aAAa4a,IAE1BoP,EAAMp9B,GAAGgsC,WAAWT,EAAQvd,QAML,MAAvBrH,EAAMI,QAAQnf,OAAiC,MAAhB4jC,GACjCpO,EAAMp9B,GAAGgL,UAAUwgC,EAAc7kB,EAAMI,QAAQnf,MAAM8Z,YAGvD0b,EAAM6O,sBAAsBtlB,EAAMI,QAAQ5c,QAASohC,EAAQ7jC,MAG7D,MAAMwkC,EAAcrC,EAAOc,iBAC3B,GAAIuB,EACF,OAAQ17B,EAAOpO,MAAM+E,QACnB,KAAK,EACHi2B,EAAMp9B,GAAG2rC,WAAWO,EAAa,IAAI/U,WAAW3mB,EAAOpO,QACvD,MACF,KAAK,EACHg7B,EAAMp9B,GAAG4rC,WAAWM,EAAa,IAAI/U,WAAW3mB,EAAOpO,QACvD,MACF,KAAK,EACHg7B,EAAMp9B,GAAG6rC,WAAWK,EAAa,IAAI/U,WAAW3mB,EAAOpO,QACvD,MACF,KAAK,EACHg7B,EAAMp9B,GAAG8rC,WAAWI,EAAa,IAAI/U,WAAW3mB,EAAOpO,QAM7D,GAAIynC,EAAOgB,wBAAyB,CAClC,MAAM75B,EAAU1O,OAAK2O,eAAeT,EAAOpO,OAC3C,OAAQoO,EAAOpO,MAAM+E,QACnB,KAAK,EACHi2B,EAAMp9B,GAAG2rC,WACL9B,EAAOgB,wBAAyB,IAAI1T,WAAWnmB,IACnD,MACF,KAAK,EACHosB,EAAMp9B,GAAG4rC,WACL/B,EAAOgB,wBAAyB,IAAI1T,WAAWnmB,IACnD,MACF,KAAK,EACHosB,EAAMp9B,GAAG6rC,WACLhC,EAAOgB,wBAAyB,IAAI1T,WAAWnmB,KAMrD64B,EAAOe,qBACTxN,EAAMp9B,GAAG+rC,UACLlC,EAAOe,oBAAqBp6B,EAAOuW,QAAQ9U,SAAS,GACpDzB,EAAOuW,QAAQ9U,SAAS,IAG1B43B,EAAO1hC,QAAQqX,gBAAkBqoB,GACnCgC,EAAO1hC,QAAQqX,eAAe5P,SAAQ,CAAC7C,EAAGrF,KACxC,MAAMykC,EAAYtC,EAAOiB,uBAAuBpjC,GAC1C0kC,EAAcvE,EAAoBngC,GACxC,GAAe,UAAXqF,EAAE0S,KACJ2d,EAAMp9B,GAAGgsC,WAAWG,EAAWC,QAC1B,GAAe,SAAXr/B,EAAE0S,KACX2d,EAAMp9B,GAAGqsC,WAAWF,EAAWC,QAC1B,GAAe,SAAXr/B,EAAE0S,KACX2d,EAAMp9B,GAAGssC,WAAWH,EAAWC,QAC1B,GAAe,SAAXr/B,EAAE0S,KACX2d,EAAMp9B,GAAGusC,WAAWJ,EAAWC,QAC1B,GAAe,QAAXr/B,EAAE0S,KACX2d,EAAMp9B,GAAG2rC,WAAWQ,EAAWC,QAC1B,GAAe,UAAXr/B,EAAE0S,KACX2d,EAAMp9B,GAAG4rC,WAAWO,EAAWC,QAC1B,GAAe,UAAXr/B,EAAE0S,KACX2d,EAAMp9B,GAAG6rC,WAAWM,EAAWC,OAC1B,CAAA,GAAe,UAAXr/B,EAAE0S,KAGX,MAAMtf,MAAM,gBAAgB4M,EAAE0S,8BAF9B2d,EAAMp9B,GAAG8rC,WAAWK,EAAWC,OAMrChP,EAAMoP,iBmD+fJC,CACI16B,KAAKqrB,MAAOyM,EAAQvB,EAAYO,EAAYhB,GAEhDQ,EAAcz4B,SAAQ88B,GAAQ36B,KAAKwwB,8BAA8BmK,KAE7DjK,IACF7oB,EAAQ7H,KAAK46B,SAAS/yB,GACtB7H,KAAK2wB,aAAarkB,KACd,CAACc,KAAMhX,EAAQwhC,YAAYxqB,KAAMvF,MAAO7H,KAAKmL,aAAatD,MAGhE,MAAMgzB,EAAmBjpC,QAAM4N,IAAI,yBAEnC,GAAIq7B,EAAmB,EAAG,CACxB,MAAMC,EAAOvqC,OAAKqgC,MACbkK,EAAO96B,KAAK+6B,gBAAmBF,IAClC76B,KAAKqrB,MAAMp9B,GAAGga,QACdjI,KAAK+6B,gBAAkBD,GAI3B,IAAKlpC,QAAMc,QAAQ,wBAA0BsjC,EAAQl7B,WACf,IAAlCi7B,EAAyC,CAC3C,MAAMiF,EAAWh7B,KAAKy2B,aAAah4B,GAEnC,OADAuB,KAAKwwB,8BAA8B/xB,GAC5Bu8B,EAET,OAAOv8B,EAGTqB,cACI1J,EAAuBse,EAAsBmhB,EAC7CC,EACAC,GAAgC,GAClCF,EAAcA,GAAenhB,EAAO,GAAG1W,MAIvC,OAHgBgC,KAAKswB,gBACjBl6B,EAASse,EAAQmhB,EAAaC,EAC9BC,GAIEj2B,iBAAiBm0B,EAAagH,GAKpC,OAHMhH,KAAOj0B,KAAKivB,cAChBjvB,KAAKivB,YAAYgF,GAAOgH,KAEnBj7B,KAAKivB,YAAYgF,GAG1Bn0B,oBACE,OAAOE,KAAKmvB,eAKdrvB,UACE,IAAIE,KAAKoG,SAAT,CAKA,IAAKxU,QAAMc,QAAQ,WAAY,CACbozB,OAAOC,KAAK/lB,KAAKivB,aACzBpxB,SAAQo2B,IACdj0B,KAAKqrB,MAAMniB,cAAclJ,KAAKivB,YAAYgF,GAAKoE,qBACxCr4B,KAAKivB,YAAYgF,MAG5Bj0B,KAAKmvB,eAAe+L,UACD,MAAfl7B,KAAK3R,QAC2B,uCAC/B2R,KAAK3R,kBAAkB8sC,kBAC1Bn7B,KAAK3R,OAAO+sC,SAEZp7B,KAAK3R,OAAS,KAEZ2R,KAAKkvB,sBACPlvB,KAAKqrB,MAAMj1B,QAAU,KACrB4J,KAAKqrB,MAAM6P,WAEbl7B,KAAKoG,UAAW,GAGlBtG,iBAkBE,OAjBgC,MAA5BE,KAAKq7B,sBACPr7B,KAAKq7B,oBAAsBC,QAAK,KAC9B,IAAK1pC,QAAM4N,IAAI,gCAAiC,CAG9C,MAAM+7B,EAAY3pC,QAAMc,QAAQ,SAChCd,QAAMiS,IAAI,SAAS,GACnB,MAAM23B,EAAsBx7B,KAAK9M,IAAIuoC,SAAO,OAAO/G,WAAW,GAG9D,GAFA9iC,QAAMiS,IAAI,QAAS03B,GAEfC,EAAsB,EACxB,OAAO,GAGX,OAAO,OAGJx7B,KAAKq7B,oBAIdv7B,UACE,OAAiC,KAA1BE,KAAK07B,iBA55Be,KACA,KA85B7B57B,YAAYiwB,GACV,MAAM/a,EAAUhV,KAAKgV,QAAQxV,IAAIuwB,IAC3B1/B,MAACA,EAAK2N,MAAEA,EAAK4Y,OAAEA,EAAMxe,QAAEA,EAAOmzB,MAAEA,EAAKzwB,SAAEA,GAAYka,EAEzD,GAAe,MAAX5c,EAEF,OAEF,MAAMs4B,EAAyC,MAArB1wB,KAAK2wB,aAC/B,IAAItS,EACAqS,IACFrS,EAAQ9tB,OAAKqgC,OAGf,IAAI1wB,EAAW8U,EAAQ9U,SAMvB,GALgB,MAAZA,IACFA,EAAWy7B,EAA2CtrC,EAAOyK,GAC7Dka,EAAQ9U,SAAWA,GAGP,MAAV0W,EAAgB,CAClB,MAAMjc,EAAY63B,EAAwBniC,GAE1C,IAAI+F,EACAkB,EAAQ4I,EAAS,GAAI3I,EAAS2I,EAAS,GAC3C,MAAM07B,EAAchlB,aAAkBhT,WAElC9I,IACDxD,EAAOC,GAAU4L,EACdjD,EAAS,GAAIA,EAAS,IAC1B9J,EAAU,IAAIyK,GACVlG,EAAW,CAACpD,EAAQD,GAAQskC,IAEhCxlC,EACI,IAAIsK,GAAoB/F,EAAW,CAACpD,EAAQD,GAAQskC,GAG1D,MAAMC,EAAuB77B,KAAKs1B,eAAe,CAAC/9B,EAAQD,GAAQ0G,GAEhEgC,KAAKgV,QAAQxV,IAAIq8B,EAAqB9L,QAAQxE,MAD5CqQ,EAEE7rC,EAAag+B,OAGbh+B,EAAa69B,OAEnB5tB,KAAKqrB,MAAM5nB,2BACPzD,KAAK87B,WAAWD,EAAqB9L,QAASz4B,EAAOC,EACrDqf,GAIJ,MAAMmlB,GAAwB,EACxBC,EAAsBh8B,KAAKswB,gBAC7Bl6B,EAAS,CAACylC,GAAuB79B,EAAO,KAAM+9B,GAG5CE,EAAgBj8B,KAAKgV,QAAQxV,IAAIw8B,EAAoBjM,QAC3D/a,EAAQ5c,QAAU6jC,EAAc7jC,QAChC4c,EAAQ9U,SAAW+7B,EAAc/7B,SACjC8U,EAAQla,SAAWmhC,EAAcnhC,SACjCka,EAAQuW,MAAQ0Q,EAAc1Q,MAE9BvrB,KAAKwwB,8BAA8BqL,GACnC77B,KAAKgV,QAAQgd,OAAOgK,EAAoBjM,QAGxC/a,EAAQ4B,OAAS,KACb8Z,IACF1wB,KAAKizB,cAAgB1iC,OAAKqgC,MAAQvS,OAE/B,CACL,MAAM8N,EAAansB,KAAKk8B,eAAeh8B,EAAUqrB,EAAOvtB,EAAOlD,GAC/Dka,EAAQ5c,QAAU+zB,GAIdrsB,qBAAqBiwB,EAAgBoM,GAE3C,MAAMnnB,EAAUhV,KAAKgV,QAAQxV,IAAIuwB,IAC3B/xB,MAACA,GAASgX,EAOhB,OALAhV,KAAKg0B,eAAejE,GAEC,MAAjBoM,IACFnnB,EAAQ4B,OAyBd,SACIF,EAAiB1Y,GACnB,GAAc,YAAVA,GAAiC,cAAVA,EACzB,OAAO0Y,EACF,GAAc,UAAV1Y,GAA+B,SAAVA,EAAkB,CAChD,MAAMuJ,EAAoB,UAAVvJ,EAAqB,IAAIonB,WAAW1O,EAAEthB,QACjB,IAAIwO,WAAW8S,EAAEthB,QACtD,IAAK,IAAIO,EAAI,EAAGA,EAAI4R,EAAOnS,SAAUO,EACnC4R,EAAO5R,GAAKjF,KAAK08B,MAAM1W,EAAE/gB,IAE3B,OAAO4R,EAEP,MAAM,IAAInZ,MAAM,iBAAiB4P,KArCdo+B,CAAoBD,EAAen+B,IAE/CgX,EAAQ4B,OAGT9W,eACJI,EAA4Bm8B,EAAuBr+B,EACnDlD,GAEF,GADAkF,KAAKuzB,eAAiBvzB,KAAK+rB,aAAa7rB,EAAUlC,IAC7CgC,KAAKs8B,mBACNt8B,KAAKuzB,cAA0C,KAA1BvzB,KAAKovB,mBAA4B,KAAM,CAC9D,MAAMmN,GAAMv8B,KAAKuzB,cAAgB,KAAO,MAAMiJ,QAAQ,GACtDx8B,KAAKs8B,mBAAoB,EACzBvtC,QAAQsX,KACJ,6BAA6Bk2B,0CAGnC,OAAOv8B,KAAKmvB,eAAe+M,eAAeh8B,EAAUm8B,EAASvhC,GAGvDgF,aAAazP,EAAyB2N,GAC5C,OAAO3N,EAAM,GAAKA,EAAM,GAAKE,OAAKksC,gBAAgBz+B,IA38BrC4wB,cAAa,WC1Ed8N,KACd9qC,QAAMiS,IAAI,4BAA4B,GCZpCpE,cAAYk9B,aACdC,kBAAgB,SAAS,IAAM,IAAIhO,IAAoB,SAQ5CiO,GAAQ,CAACH,eAAAA,UCLTI,GAMXh9B,YAAYqV,EAAYC,EAAkBC,GAL1CrV,mBAAgB,CAAC,IAAK,KAMpBA,KAAKD,YAAc8M,eAAa2I,2BAA2BJ,EAAQC,GACnErV,KAAKqN,oBAAsB4H,GAAiBjV,KAAKD,YAAY3K,QAC7D4K,KAAKI,SAAW,8DAEV+U,iLCCG4nB,GASXj9B,YACIqV,EAAYC,EAAkBC,EAC9B2nB,GAAmB,GAVvBh9B,mBAAgB,CAAC,IAAK,KAGtBA,2BAAuB,EACvBA,mBAAe,EACfA,mBAAe,EAMbA,KAAKD,YAAc8M,eAAa2I,2BAA2BJ,EAAQC,GACnE,MAAMtB,EAAO/T,KAAKD,YAAY3K,OAC9B4K,KAAKqN,oBAAsB4H,GAAiBlB,GAC5C,IAAIkpB,EAAyB,GAC7B,GAAID,EACF,GAAa,IAATjpB,GAAuD,IAAzCxjB,OAAKC,cAAcwP,KAAKD,aACxCk9B,EAAyB,+FAKpB,CAKL,GAHAA,EAAyB,eADXluB,GAAkBgF,2CAInB,IAATA,EACE/T,KAAKqN,oBACP4vB,GAA0B,yIAM1BA,GAA0B,4CACGj9B,KAAKD,YAAY,8FAK3C,CACL,MAAMuqB,EAAWF,GAAY,SAAUrW,GACnC/T,KAAKqN,oBACP4vB,GAA0B,2DAErB3S,EAASvW,EAAO,uBAAuBA,kEAEvCuW,EAASvW,EAAO,uBAAuBA,gOAM5CkpB,GAA0B,2DAErB3S,EAASvW,EAAO,cAAc/T,KAAKD,YAAYgU,EAAO,8DAEtDuW,EAASvW,EAAO,cAAc/T,KAAKD,YAAYgU,EAAO,6NAUnE/T,KAAKI,SAAW,2DAEV+U,wKAQA8nB,2DCjGMC,GACZC,GACF,MAAMzoB,OAACA,EAAM0oB,QAAEA,GAAWD,GACpBhxB,EAACA,GAAKuI,EAIZ,OAFA0oB,EAAQC,OAAOlxB,EAAE4jB,QAEV,CAACA,OAAQ5jB,EAAE4jB,OAAQ1/B,MAAO8b,EAAE9b,MAAO2N,MAAOmO,EAAEnO,OAG9C,MAAMs/B,GAA+B,CAC1CC,WAAYC,WACZC,YAAa,QACbC,WAAYR,aCHES,GACZR,GACF,MAAMzoB,OAACA,EAAM0oB,QAAEA,GAAWD,GACpBrM,KAACA,EAAIE,KAAEA,GAAQtc,EAEfkpB,EAAcR,EAAQ9H,eAAexE,EAAKzgC,MAAO,aACjDstC,EAAUP,EAAQpoB,QAAQxV,IAAIo+B,EAAY7N,QAE1C8N,EAAiBX,GAAS,CAACxoB,OAAQ,CAACvI,EAAG2kB,GAAOsM,QAAAA,IAE9CU,EAAiBZ,GAAS,CAACxoB,OAAQ,CAACvI,EAAG6kB,GAAOoM,QAAAA,IAIpD,OAFAO,EAAQvN,mBAAqB,CAACU,KAAM+M,EAAgB7M,KAAM8M,GAEnDF,EAGF,MAAMG,GAA8B,CACzCR,WAAYS,UACZP,YAAa,QACbC,WAAYC,IC7BDM,GAAY,+BACZC,GAAmB,mIA4BzB,MAAMC,GAAgC,CAC3CZ,WAAYa,YACZX,YAAa,QACbC,oBA1BwBP,GAKxB,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3BhxB,EAACA,GAAKuI,GACNlnB,MAACA,GAASqpB,EAEVwnB,EAASjB,EAAQ9H,eACnB,GAAI,UACJ/kC,OAAKuuB,kBAAkBtxB,EAA0B,YAE/C4I,EAAUxE,QAAMc,QAAQ,gCAC1B,IAAIqqC,GAAsBmB,GAAkB/xB,EAAE9b,MAAOguC,EAAOhuC,OAC5D,IAAIysC,GAAgBmB,GAAW9xB,EAAE9b,MAAOguC,EAAOhuC,OAC7CkX,EAAS61B,EAAQ9M,gBAAgBl6B,EAAS,CAAC+V,EAAGkyB,GAASlyB,EAAEnO,OAI/D,OAFAo/B,EAAQ5M,8BAA8B6N,GAE/B92B,ICzBI+2B,GAAQ,+BACRC,GAAe,mIAgBrB,MAAMC,GAA4B,CACvCjB,WAAYkB,QACZhB,YAAa,QACbC,oBAdoBP,GAEpB,MAAMzoB,OAACA,EAAM0oB,QAAEA,GAAWD,GACpBhxB,EAACA,EAAC3e,MAAEA,GAASknB,EAEbte,EAAUxE,QAAMc,QAAQ,gCAC1B,IAAIqqC,GAAsBwB,GAAcpyB,EAAE9b,MAAO7C,EAAM6C,OACvD,IAAIysC,GAAgBwB,GAAOnyB,EAAE9b,MAAO7C,EAAM6C,OAC9C,OAAO+sC,EAAQ9M,gBAAgBl6B,EAAS,CAAC+V,EAAG3e,GAAQ2e,EAAEnO,kBCwBxC0gC,IACZxQ,UAACA,EAASyQ,gBAAEA,EAAeC,cAAEA,EAAa5gC,MAAEA,IAE9C,MAAO,EAAE0W,OAAAA,EAAQ0oB,QAAAA,MACf,MAAMjxB,EAACA,GAAKuI,EACNmqB,EAAezB,EAEf0B,EAAS9gC,GAASmO,EAAEnO,MAC1B,GAAI6gC,EAAa/J,mBAAmB,CAAC3oB,KAAwB,MAAjByyB,EAAuB,CACjE,MAAMG,EAAQF,EAAa7pB,QAAQxV,IAAI2M,EAAE4jB,QACnCgF,EAAY6J,EAAcG,EAAMnoB,OAAsBkoB,GAC5D,OAAOD,EAAavJ,eAAenpB,EAAE9b,MAAOyuC,EAAQ/J,GAKtD,IAAI3+B,EAOJ,OALEA,EAHExE,QAAMc,QAAQ,gCAAqD,MAAnBisC,EAGxC,IAAItQ,GAAqBliB,EAAE9b,MAAOsuC,GAElC,IAAI1Q,GAAe9hB,EAAE9b,MAAO69B,GAGjC2Q,EAAavO,gBAAgBl6B,EAAS,CAAC+V,GAAI2yB,aAuBtCE,IAAiB9Q,UAC/BA,EAASyQ,gBACTA,EAAe3B,iBACfA,GAAmB,EAAKiC,gBACxBA,GAAkB,EAAKL,cACvBA,EAAa5gC,MACbA,IAEA,MAAO,EAAE0W,OAAAA,EAAQ0oB,QAAAA,MACf,MAAM1mB,EAACA,EAAC1F,EAAEA,GAAK0D,EACTmqB,EAAezB,EAErB,GAAI6B,GAA+B,cAAZvoB,EAAE1Y,MAAuB,CAC9C,MAAMkhC,EAAQL,EAAa7pB,QAAQxV,IAAIkX,EAAEqZ,QACnCoP,EAAQN,EAAa7pB,QAAQxV,IAAIwR,EAAE+e,SAElCe,EAAME,GAAQ,CACnB,CAACkO,EAAM9O,mBAAmBU,KAAMqO,EAAM/O,mBAAmBU,MACzD,CAACoO,EAAM9O,mBAAmBY,KAAMmO,EAAM/O,mBAAmBY,OACzDz7B,KAAI6pC,IACJ,MAAOC,EAAOC,GAASF,EAEjBG,EAAU,CACdxP,OAAQsP,EAAMtP,OACd/xB,MAAOqhC,EAAMrhC,MACb3N,MAAOqmB,EAAErmB,OAELmvC,EAAU,CACdzP,OAAQuP,EAAMvP,OACd/xB,MAAOshC,EAAMthC,MACb3N,MAAO2gB,EAAE3gB,OAGL+F,EAAU,IAAI0mC,GAAgB5O,EAAWxX,EAAErmB,MAAO2gB,EAAE3gB,OAC1D,OAAOwuC,EAAavO,gBAChBl6B,EAAS,CAACmpC,EAASC,GAAUrgB,aAAWkgB,EAAMrhC,MAAOshC,EAAMthC,WAG3DyhC,EACF9B,GAAQ,CAACjpB,OAAQ,CAACoc,KAAAA,EAAME,KAAAA,GAAOoM,QAASyB,IAO5C,OALAA,EAAarO,8BAA8BM,GAC3C+N,EAAarO,8BAA8BQ,GAIpCyO,EAGT,MAAMX,EAAS9gC,GAASmhB,aAAWzI,EAAE1Y,MAAOgT,EAAEhT,OAC9C,IAAiB,WAAZ0Y,EAAE1Y,OAAkC,WAAZgT,EAAEhT,OAC1B6gC,EAAa/J,mBAAmB,CAACpe,EAAG1F,MACpB,MAAjB4tB,EAAuB,CACzB,MAAMtpB,EAAQupB,EAAa7pB,QAAQxV,IAAIkX,EAAEqZ,QAAQnZ,OAC3CrB,EAAQspB,EAAa7pB,QAAQxV,IAAIwR,EAAE+e,QAAQnZ,OAE3C8oB,EAA2B,WAAZhpB,EAAE1Y,MAEnB6O,eAAaqQ,uBAAuB5H,GACpCA,EACEqqB,EAA2B,WAAZjpB,EAAE1Y,MAEnB6O,eAAaqQ,uBAAuB3H,GACpCA,GACGwf,EAAW1mB,GACduwB,EAAcloB,EAAErmB,MAAO2gB,EAAE3gB,MAAOqvC,EAAcC,EAAcb,GAE1Dc,EAAMf,EAAavJ,eAAejnB,EAAUywB,GAGlD,OAFgBD,EAAa7pB,QAAQxV,IAAIogC,EAAI7P,QACrCnZ,OAASme,EACV6K,EAMT,IAAIxpC,EAQJ,OANEA,EAJExE,QAAMc,QAAQ,iCACK,MAAnBisC,EAGQ,IAAI5B,GACV4B,EAAiBjoB,EAAErmB,MAAO2gB,EAAE3gB,MAAO2sC,GAE7B,IAAIF,GAAgB5O,EAAWxX,EAAErmB,MAAO2gB,EAAE3gB,OAG/CwuC,EAAavO,gBAAgBl6B,EAAS,CAACsgB,EAAG1F,GAAI8tB,aAIzCe,GACZC,EAAqCC,GAAS,GAChD,GAAmB,WAAfD,EACF,MXnLkB,YWuLb,GAAmB,SAAfA,EACT,OAAIC,EX3KY,iRDwBAC,2DYuJX,GAAmB,QAAfF,EACT,OAAIC,EX3LW,+PDkCA,0CY6JV,GAAmB,UAAfD,EACT,OAAIC,EXzKa,gSDgBAC,qEY6JZ,GAAmB,UAAfF,EACT,OAAIC,EACKxB,GAEFD,GACF,GAAmB,cAAfwB,EACT,OAAIC,EACK7B,GAEFD,GACF,GAAmB,YAAf6B,EACT,MX5KmB,sCWiLrB,MAAM,IAAI1xC,MAAM,cACZ0xC,2DCvNOG,GAOXngC,YACIsV,EAAkCC,EAClCtV,EAAuCmgC,GAAa,EACpDC,GAAa,EAAOC,GAAU,EAAON,EAAqB,KAC1DO,GAAqB,EAAOC,GAAyB,GAVzDtgC,mBAAgB,CAAC,UAAW,WAC5BA,mBAAe,EACfA,mBAAe,EASbA,KAAKD,YAAcA,EAEnB,MAAMwgC,EAAYL,EAAa9qB,EAAO,GAAKA,EAAO,GAC5CorB,EAAwB9vC,KAAKC,KAAK4vC,EAAY,GAE9CE,EAAUP,EAAa,cAAgB,cACvCQ,EAAUP,EAAa,cAAgB,cACvCQ,EAAWT,EAAa,CAAC,SAAU,UAAY,CAAC,SAAU,UAC1DU,EAAWT,EAAa,CAAC,SAAU,UAAY,CAAC,SAAU,UAEhE,IAAIU,EAAoB,GAAIC,EAAyB,GACjDhB,IAEAe,EADER,EACkB,oGAEhBP,eAEKQ,EACW,4FAEhBR,eAGgB,wCAChBA,eAINgB,EAAyB,gCAG3B,MAAMC,EAAiBX,EAAU,kCAAoC,GACjEA,GACFpgC,KAAKi4B,cAAc3rB,KAAK,QAGtB+zB,GACFrgC,KAAKi4B,cAAc3rB,KAAK,0BAGtBg0B,GACFtgC,KAAKi4B,cAAc3rB,KAAK,kBAG1B,IAAI00B,EAAgB,OAChBC,EAAgB,OAChB7rB,EAAO,GAAKC,EAAO,GACrB2rB,EAAgB,wBAAwB5rB,EAAO,GAAK,OAC3CC,EAAO,GAAKD,EAAO,KAC5B6rB,EAAgB,wBAAwB5rB,EAAO,GAAK,QAGtDrV,KAAKI,SAAW,WACZygC,4CAE8BL,8GAIRA,qCACLQ,8BACAC,6CACeR,8CACAC,oKAIjBC,EAAS,QAAQC,EAAS,8BAC1BD,EAAS,QAAQC,EAAS,wKASvCG,gBAEAD,kDCtFH,MAAMI,GACL,wCADKA,GAEL,8CAGKC,GAKXrhC,YAAYqV,EAAYC,EAAkBC,GAJ1CrV,mBAAgB,CAAC,QAAS,QAAS,QAAS,SAK1CA,KAAKD,YAAc8M,eAAa2I,2BAA2BJ,EAAQC,GAEnErV,KAAKI,SAAW,4GAGV+U,6SCZV,MAAMisB,GAAM,yBAEIC,GACZlE,GACF,MAAMzoB,OAACA,EAAM0oB,QAAEA,GAAWD,GACpBzmB,EAACA,EAAC1F,EAAEA,GAAK0D,EACT1W,EAAQ6O,eAAasS,WAAWzI,EAAE1Y,MAAOgT,EAAEhT,OAEjD,GAAgB,cAAZ0Y,EAAE1Y,MAAuB,CAC3B,MAAMkhC,EAAQ9B,EAAQpoB,QAAQxV,IAAIkX,EAAEqZ,QAC9BoP,EAAQ/B,EAAQpoB,QAAQxV,IAAIwR,EAAE+e,QAE9BuR,EAAc,IAAIH,GACpBI,GAA4C7qB,EAAErmB,MAAO2gB,EAAE3gB,OACrDmxC,EAAc,IAAIL,GACpBI,GAA4C7qB,EAAErmB,MAAO2gB,EAAE3gB,OAErDqkB,EAAS,CACb,CACEqb,OAAQmP,EAAM9O,mBAAmBU,KAAKf,OACtC/xB,MAAOkhC,EAAM9O,mBAAmBU,KAAK9yB,MACrC3N,MAAOqmB,EAAErmB,OAEX,CACE0/B,OAAQmP,EAAM9O,mBAAmBY,KAAKjB,OACtC/xB,MAAOkhC,EAAM9O,mBAAmBY,KAAKhzB,MACrC3N,MAAOqmB,EAAErmB,OAEX,CACE0/B,OAAQoP,EAAM/O,mBAAmBU,KAAKf,OACtC/xB,MAAOmhC,EAAM/O,mBAAmBU,KAAK9yB,MACrC3N,MAAO2gB,EAAE3gB,OAEX,CACE0/B,OAAQoP,EAAM/O,mBAAmBY,KAAKjB,OACtC/xB,MAAOmhC,EAAM/O,mBAAmBY,KAAKhzB,MACrC3N,MAAO2gB,EAAE3gB,QAIPoxC,EAAWrE,EAAQ9M,gBAAgBgR,EAAa5sB,EAAQ,WACxDgtB,EAAWtE,EAAQ9M,gBAAgBkR,EAAa9sB,EAAQ,WAExD+qB,EACF9B,GAAQ,CAACjpB,OAAQ,CAACoc,KAAM2Q,EAAUzQ,KAAM0Q,GAAWtE,QAAAA,IAMvD,OAJAA,EAAQ5M,8BAA8BiR,GACtCrE,EAAQ5M,8BAA8BkR,GAG/BjC,EAGT,GAAIrC,EAAQtI,mBAAmB,CAACpe,EAAG1F,IAAK,CACtC,MAAMkuB,EAAQ9B,EAAQpoB,QAAQxV,IAAIkX,EAAEqZ,QAC9BoP,EAAQ/B,EAAQpoB,QAAQxV,IAAIwR,EAAE+e,SAC7BgF,EAAW1mB,GAAYszB,GAC1BjrB,EAAErmB,MAAO2gB,EAAE3gB,MAAO6uC,EAAMtoB,OACxBuoB,EAAMvoB,OAAsB5Y,GAE1B4hC,EAAMxC,EAAQ9H,eAAejnB,EAAUrQ,GAG7C,OAFgBo/B,EAAQpoB,QAAQxV,IAAIogC,EAAI7P,QAChCnZ,OAASme,EACV6K,EAGT,IAAIxpC,EAOJ,OALEA,EADExE,QAAMc,QAAQ,gCACN,IAAIqqC,GAAsBqE,GAAK1qB,EAAErmB,MAAO2gB,EAAE3gB,OAE1C,IAAIysC,GAAgBsE,GAAK1qB,EAAErmB,MAAO2gB,EAAE3gB,OAGzC+sC,EAAQ9M,gBAAgBl6B,EAAS,CAACsgB,EAAG1F,GAAIhT,GAG3C,MAAM4jC,GAA+B,CAC1CrE,WAAYsE,WACZpE,YAAa,QACbC,WAAY2D,aCpFES,GAAQ3E,GAKtB,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3BhxB,EAACA,GAAKuI,GACNrkB,MAACA,GAASwmB,EACVgoB,EAAezB,EAEftY,EAAQv0B,OAAKC,cAAc2b,EAAE9b,OAC7B0xC,EAASxxC,OAAKyxC,uBAAuB3xC,EAAOy0B,GAC5Cmd,EAAS1xC,OAAKC,cAAcuxC,GAElCxxC,OAAKwN,OACD+mB,IAAUmd,GACV,IAAM,kBAAkBF,UAAeE,iCACzB91B,EAAE9b,cAAcy0B,mFAGlC,MAAMod,EAAWrD,EAAa7pB,QAAQxV,IAAI2M,EAAE4jB,QAC5C,OAAImS,EAASpnC,UAAaW,EAAc0Q,EAAE9b,MAAO0xC,IACtB,OAArBG,EAAS9pC,SAAoBqD,EAAcymC,EAAS7xC,MAAO0xC,IAIjElD,EAAaxB,OAAOlxB,EAAE4jB,QAEf,CAACA,OAAQ5jB,EAAE4jB,OAAQ1/B,MAAO0xC,EAAQ/jC,MAAOmO,EAAEnO,iBC3BhD4W,EAAmB2gB,EACnB6H,GACF,MAAM5H,EACF,CAACj7B,EAAYqa,EAAMvkB,UACfoK,EAAYma,EAAMvkB,QACpBslC,EAAsB,CAC1B33B,MAAO4W,EAAM5W,MACb3N,MAAOmlC,EACPzF,OAAQnb,EAAMmb,QAEV6F,EACF,CAACr7B,EAAYg7B,MACT96B,EAAY86B,IAEdn/B,EAAU,IAAI80B,GAAqB0K,EAAgBJ,GAEnD/2B,EAAS2+B,EAAQ9M,gBACnBl6B,EAAS,CAACu/B,GAAU/gB,EAAM5W,MAAO,MAFC,GAItC,MAAO,CAAC+xB,OAAQtxB,EAAOsxB,OAAQ1/B,MAAOklC,EAAYv3B,MAAOS,EAAOT,ODGvD64B,CAAc1qB,EAAG41B,EAAQlD,GAQ7B,MAAMsD,GAA8B,CACzC5E,WAAY6E,UACZ3E,YAAa,QACbC,WAAYoE,UErCDO,GAKXviC,YAAYwiC,EAAqCC,GAJjDviC,mBAAgB,CAAC,KAKf,MAAMwiC,WAACA,EAAUhf,UAAEA,EAASvP,OAAEA,EAAMwuB,QAAEA,GAAWH,EACjDtiC,KAAKD,YAAc,CAACyjB,EAAWif,GAE/B,MAAMC,EAAqD,EAA7BhyC,KAAK6mB,MAAMirB,EAAa,GAChDG,EAA0BH,EAAa,EAE7C,IAAII,EAAgB,iCACpB,GAAe,MAAXL,EAAiB,CACnB,MAAMM,EAAc,EAAIN,EACxBK,EAAgB,4BACZryC,OAAKuyC,MAAMD,GAAeA,EAAYE,YAAY,GACxBF,YAGhC,IAAI7F,EAAmB,GACnB/oB,EAASuuB,EAAa,IACxBxF,EAAmB,uCACW/oB,kDAMhCjU,KAAKI,SAAW,gHAIV48B,sNAQwBwF,sEAIJE,8QASlBE,kDAGqBF,mBACS,IAA5BC,2FAGFC,yBACqC,IAA5BD,6IAKTC,yBACqC,IAA5BD,iLAMTC,mEC1ECI,GAKXljC,YACIwiC,EACAW,GANJjjC,mBAAgB,CAAC,KAOf,MAAMwiC,WAACA,EAAUhf,UAAEA,EAASvP,OAAEA,EAAMwuB,QAAEA,GAAWH,EACjDtiC,KAAKD,YAAc,CAACyjB,EAAWif,GAE/B,IAAIS,EAAsB,MACtBC,EAAY,GAEG,SAAfF,EACFC,EAAsB,MACE,QAAfD,GAETC,EAAsB,cACtBC,EAAY,OACY,QAAfF,IAETC,EAAsB,eACtBC,EAAY,OAGd,IAAI1wC,EAAc,GAAGwwC,KAAcA,KAAcA,sEAG9B,QAAfA,EACFxwC,EAAc,WACU,SAAfwwC,EACTxwC,EAAc,YACU,QAAfwwC,EACTxwC,EAAc,WACU,QAAfwwC,IACTxwC,EAAc,YAGhB,MAAMiwC,EAAqD,EAA7BhyC,KAAK6mB,MAAMirB,EAAa,GAChDG,EAA0BH,EAAa,EAE7C,IAAII,EAAgB,eACG,QAAfK,kEAEsB,SAAfA,mKAIKE,wCACK,QAAfF,QAA0C,QAAfA,iCACfE,0MASlBC,EAAU,OAEK,QAAfH,GACFC,EAAsB,MACtBN,EAAgB,qMAKhBQ,EAAU,SACc,QAAfH,IACTC,EAAsB,MACtBN,EAAgB,qMAKhBQ,EAAU,SAGZ,IAAIpG,EAAmB,GACnB/oB,EAASuuB,EAAa,IACxBxF,EAAmB,uCACW/oB,kEAKhCjU,KAAKI,SAAW,6CACsB8iC,kHAIhClG,sNAQwBwF,yCAEAU,mKAMJR,gEAElBU,cAAoBA,gMAOpBR,kDAGqBF,mBACS,IAA5BC,mBACFS,cAAoBA,2KAOpBR,yBACqC,IAA5BD,mBACTS,cAAoBA,kLAOpBR,yBACqC,IAA5BD,mBACTS,cAAoBA,yLAOpBR,mCAEQnwC,+BC7HJuwB,GACZ7W,EAAenO,EAAiBqlC,EAChCjG,GACF,MAAMkG,EArBR,SAA4Bl1B,GAE1B,MAAMm1B,EAAS,GAEf,KAAyB,IAAlBA,EAAOnuC,QAAsD,IAAtCmuC,EAAOA,EAAOnuC,OAAS,GAAGqtC,SAAe,CACrE,MAAMA,EACFc,EAAOnuC,OAASmuC,EAAOA,EAAOnuC,OAAS,GAAGqtC,QAAUr0B,EAAQ,GAC1Do0B,EAAa31B,eAAa22B,yBAAyBf,GACzDc,EAAOj3B,KAAK,CACV2H,OAAQwuB,EACRD,WAAAA,EACAC,QAAS/xC,KAAKC,KAAK8xC,EAAUD,KAIjC,OAAOe,EAMiBE,CAAmBt3B,EAAE9b,OAE7C,IAAIkX,EAAS4E,EACb,IAAK,IAAIxW,EAAI,EAAGA,EAAI2tC,EAAgBluC,OAAQO,IAAK,CAC/C,MAAMse,OAACA,EAAMuuB,WAAEA,EAAUC,QAAEA,GAAWa,EAAgB3tC,GAEtD,IAAIS,EACAstC,EAEFttC,EADoB,SAAlBitC,EACc,IAAN1tC,EACN,IAAI0sC,GACA,CAACG,WAAAA,EAAYvuB,OAAAA,EAAQuP,UAAWrX,EAAE9b,MAAM,GAAIoyC,QAAAA,GAAUxuB,GAC1D,IAAIouB,GAAY,CAACG,WAAAA,EAAYvuB,OAAAA,EAAQuP,UAAWrX,EAAE9b,MAAM,GAAIoyC,QAAAA,IAEtD,IAAIO,GACV,CAACR,WAAAA,EAAYvuB,OAAAA,EAAQuP,UAAWrX,EAAE9b,MAAM,GAAIoyC,QAAAA,GAAUY,GAG5DK,EAAiBn8B,EACjBA,EAAS61B,EAAQ9M,gBAAgBl6B,EAAS,CAACmR,GAASvJ,GAEhD0lC,EAAe3T,SAAW5jB,EAAE4jB,QAC9BqN,EAAQ5M,8BAA8BkT,GAI1C,OAAOn8B,QCtDIo8B,GAMX7jC,YAAYsV,EAAkBwuB,GAL9B5jC,mBAAgB,CAAC,KAMf,MAAMD,EAAwB,IAAIpC,MAAMyX,EAAOhgB,QAC/C,IAAK,IAAIO,EAAI,EAAGA,EAAIoK,EAAY3K,OAAQO,IACtCoK,EAAYpK,GAAKyf,EAAOwuB,EAAOjuC,IAEjCqK,KAAKD,YAAcA,EACnBC,KAAK+T,KAAOhU,EAAY3K,OACxB,MAAM4I,EAAQ+Q,GAAkB/O,KAAK+T,MAC/B8vB,EAWV,SAA2BD,GACzB,MAAM7vB,EAAO6vB,EAAOxuC,OACpB,GAAI2e,EAAO,EACT,MAAM3lB,MAAM,sBAAsB2lB,0BAEpC,MAAM+vB,EACF,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,WACtDC,EAAiB,IAAIpmC,MAAMoW,GACjC,IAAK,IAAIpe,EAAI,EAAGA,EAAIiuC,EAAOxuC,OAAQO,IACjCouC,EAAeH,EAAOjuC,IAAMmuC,EAAcnuC,GAE5C,OAAOouC,EAAe/tC,OAtBHguC,CAAkBJ,GAEnC5jC,KAAKI,SAAW,8BAEZpC,sDACe6lC,2BClBVI,GAQXnkC,YAAYsV,EAAkBwuB,GAP9B5jC,mBAAgB,CAAC,KAIjBA,mBAAe,EACfA,mBAAe,EAGb,MAAMD,EAAwB,IAAIpC,MAAMyX,EAAOhgB,QAC/C,IAAK,IAAIO,EAAI,EAAGA,EAAIoK,EAAY3K,OAAQO,IACtCoK,EAAYpK,GAAKyf,EAAOwuB,EAAOjuC,IAIjC,GAFAqK,KAAKD,YAAcA,EACnBC,KAAK+T,KAAOhU,EAAY3K,OACpB4K,KAAK+T,KAAO,EACd,MAAM3lB,MACF,6BAA6B4R,KAAK+T,8BAExC,MAAM/V,EAAQ+Q,GAAkB/O,KAAK+T,MAE/BmwB,EAAc/Z,GAAe,KAAMnqB,KAAK+T,MACxCowB,EAAgB,IAAIxmC,MAAMqC,KAAK+T,MACrC,IAAK,IAAIpe,EAAI,EAAGA,EAAIiuC,EAAOxuC,OAAQO,IACjCwuC,EAAcP,EAAOjuC,IAAMuuC,EAAYvuC,GAEzC,MAAMi1B,EAAY,QAAQuZ,EAActuC,OAAO,GAAGG,UAC5CouC,EACF,KAAKF,EAAYlkC,KAAK+T,KAAO,QAAQhU,EAAYC,KAAK+T,KAAO,KAC3DswB,EAAO,mBAAmBF,EAAcnuC,YAAY40B,KAE1D5qB,KAAKI,SAAW,8BAEZpC,+EAEYqmC,gBACTD,6BACWC,wBAEZH,EAAYlkC,KAAK+T,KAAO,mBACrBmwB,EAAYlkC,KAAK+T,KAAO,QAAQhU,EAAYC,KAAK+T,KAAO,8BAC/CswB,kBACTD,+BACWC,0ECxCRva,GACZ3d,EAAeyY,EAAgBwY,GACjC,MAAMhnC,EAAUxE,QAAMc,QAAQ,+BAC1B,IAAIuxC,GAAuB93B,EAAE9b,MAAOu0B,GACpC,IAAI+e,GAAiBx3B,EAAE9b,MAAOu0B,GAClC,OAAOwY,EAAQ9M,gBAAgBl6B,EAAS,CAAC+V,GAAIA,EAAEnO,gBCNjCo1B,GACZ+J,GACF,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAE3BhxB,EAACA,GAAKuI,GACNsQ,KAACA,EAAIsf,SAAEA,GAAYztB,EAEzB,gBCJE1K,EAAe6Y,EAAuBsf,EACtClH,GACF,MAAMmH,EAAmBvf,EAEnBH,EAAQ1Y,EAAE9b,MAAM+E,OAEhBovC,EAAWj0C,OAAK20B,eAAeqf,EAAkBp4B,EAAE9b,OACzD,IAAIo0C,EAAOD,EACX,MAAME,EAAe73B,eAAa83B,mBAAmBF,EAAM5f,GACrD+f,EAAuC,MAAhBF,EAE7B,IAAIG,EAAW14B,EACXy4B,IACFC,EAAW/a,GAAc3d,EAAGu4B,EAActH,GAE1CqH,EAAO53B,eAAai4B,iBAAiBL,EAAKrvC,OAAQyvB,IAGpDhY,eAAak4B,2BAA2B,MAAON,EAAM5f,GACrD,MAAOmgB,EAAahmB,GAChBnS,eAAaoS,0BAA0B4lB,EAASx0C,MAAOo0C,GAE3D,IAAIp2B,EAAW22B,EACXV,IAEFj2B,EAAWxB,eAAao4B,qBAAqBD,EAAaR,IAG5D,MAAMvwB,EAAS1jB,OAAKC,cAAcwuB,GAG5BkmB,EAAgBpD,GAClB,CAACptB,OAAQ,CAACvI,EAAG04B,GAAWhuB,MAAO,CAACxmB,MAAO,CAH7BE,OAAKC,cAAc2b,EAAE9b,OACT4jB,EAE6BA,IAAUmpB,QAAAA,IAI3D+H,EAAUniB,GAAOkiB,EAFPE,aAAWj5B,EAAEnO,OAEkB,MAAOo/B,GAChDwC,EACFkC,GAAQ,CAACptB,OAAQ,CAACvI,EAAGg5B,GAAUtuB,MAAO,CAACxmB,MAAOge,GAAW+uB,QAAAA,IAQ7D,OANAA,EAAQ5M,8BAA8B0U,GACtC9H,EAAQ5M,8BAA8B2U,GAClCP,GACFxH,EAAQ5M,8BAA8BqU,GAGjCjF,ED1CAyF,CAAQl5B,EAAG6Y,EAAMsf,EAAUlH,GAG7B,MAAMkI,GAA0B,CACrC/H,WAAYgI,MACZ9H,YAAa,QACbC,WAAYtK,aEZEoS,GAAUrI,GAKxB,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3BhxB,EAACA,GAAKuI,GACNkQ,KAACA,GAAQ/N,EACTgoB,EAAezB,EAEfvY,EAAQ1Y,EAAE9b,MAAM+E,OAEhBgG,EAAqB,IAAIuC,MAAMknB,GACrC,IAAK,IAAIlvB,EAAI,EAAGA,EAAIyF,EAAShG,OAAQO,IACnCyF,EAASzF,GAAKwW,EAAE9b,MAAMu0B,EAAKjvB,IAG7B,IAAIiqC,EACJ,GAAIf,EAAa/J,mBAAmB,CAAC3oB,IAAK,CACxC,MACMyK,EADWioB,EAAa7pB,QAAQxV,IAAI2M,EAAE4jB,QACpBnZ,OAClBme,EAAY0Q,GAAa7uB,EAAQzK,EAAE9b,MAAO8b,EAAEnO,MAAO4mB,EAAMxpB,GAE/DwkC,EAAMf,EAAavJ,eAAel6B,EAAU+Q,EAAEnO,OAC9B6gC,EAAa7pB,QAAQxV,IAAIogC,EAAI7P,QACrCnZ,OAASme,OAEjB6K,EAAM9V,GAAc3d,EAAGyY,EAAMia,GAE/B,OAAOe,EAGF,MAAM8F,GAAgC,CAC3CnI,WAAYoI,YACZlI,YAAa,QACbC,WAAY8H,aCdEI,IAAgBlvB,EAC9BA,EAAC1F,EACDA,EAACkvB,WACDA,EAAUC,WACVA,EAAU/C,QACVA,EAAOyI,KACPA,EAAO,KAAIC,uBACXA,EAAyB,KAAIC,eAC7BA,EAAiB,EAACjG,WAClBA,EAAa,OAEb,MAAMjqB,EAAQa,EAAErmB,MAAM+E,OAChB0gB,EAAQ9E,EAAE3gB,MAAM+E,OAEhB4wC,EAAc9F,EAAaxpB,EAAErmB,MAAMwlB,EAAQ,GAAKa,EAAErmB,MAAMwlB,EAAQ,GAChEowB,EAAc9F,EAAanvB,EAAE3gB,MAAMylB,EAAQ,GAAK9E,EAAE3gB,MAAMylB,EAAQ,GAEhEowB,EAAchG,EAAaxpB,EAAErmB,MAAMwlB,EAAQ,GAAKa,EAAErmB,MAAMwlB,EAAQ,GAChEswB,EAAchG,EAAanvB,EAAE3gB,MAAMylB,EAAQ,GAAK9E,EAAE3gB,MAAMylB,EAAQ,GAEhEswB,EAAa1vB,EAAErmB,MAAMwF,MAAM,GAAI,GAC/BwwC,EAAar1B,EAAE3gB,MAAMwF,MAAM,GAAI,GAE/BywC,EAAY/1C,OAAKC,cAAc41C,GAC/BG,EAAYh2C,OAAKC,cAAc61C,GAE/BG,EACFF,IAAcC,GAA2B,IAAdD,GAAiC,IAAdC,EAElDh2C,OAAKwN,OACD8X,GAAS,GAAKC,GAAS,GAAK0wB,GAC5B,IAEI,uJAAwBJ,WAAoBC,QAEpD,MAEMh4B,GADFi4B,EAAYC,EAAY7vB,EAAErmB,MAAMwF,MAAM,GAAI,GAAKmb,EAAE3gB,MAAMwF,MAAM,GAAI,IAClCmhC,OAAO,CAACkP,EAAaC,IAExD51C,OAAKwN,OACDioC,IAAgBC,GAChB,IAAM,kCAAkCD,WACjCC,6BAAuCvvB,EAAErmB,aACzC2gB,EAAE3gB,wBAAwB6vC,oBACVC,kBAE3B,MAAMsG,EAAqCvG,EACvC,CAACoG,EAAWN,EAAaE,GACzB,CAACI,EAAWJ,EAAaF,GACvBU,EAAqCvG,EACvC,CAACoG,EAAWJ,EAAaF,GACzB,CAACM,EAAWN,EAAaE,GAGvBQ,EAAM7E,GAAQ,CAACptB,OAAQ,CAACvI,EAAGuK,GAAI0mB,QAAAA,EAASvmB,MAAO,CAACxmB,MAAOo2C,KACvDG,EAAM9E,GAAQ,CAACptB,OAAQ,CAACvI,EAAG6E,GAAIosB,QAAAA,EAASvmB,MAAO,CAACxmB,MAAOq2C,KAEvDG,EAA8B,CAACF,EAAKC,GAEpCvrC,EAAW3K,KAAKI,IAAIw1C,EAAWC,GAC/BhG,EAAYL,EAAayG,EAAIt2C,MAAM,GAAKs2C,EAAIt2C,MAAM,GAElDy2C,EAAkB,MAARjB,EACVkB,EAAsD,MAA1BjB,EAC5BkB,EAAmC,cAAflH,EACpBmH,EAAgC,MAAdnH,EACpBD,GAA6BC,GAAY,GACzC,KAGJ,IAAIF,EAIJ,IAAqB,IAAhBsG,GAAqC,IAAhBC,IACtB5F,EAzFqC,MAyF2B,KAP3CuG,GAAWC,GAChCC,GAAwC,MAAnBC,GAMkD,CACzE,IAAIC,EAAOP,EACPQ,EAAOP,EACP1G,IACFgH,EAAO1B,GAAU,CAAC9wB,OAAQ,CAACvI,EAAGw6B,GAAMvJ,QAAAA,EAASvmB,MAAO,CAAC+N,KAAM,CAAC,EAAG,EAAG,MAClEiiB,EAAcv6B,KAAK46B,IAEjB/G,IACFgH,EAAO3B,GAAU,CAAC9wB,OAAQ,CAACvI,EAAGy6B,GAAMxJ,QAAAA,EAASvmB,MAAO,CAAC+N,KAAM,CAAC,EAAG,EAAG,MAClEiiB,EAAcv6B,KAAK66B,IAGrB,MACMC,EAAiC,IAAhBjB,EAEvB,IAAIkB,EAASH,EAH0B,IAAhBf,IAKrBkB,EAASvF,GAAQ,CACfptB,OAAQ,CAACvI,EAAG+6B,GACZ9J,QAAAA,EACAvmB,MAAO,CAACxmB,MAAO,CAACgL,EAAUklC,EAAW,MAGvCsG,EAAcv6B,KAAK+6B,IAGrB,MAAMriB,EAAuB,IAAhBmhB,EAAoB,EAAI,EAErC,IAAImB,EAASH,EACTC,IACFE,EAASxF,GAAQ,CACfptB,OAAQ,CAACvI,EAAGg7B,GACZ/J,QAAAA,EACAvmB,MAAO,CAACxmB,MAAO,CAACgL,EAAU,EAAGklC,MAG/BsG,EAAcv6B,KAAKg7B,IAGrB,MAAMvlB,EAAUsf,GAAS,CAAC3sB,OAAQ,CAACgC,EAAG2wB,EAAQr2B,EAAGs2B,GAASlK,QAAAA,IAC1DwC,EAAMxM,GAAI,CAAC1e,OAAQ,CAACvI,EAAG4V,GAAUqb,QAAAA,EAASvmB,MAAO,CAACmO,KAAAA,EAAMsf,UAAU,KAClEuC,EAAcv6B,KAAKyV,OACd,CACL,MAAM/jB,EAAQmhB,aAAWzI,EAAE1Y,MAAOgT,EAAEhT,OAE9B5H,EAAU,IAAI6pC,GAChBwG,EAAUC,EAAU,CAACrrC,EAAU6qC,EAAaC,GAAcjG,EAC1DC,EAAY2G,EAASG,EAAiBF,EACtCC,GAEEtyB,EAAuB,CAACiyB,EAAKC,GAOnC,GANY,MAARf,GACFnxB,EAAOpI,KAAKu5B,GAEVkB,GACFryB,EAAOpI,KAAKw5B,GAEVkB,EAAmB,CACrB,MAAMO,EAAkBnK,EAAQ9H,eAC5B,GAAI,UACJ/kC,OAAKuuB,kBAAkBinB,EAAmC,YAC9DrxB,EAAOpI,KAAKi7B,GACZV,EAAcv6B,KAAKi7B,GAGrB3H,EAAMxC,EAAQ9M,gBAAgBl6B,EAASse,EAAQ1W,GAGjD,MAAMwpC,EACF1F,GAAQ,CAACptB,OAAQ,CAACvI,EAAGyzB,GAAMxC,QAAAA,EAASvmB,MAAO,CAACxmB,MAAOge,KACvDw4B,EAAcv6B,KAAKszB,GACnB,IAAK,MAAMjqC,KAAKkxC,EACdzJ,EAAQ5M,8BAA8B76B,GAExC,OAAO6xC,ECtJF,MAAMC,GAAmC,CAC9ClK,WAAYmK,eACZjK,YAAa,QACbC,oBAzB2BP,GAK3B,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3BzmB,EAACA,EAAC1F,EAAEA,EAAC60B,KAAEA,EAAIC,uBAAEA,GAA0BpxB,GACvCwrB,WAACA,EAAUC,WAAEA,EAAUL,WAAEA,EAAUiG,eAAEA,GAAkBlvB,EAE7D,OAAO+uB,GAAgB,CACrBlvB,EAAAA,EACA1F,EAAAA,EACAkvB,WAAAA,EACAC,WAAAA,EACA/C,QAAAA,EACAyI,KAAAA,EACAC,uBAAAA,EACAC,eAAAA,EACAjG,WAAAA,MChBE3R,GAAM,iBAwBL,MAAMwZ,GAA0B,CACrCpK,WAAYqK,MACZnK,YAAa,QACbC,oBAzBkBP,GAElB,MAAMzoB,OAACA,EAAM0oB,QAAEA,GAAWD,GACpBhxB,EAACA,GAAKuI,EAIZ,GAAI0oB,EAAQtI,mBAAmB,CAAC3oB,KAAmB,cAAZA,EAAEnO,MAAuB,CAC9D,MAAM+gC,EAAQ3B,EAAQpoB,QAAQxV,IAAI2M,EAAE4jB,QAC9BgF,EAAYvM,GAAiBuW,EAAMnoB,QACzC,OAAOwmB,EAAQ9H,eAAenpB,EAAE9b,MAAO8b,EAAEnO,MAAO+2B,GAGlD,IAAI3+B,EAMJ,OAJEA,EADExE,QAAMc,QAAQ,+BACN,IAAI27B,GAAqBliB,EAAE9b,MAAO89B,IAElC,IAAIF,GAAe9hB,EAAE9b,MAAO89B,IAEjCiP,EAAQ9M,gBAAgBl6B,EAAS,CAAC+V,GAAIA,EAAEnO,SChBpC6pC,GAAOnJ,GAAgB,CAACxQ,UAPxB8R,6FASA8H,GAA2B,CACtCvK,WAAYwK,OACZtK,YAAa,QACbC,WAAYmK,ICPDG,GAAQtJ,GAAgB,CAACxQ,UAJxB8R,4FAMDiI,GAA4B,CACvC1K,WAAY2K,QACZzK,YAAa,QACbC,WAAYsK,ICVRG,GAAM,gBAECC,GAAgBpJ,GAAiB,CAC5C9Q,UAAWia,GACXxJ,gBAAiBwJ,GACjBlJ,iBAAiB,EACjBL,cAAeyJ,KAGJC,GAA0B,CACrC/K,WAAYgL,MACZ9K,YAAa,QACbC,WAAY0K,UCfDI,GAKX1oC,YAAYC,EAAuB0oC,GAHnCzoC,iBAAwB,GAItBA,KAAKD,YAAcA,EACnBC,KAAKi4B,cAAgBwQ,EAAOlzC,KAAI,CAAC8J,EAAG1J,IAAM,IAAIA,MAE9C,MAAM+yC,EAAqB,GAE3B1oC,KAAKi4B,cAAcp6B,SAAQ8qC,IACzBD,EAASp8B,KAAK,UAAUq8B,UAAiBA,sBAI3C,MAAMC,EAAY5oC,KAAKi4B,cACA1iC,KAAIozC,GACI,IAAIA,MAEZ3yC,KAAK,OAE5BgK,KAAKI,SAAW,kCAEVsoC,EAAS1yC,KAAK,2CAEC4yC,uDC1BZC,GAOX/oC,YAAYC,EAAuB0oC,GALnCzoC,iBAAwB,GAExBA,mBAAe,EACfA,mBAAe,EAGbA,KAAKD,YAAcA,EACnBC,KAAKi4B,cAAgBwQ,EAAOlzC,KAAI,CAAC8J,EAAG1J,IAAM,IAAIA,MAE9C,MAAM+yC,EAAqB,GAE3B1oC,KAAKi4B,cAAcp6B,SAAQ8qC,IACzBD,EAASp8B,KAAK,SAASq8B,UAAiBA,sBAI1C,MAAMC,EAAY5oC,KAAKi4B,cACA1iC,KAAIozC,GACI,IAAIA,MAEZ3yC,KAAK,OAE5BgK,KAAKI,SAAW,kCAEVsoC,EAAS1yC,KAAK,0CAEA4yC,iDCKjB,MAAME,GAA2B,CACtCvL,WAAYwL,OACZtL,YAAa,QACbC,oBA/BcsL,EAAK7L,GAEnB,MAAMzoB,OAACA,EAAM0oB,QAAEA,GAAWD,EAEpB8L,EAAUv0B,EAChB,GAAuB,IAAnBu0B,EAAQ7zC,OACV,OAAO8nC,GAAS,CAACxoB,OAAQ,CAACvI,EAAG88B,EAAQ,IAAK7L,QAAAA,IAI5C,GAAI6L,EAAQ7zC,OAASxD,QAAM4N,IAAI,gCAAiC,CAC9D,MAAM0pC,EAAWx4C,KAAK6mB,MAAM0xB,EAAQ7zC,OAAS,GACvC+zC,EAAWH,EAAK,CAACt0B,OAAQu0B,EAAQpzC,MAAM,EAAGqzC,GAAW9L,QAAAA,IACrDgM,EAAYJ,EAAK,CAACt0B,OAAQu0B,EAAQpzC,MAAMqzC,GAAW9L,QAAAA,IACzD,OAAO4L,EAAK,CAACt0B,OAAQ,CAACy0B,EAAUC,GAAYhM,QAAAA,IAG9C,MAAMp/B,EACFirC,EAAQ1zC,KAAIuI,GAAKA,EAAEE,QAAOglB,QAAO,CAACqmB,EAAIC,IAAOnqB,aAAWkqB,EAAIC,KAC1Db,EAASQ,EAAQ1zC,KAAIuI,GAAKA,EAAEzN,QAG5B+F,EADcxE,QAAMc,QAAQ,cAE9B,IAAIm2C,GAAkBI,EAAQ,GAAG54C,MAAOo4C,GACxC,IAAID,GAAYS,EAAQ,GAAG54C,MAAOo4C,GACtC,OAAOrL,EAAQ9M,gBAAgBl6B,EAAS6yC,EAASjrC,KCqB5C,MAAMurC,GAA0B,CACrChM,WAAYiM,MACZ/L,YAAa,QACbC,oBA/CEP,GAEF,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3BhxB,EAACA,GAAKuI,GACNsQ,KAACA,EAAIsf,SAAEA,GAAYztB,EAEnBgO,EAAQ1Y,EAAE9b,MAAM+E,OAEhBovC,EAAWj0C,OAAK20B,eAAeF,EAAM7Y,EAAE9b,OAC7C,IAAIo0C,EAAOD,EACX,MAAME,EAAe73B,eAAa83B,mBAAmBF,EAAM5f,GAC3D,IAAI4kB,EAAYt9B,EACI,MAAhBu4B,IACF+E,EAAYjE,GAAU,CAAC9wB,OAAQ,CAACvI,EAAAA,GAAIixB,QAAAA,EAASvmB,MAAO,CAAC+N,KAAM8f,KAC3DD,EAAO53B,eAAai4B,iBAAiBL,EAAKrvC,OAAQyvB,IAGpDhY,eAAak4B,2BAA2B,MAAON,EAAM5f,GACrD,MAAOxW,EAAU2Q,GACbnS,eAAaoS,0BAA0BwqB,EAAUp5C,MAAOo0C,GAGtDiF,EACF5H,GAAQ,CAACptB,OAAQ,CAACvI,EAAGs9B,GAAYrM,QAAAA,EAASvmB,MAAO,CAACxmB,MAAO,EAAE,EAHhDE,OAAKC,cAAcwuB,OAI5BmmB,EAAUniB,GAAO0mB,EAAKA,EAAI1rC,MAAO,MAAOo/B,GAE9C,IAAInvB,EACJ,GAAIq2B,EAAU,CAEZr2B,EAAM6zB,GAAQ,CAACptB,OAAQ,CAACvI,EAAGg5B,GAAU/H,QAAAA,EAASvmB,MAAO,CAACxmB,MADrCwc,eAAao4B,qBAAqB52B,EAAUm2B,WAG7Dv2B,EAAM6zB,GAAQ,CAACptB,OAAQ,CAACvI,EAAGg5B,GAAU/H,QAAAA,EAASvmB,MAAO,CAACxmB,MAAOge,KAU/D,OAPA+uB,EAAQ5M,8BAA8BkZ,GACtCtM,EAAQ5M,8BAA8B2U,GAElB,MAAhBT,GACFtH,EAAQ5M,8BAA8BiZ,GAGjCx7B,ICEF,MAAM07B,GAA0B,CACrCpM,WAAYqM,MACZnM,YAAa,QACbC,oBA/CEP,GAEF,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3BhxB,EAACA,GAAKuI,GACNsQ,KAACA,EAAIsf,SAAEA,GAAYztB,EAEnBgO,EAAQ1Y,EAAE9b,MAAM+E,OAEhBovC,EAAWj0C,OAAK20B,eAAeF,EAAM7Y,EAAE9b,OAC7C,IAAIo0C,EAAOD,EACX,MAAME,EAAe73B,eAAa83B,mBAAmBF,EAAM5f,GAC3D,IAAI4kB,EAAYt9B,EACI,MAAhBu4B,IACF+E,EAAYjE,GAAU,CAAC9wB,OAAQ,CAACvI,EAAAA,GAAIixB,QAAAA,EAASvmB,MAAO,CAAC+N,KAAM8f,KAC3DD,EAAO53B,eAAai4B,iBAAiBL,EAAKrvC,OAAQyvB,IAGpDhY,eAAak4B,2BAA2B,MAAON,EAAM5f,GACrD,MAAOxW,EAAU2Q,GACbnS,eAAaoS,0BAA0BwqB,EAAUp5C,MAAOo0C,GAGtDiF,EACF5H,GAAQ,CAACptB,OAAQ,CAACvI,EAAGs9B,GAAYrM,QAAAA,EAASvmB,MAAO,CAACxmB,MAAO,EAAE,EAHhDE,OAAKC,cAAcwuB,OAI5BmmB,EAAUniB,GAAO0mB,EAAKA,EAAI1rC,MAAO,MAAOo/B,GAE9C,IAAInvB,EACJ,GAAIq2B,EAAU,CAEZr2B,EAAM6zB,GAAQ,CAACptB,OAAQ,CAACvI,EAAGg5B,GAAU/H,QAAAA,EAASvmB,MAAO,CAACxmB,MADrCwc,eAAao4B,qBAAqB52B,EAAUm2B,WAG7Dv2B,EAAM6zB,GAAQ,CAACptB,OAAQ,CAACvI,EAAGg5B,GAAU/H,QAAAA,EAASvmB,MAAO,CAACxmB,MAAOge,KAU/D,OAPA+uB,EAAQ5M,8BAA8BkZ,GACtCtM,EAAQ5M,8BAA8B2U,GAElB,MAAhBT,GACFtH,EAAQ5M,8BAA8BiZ,GAGjCx7B,UC9CI47B,GAKX/pC,YACIwiC,EAAqCntB,EACrC20B,GANJ9pC,mBAAgB,CAAC,KAOf,MAAMwiC,WAACA,EAAUhf,UAAEA,EAASif,QAAEA,GAAWH,EACpCwH,GACH9pC,KAAKi4B,cAAc3rB,KAAK,gBAE1BtM,KAAKD,YAAc,CAACyjB,EAAWif,GAC/B,MAAMsH,EAAiB,QAAP50B,EAAgB,IAAM,IAChC60B,EAAeF,EACjB,gBACA,+CAEJ9pC,KAAKI,SAAW,sKAKcoiC,6HAKJA,oCACNwH,gFAEED,yKC5BbE,GAOXnqC,YACIzP,EAAiBmyC,EAAoBrtB,EACrC20B,GARJ9pC,mBAAgB,CAAC,KAGjBA,mBAAe,EACfA,mBAAe,EAKbzP,OAAKwN,OACD1N,EAAM+E,OAAS,GACf,IAAM,aACF+f,EAAG1G,OAAO,GAAGC,cACbyG,EAAGtf,MAAM,+CACjB,MAAMoe,EAAS5jB,EAAMA,EAAM+E,OAAS,GAC9BqtC,EAAU/xC,KAAKC,KAAKsjB,EAASuuB,GACnCxiC,KAAKD,YAAc1P,EAAMwF,MAAM,GAAI,GAC/B4sC,EAAU,GACZziC,KAAKD,YAAYuM,KAAKm2B,GAEnBqH,GACH9pC,KAAKi4B,cAAc3rB,KAAK,gBAE1B,MAAM+B,EAAWrO,KAAKD,YAChBgU,EAAO1F,EAASjZ,OAChB4I,EAAQ+Q,GAAkBgF,GAC1BhV,EAASqrB,GAAY,SAAUrW,GAErC,IAAIm2B,EACAC,EACJ,GAAgB,IAAZ1H,EAAe,CACjB0H,EAAap2B,EAAO,EACpB,MAAMq2B,EAAiBr7B,GAAkBo7B,GACzCD,EAAiB,aACbE,kBAA+BA,KAAkBrrC,EAAO/I,0BACtD+I,EAAOgV,EAAO,gBAChBq2B,kBAA+BA,KAAkBrrC,EAAO/I,0BACtD+I,EAAOgV,EAAO,gBAChBq2B,kBAA+BA,KAAkBrrC,EAAO/I,0BACtD+I,EAAOgV,EAAO,gBAChBq2B,kBAA+BA,KAAkBrrC,EAAO/I,0BACtD+I,EAAOgV,EAAO,WAEpBo2B,EAAap2B,EACbm2B,EAAiB,aACblsC,qCACEe,EAAOgV,EAAO,gBAChB/V,qCACEe,EAAOgV,EAAO,gBAChB/V,qCACEe,EAAOgV,EAAO,gBAChB/V,qCACEe,EAAOgV,EAAO,MAEtB,MAAMuW,EAAW,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KAAKz0B,MAAM,EAAGs0C,GACnDE,EAAY,IAAM/f,EAAS6f,EAAa,GACxCG,EAAchgB,EAAS/0B,KAAI4W,GAAK,OAASA,IACzCo+B,EACFngB,GAAY,aAAc+f,EAAa,GAAGnT,OAAO,WAC/CwT,EACFpgB,GAAY,aAAc+f,EAAa,GAAGnT,OAAO,WAC/CyT,EACFrgB,GAAY,aAAc+f,EAAa,GAAGnT,OAAO,WAC/C0T,EACFtgB,GAAY,aAAc+f,EAAa,GAAGnT,OAAO,WAE/C+S,EAAiB,QAAP50B,EAAgB,cAAgB,WAC1Cw1B,EAAoBb,EAAY,GAAK,yDACOS,EAAWv0C,iEACXw0C,EAAWx0C,iEACXy0C,EAAWz0C,iEACX00C,EAAW10C,aAEvD40C,EAAa,kCACGL,EAAWv0C,kDACEw0C,EAAWx0C,uDACXy0C,EAAWz0C,qEACG00C,EAAW10C,gBAEtD60C,EAAgCf,EAAY,GAAK,wCACtBQ,EAAYt0C,wDACLs0B,EAASt0B,4DACJs0B,EAASz0B,OAAO,GAAGG,qBAGhEgK,KAAKI,SAAW,6BACMkqC,EAAYt0C,6CACLs0B,EAASt0B,iDACJs0B,EAASz0B,OAAO,GAAGG,6BAEjD60C,mCAEE7sC,4DACkBe,EAAOgV,EAAO,QAAQ1F,EAAS0F,EAAO,GAAK,iCAC3ChV,EAAOgV,EAAO,QAAQ1F,EAAS0F,EAAO,GAAK,eAC7Dm2B,6CAC+BG,gBAAwBA,2BAC3CA,gBAAwBA,QAAgB7H,sGAGnCoI,qCAEGpI,mDAElBmI,iCACiBC,mGAGVb,4dC5GnB,SAASe,GACL1N,EAA2BjxB,EAAe82B,EAC1C8H,EAA2B,MAC7B,IAAIvnB,EAAYrX,EAAE9b,MAAM,GACpB4jB,EAAS9H,EAAE9b,MAAM,GACD,MAAhB06C,IACFvnB,EAAYunB,EAAa16C,MAAM,GAC/B4jB,EAAS82B,EAAa16C,MAAM,IAE9B,MAAMmyC,EAAa31B,eAAa22B,yBAAyBvvB,GACnDquB,EACF,CAACE,WAAAA,EAAYvuB,OAAAA,EAAQuP,UAAAA,EAAWif,QAAS/xC,KAAKC,KAAKsjB,EAASuuB,IAC1DpsC,EACF,IAAIyzC,GAAiBvH,EAAYW,EAA4B,MAAhB8H,GAC3Cr2B,EAAS,CAACvI,GACI,MAAhB4+B,GACFr2B,EAAOpI,KAAKy+B,GAEd,MAAMtsC,EAAS2+B,EAAQ9M,gBAAgBl6B,EAASse,EAAQ,SAExD,GAAwB,IAApBjW,EAAOpO,MAAM,GACf,OAAOoO,EAET,MAAM8I,EAASujC,GAAU1N,EAASjxB,EAAG82B,EAAYxkC,GAEjD,OADA2+B,EAAQ5M,8BAA8B/xB,GAC/B8I,EAGT,SAASyjC,GACL5N,EAA2BjxB,EAAe82B,EAC1C8H,EAA2B,MAC7B,MAAM38B,EAA0B,MAAhB28B,EAAuBA,EAAa16C,MAAQ8b,EAAE9b,MACxD4jB,EAAS7F,EAAQA,EAAQhZ,OAAS,GAClCotC,EAAa31B,eAAa22B,yBAAyBvvB,GACnD7d,EAAU,IAAI6zC,GAChB77B,EAASo0B,EAAYS,EAA4B,MAAhB8H,GAC/Br2B,EAAyB,MAAhBq2B,EAAuB,CAAC5+B,GAAK,CAACA,EAAG4+B,GAC1CtsC,EAAS2+B,EAAQ9M,gBAAgBl6B,EAASse,EAAQ,SACxD,GAAIjW,EAAOpO,MAAM+E,SAAW+W,EAAE9b,MAAM+E,OAAQ,CAC1C,MAAMmS,EAASyjC,GAAgB5N,EAASjxB,EAAG82B,EAAYxkC,GAEvD,OADA2+B,EAAQ5M,8BAA8B/xB,GAC/B8I,EAET,OAAO9I,WAGOwsC,GACZ7N,EAA2BjxB,EAAe6Y,EAC1Cie,GACF,MAAMwB,EAAO,CAACzf,GAId,GAHAnY,eAAak4B,2BACT,MAAQ9B,EAAWx0B,OAAO,GAAGC,cAAgBu0B,EAAWptC,MAAM,GAAI4uC,EAClEt4B,EAAE9b,MAAM+E,SACPxD,QAAMc,QAAQ,sBAAwByZ,EAAE9b,MAAM+E,QAAU,EAAG,CAC9D,MAAM81C,EAA0B,IACzB78B,EAAU2Q,GACbnS,eAAaoS,0BAA0B9S,EAAE9b,MAAOo0C,GAC9CxwB,EAAS1jB,OAAKC,cAAcwuB,GAC5B0qB,EAAM5H,GAAQ,CAACptB,OAAQ,CAACvI,EAAAA,GAAIixB,QAAAA,EAASvmB,MAAO,CAACxmB,MAAO,EAAE,EAAG4jB,MAC/Di3B,EAAwB5+B,KAAKo9B,GAE7B,MAAMvE,EAAU2F,GAAU1N,EAASsM,EAAKzG,GACxCiI,EAAwB5+B,KAAK64B,GAC7B,MAAMgG,EACFrJ,GAAQ,CAACptB,OAAQ,CAACvI,EAAGg5B,GAAU/H,QAAAA,EAASvmB,MAAO,CAACxmB,MAAOge,KAI3D,OAFA68B,EAAwBrtC,SACpBC,GAAKs/B,EAAQ5M,8BAA8B1yB,KACxCqtC,EAET,OAAOH,GAAgB5N,EAASjxB,EAAG82B,GC5C9B,MAAMmI,GAA6B,CACxC7N,WAAY8N,SACZ5N,YAAa,QACbC,oBA5BEP,GAGF,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3BhxB,EAACA,GAAKuI,GACNsQ,KAACA,GAAQnO,EAEf,IAAI4tB,EAAOl0C,OAAK20B,eAAeF,EAAM7Y,EAAE9b,OACvC,MAAMq0C,EAAe73B,eAAa83B,mBAAmBF,EAAMt4B,EAAE9b,MAAM+E,QACnE,IAAIk2C,EAAKn/B,EACT,MAAM++B,EAA0B,GACZ,MAAhBxG,IACF4G,EAAK9F,GAAU,CAAC9wB,OAAQ,CAACvI,EAAAA,GAAIixB,QAAAA,EAASvmB,MAAO,CAAC+N,KAAM8f,KACpDwG,EAAwB5+B,KAAKg/B,GAC7B7G,EAAO53B,eAAai4B,iBAAiBL,EAAKrvC,OAAQk2C,EAAGj7C,MAAM+E,SAG7DyX,eAAak4B,2BAA2B,SAAU,CAACN,EAAK,IAAK6G,EAAGj7C,MAAM+E,QACtE,MAAMwqC,EAAMqL,GAAgB7N,EAASkO,EAAI7G,EAAK,GAAI,OAIlD,OAFAyG,EAAwBrtC,SACpBC,GAAKs/B,EAAQ5M,8BAA8B1yB,KACxC8hC,ICGF,MAAM2L,GAA6B,CACxChO,WAAYiO,SACZ/N,YAAa,QACbC,oBA7BEP,GAGF,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3BhxB,EAACA,GAAKuI,GACNsQ,KAACA,GAAQnO,EAEf,IAAI4tB,EAAOl0C,OAAK20B,eAAeF,EAAM7Y,EAAE9b,OACvC,MAAMq0C,EAAe73B,eAAa83B,mBAAmBF,EAAMt4B,EAAE9b,MAAM+E,QACnE,IAAIk2C,EAAKn/B,EACT,MAAM++B,EAA0B,GACZ,MAAhBxG,IACF4G,EAAK9F,GAAU,CAAC9wB,OAAQ,CAACvI,EAAAA,GAAIixB,QAAAA,EAASvmB,MAAO,CAAC+N,KAAM8f,KACpDwG,EAAwB5+B,KAAKg/B,GAC7B7G,EAAO53B,eAAai4B,iBAAiBL,EAAKrvC,OAAQk2C,EAAGj7C,MAAM+E,SAG7DyX,eAAak4B,2BAA2B,SAAU,CAACN,EAAK,IAAK6G,EAAGj7C,MAAM+E,QAEtE,MAAMwqC,EAAMqL,GAAgB7N,EAASkO,EAAI7G,EAAK,GAAI,OAIlD,OAFAyG,EAAwBrtC,SACpBC,GAAKs/B,EAAQ5M,8BAA8B1yB,KACxC8hC,IClBI6L,GAAO/M,GAAgB,CAACxQ,UAPxB8R,6FASA0L,GAA2B,CACtCnO,WAAYoO,OACZlO,YAAa,QACbC,WAAY+N,ICVDG,GAAQlN,GAAgB,CAACxQ,UAFxB8R,8DAID6L,GAA4B,CACvCtO,WAAYuO,QACZrO,YAAa,QACbC,WAAYkO,ICHDG,GAAOrN,GAAgB,CAACxQ,UAJxB8R,iDAMAgM,GAA2B,CACtCzO,WAAY0O,OACZxO,YAAa,QACbC,WAAYqO,ICGDG,GACTlN,GAAiB,CAAC9Q,UAbRie,mFAa0BxN,gBATnB,iTAWRyN,GAA4B,CACvC7O,WAAY8O,QACZ5O,YAAa,QACbC,WAAYwO,ICdDI,GAAQ5N,GAAgB,CAACxQ,UAJxB8R,qHAMDuM,GAA4B,CACvChP,WAAYiP,QACZ/O,YAAa,QACbC,WAAY4O,UCXDG,GAKX3sC,YACI4sC,EAAmCC,EACnCC,EAA2BC,GAAmB,EAC9CC,GAAsB,GACxB,GARF9sC,mBAAgB,CAAC,KAQE,QAAb2sC,GAAsBC,EACxB,MAAM,IAAIx+C,MAAM,8CAGlB,MAAM2+C,EAAcL,EAASK,YACvBC,EAAeN,EAASM,aACxBC,EAAcP,EAASO,YACvBC,EAAiBR,EAASQ,eAC1BC,EAAgBT,EAASS,cACzBC,EAAwBV,EAASU,sBACjCC,EAAuBX,EAASW,qBAEhCC,EAASZ,EAASa,QAAQC,IAC1BC,EAAUf,EAASa,QAAQ7xB,KACjC1b,KAAKD,YAAc2sC,EAASr+B,SAE5B,MAAMq/B,EAAyB,QAAbf,EACZgB,EAA0B,cAAcjB,EAASkB,oBACnDlB,EAASmB,mBAAmBnB,EAASoB,iBACnCC,EACF,SAASrB,EAASmB,mBAAmBnB,EAASoB,iBAElD,IAAI5K,EAAsB,MAM1B,GALKwK,IAEHxK,EAAsB,gBAGpB0J,EAAkB,CACpB,MAAMzJ,EAAY,KAyDlB,YAvDAnjC,KAAKI,SAAW,yCACgB4sC,MAAiBC,yCACpBK,MAAWG,qiBAkBZL,2BACZF,gFAGYR,EAASkB,4FAIPP,6BACZF,oFAGYT,EAASmB,0WAUnB1K,yIAIhB0J,EAAoBC,EAAsBa,EACAI,EACvB,QAAQV,0HAYjC,IAAI56C,EAAc,GAAGk6C,KAAYA,KAAYA,sEAE5B,QAAbA,IACFl6C,EAAc,oBAGhB,MAAMu7C,EAAuD,EAA9Bt9C,KAAK6mB,MAAMw1B,EAAc,GAClDkB,EAA2BlB,EAAc,EAEzCnK,EAAgB,eACd8K,+HAOR1tC,KAAKI,SAAW,uCACgB4sC,MAAiBC,uCACpBK,MAAWG,gDACFvK,8KAMZwJ,EAASmB,igBAkBL3K,6FAIFkK,yBACZF,4EAGYR,EAASkB,sFAIPI,uDACKb,4HAIEA,sDACIA,sDACAA,wCAG/BvK,mDAGkBoL,qBACa,IAA7BC,8NAQFrL,2BACsC,IAA7BqL,4HAGkBd,gHAK3BvK,2BACsC,IAA7BqL,4HAGkBd,sDACIA,4EAI/BvK,gDAGMnwC,4BAMPy7C,GAKXpuC,YACI4sC,EAAmCC,EACnCC,EAA2BC,GAAmB,EAC9CC,GAAsB,GACxB,GARF9sC,mBAAgB,CAAC,KAQE,QAAb2sC,GAAsBC,EACxB,MAAM,IAAIx+C,MAAM,8CAGlB,MAAM2+C,EAAcL,EAASK,YACvBoB,EAAczB,EAASyB,YACvBnB,EAAeN,EAASM,aACxBC,EAAcP,EAASO,YACvBmB,EAAgB1B,EAAS0B,cACzBlB,EAAiBR,EAASQ,eAC1BC,EAAgBT,EAASS,cACzBkB,EAAuB3B,EAAS2B,qBAChCjB,EAAwBV,EAASU,sBACjCC,EAAuBX,EAASW,qBAEhCiB,EAAW5B,EAASa,QAAQgB,MAC5BjB,EAASZ,EAASa,QAAQC,IAC1BC,EAAUf,EAASa,QAAQ7xB,KACjC1b,KAAKD,YAAc2sC,EAASr+B,SAE5B,MAAMq/B,EAAyB,QAAbf,EAElB,IAAIzJ,EAAsB,MAM1B,GALKwK,IAEHxK,EAAsB,gBAGpB0J,EAAkB,CACpB,MAAMzJ,EAAY,KAyElB,YAvEAnjC,KAAKI,SAAW,sDAEF+tC,MAAgBnB,MAAiBC,yCAClBqB,MAAahB,MAAWG,qkBAkBzBY,2BACZD,gFAGY1B,EAAS8B,2FAIPpB,6BACZF,oFAGYR,EAASkB,kGAIPP,+BACZF,wFAGYT,EAASmB,+XAUnB1K,+IAIlB0J,EACKC,EACI,cAAcJ,EAAS8B,mBACnB9B,EAASkB,oBAAoBlB,EAASmB,mBACtCnB,EAASoB,kBACb,UAAUpB,EAASkB,oBACflB,EAASmB,mBAAmBnB,EAASoB,kBAC9C,QAAQV,OAA2BC,mCACpBA,6IAazB,IAAI56C,EAAc,GAAGk6C,KAAYA,KAAYA,sEAE5B,QAAbA,IACFl6C,EAAc,oBAGhB,MAAMu7C,EAAuD,EAA9Bt9C,KAAK6mB,MAAMw1B,EAAc,GAClDkB,EAA2BlB,EAAc,EAEzCnK,EAAgB,eACd8K,+HAOR1tC,KAAKI,SAAW,gDAEJ+tC,MAAgBnB,MAAiBC,uCAChBqB,MAAahB,MAAWG,gDACfvK,uLAMZwJ,EAASmB,okBAmBL3K,6FAIFmL,yBACZD,4EAGY1B,EAAS8B,qFAIPpB,yBACdF,gFAGcR,EAASkB,4FAIPI,yDACKb,2IAIMA,6DACIA,6DACAA,6CAGnCvK,uDAGkBoL,uBACa,IAA7BC,iPAQFrL,6BACsC,IAA7BqL,2IAGsBd,yHAK/BvK,6BACsC,IAA7BqL,2IAGsBd,6DACIA,mFAInCvK,sDAGMnwC,iCChZf,MAAMg8C,GAA8B,CACzClR,WAAYmR,UACZjR,YAAa,QACbC,oBA9BsBP,GAKtB,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3BhxB,EAACA,GAAKuI,EACZlX,GAAiB2O,EAAG,WACpB,MAAMwiC,WAACA,EAAU1vC,QAAEA,EAAO9J,IAAEA,EAAGy5C,gBAAEA,GAAmB/3B,EAGpDtmB,OAAKwN,OACD8O,eAAagiC,+BAA+B5vC,EAH9B,IAId,IACI,wEAAeA,wBAEvB,MAAMytC,EAAW7/B,eAAaiiC,kBAC1B3iC,EAAE9b,MAA2Cs+C,EAAY1vC,EAR3C,EASH9J,EAAKy5C,GACpB,GAA6B,IAAzBlC,EAASK,aAA+C,IAA1BL,EAASqC,cACvCx+C,OAAKqL,YAAY8wC,EAASt+B,QAASs+B,EAASr+B,UAC9C,OAAO6uB,GAAS,CAACxoB,OAAQ,CAACvI,EAAAA,GAAIixB,QAAAA,IAEhC,MAAM4R,EAAiB,IAAIvC,GAAcC,EAAU,OAAO,GAC1D,OAAOtP,EAAQ9M,gBAAgB0e,EAAgB,CAAC7iC,GAAI,aCT/C,MAAM8iC,GAAgC,CAC3C1R,WAAY2R,YACZzR,YAAa,QACbC,oBApBwBP,GAKxB,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3BhxB,EAACA,GAAKuI,GACNi6B,WAACA,EAAU1vC,QAAEA,EAAO9J,IAAEA,EAAGy5C,gBAAEA,EAAeO,WAAEA,GAAct4B,EAG1D61B,EAAW7/B,eAAauiC,kBAC1BjjC,EAAE9b,MAAmDs+C,EAAY1vC,EAHzB,CAAC,EAAG,EAAG,GAIpC9J,EAAKy5C,EAAiBO,GAC/BH,EAAiB,IAAId,GAAcxB,EAAU,OAAO,GAC1D,OAAOtP,EAAQ9M,gBAAgB0e,EAAgB,CAAC7iC,GAAI,mBCfzCkjC,GAKXvvC,YAAY4sC,GAJZ1sC,mBAAgB,CAAC,MAKfA,KAAKD,YAAc2sC,EAASt+B,QAC5B,MAAM2gC,EAAerC,EAASqC,aACxBhC,EAAcL,EAASK,YACvBC,EAAeN,EAASM,aACxBC,EAAcP,EAASO,YACvBC,EAAiBR,EAASQ,eAC1BC,EAAgBT,EAASS,cACzBC,EAAwBV,EAASU,sBACjCC,EAAuBX,EAASW,qBAEhCC,EAASF,EAAwB,EAAIV,EAASa,QAAQC,IACtDC,EAAUJ,EAAuB,EAAIX,EAASa,QAAQ7xB,KAEtD4zB,EAAgB,GAAKP,EAAehC,GAE1C/sC,KAAKI,SAAW,oCACaktC,MAAWG,gDACF6B,kdAcVlC,yBACZF,uDAC4BF,6CAEZN,EAAS6C,6IAKXlC,wBACfF,yDAC+BF,+CAEZP,EAAS8C,qTAiBlCC,GAKX3vC,YAAY4sC,GAJZ1sC,mBAAgB,CAAC,MAKfA,KAAKD,YAAc2sC,EAASt+B,QAC5B,MAAMshC,EAAchD,EAASgD,YACvBX,EAAerC,EAASqC,aACxBhC,EAAcL,EAASK,YACvBoB,EAAczB,EAASyB,YACvBnB,EAAeN,EAASM,aACxBC,EAAcP,EAASO,YACvBmB,EAAgB1B,EAAS0B,cACzBlB,EAAiBR,EAASQ,eAC1BC,EAAgBT,EAASS,cACzBkB,EAAuB3B,EAAS2B,qBAChCjB,EAAwBV,EAASU,sBACjCC,EAAuBX,EAASW,qBAEhCiB,EAAWD,EAAuB,EAAI3B,EAASa,QAAQgB,MACvDjB,EAASF,EAAwB,EAAIV,EAASa,QAAQC,IACtDC,EAAUJ,EAAuB,EAAIX,EAASa,QAAQ7xB,KAEtD4zB,EAAgB,GAAKI,EAAcX,EAAehC,GAExD/sC,KAAKI,SAAW,oCACakuC,MAAahB,MAAWG,gDACf6B,wiBAiBVjB,yBACZD,uDAC4BD,6CAEZzB,EAASiD,4IAKXvC,2BACZF,yDAC4BF,+CAEZN,EAAS6C,sKAMXlC,6BACZF,2DAC4BF,iDAEZP,EAAS8C,qVCpH1C,MAAMI,GAAoC,CAC/CrS,WAAYsS,gBACZpS,YAAa,QACbC,oBArB4BP,GAK5B,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3B2S,GAACA,EAAEl7B,MAAEA,GAASF,EACdvI,EAAIyI,GACJ+5B,WAACA,EAAU1vC,QAAEA,EAAO9J,IAAEA,EAAGy5C,gBAAEA,GAAmB/3B,EAG9C61B,EAAW7/B,eAAauiC,kBAC1BjjC,EAAE9b,MAAmDs+C,EAAY1vC,EAHzB,CAAC,EAAG,EAAG,GAIpC9J,EAAKy5C,GACdmB,EAAyB,IAAIN,GAAyB/C,GAC5D,OAAOtP,EAAQ9M,gBAAgByf,EAAwB,CAACD,GAAK3jC,EAAEnO,SCI1D,MAAMgyC,GAAkC,CAC7CzS,WAAY0S,cACZxS,YAAa,QACbC,oBArB0BP,GAK1B,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3B2S,GAACA,EAAEl7B,MAAEA,GAASF,EACdvI,EAAIyI,EACVpX,GAAiB,CAACsyC,EAAIl7B,GAAQ,eAC9B,MAAM+5B,WAACA,EAAU1vC,QAAEA,EAAO9J,IAAEA,GAAO0hB,EAE7B61B,EAAW7/B,eAAaiiC,kBAC1B3iC,EAAE9b,MAA2Cs+C,EAAY1vC,EACzD,EAAmB9J,GACjB46C,EAAyB,IAAIV,GAAyB3C,GAC5D,OAAOtP,EAAQ9M,gBAAgByf,EAAwB,CAACD,GAAK3jC,EAAEnO,SCH1D,MAAMkyC,GAAkC,CAC7C3S,WAAY4S,cACZ1S,YAAa,QACbC,oBAf0BP,GAK1B,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3BzmB,EAACA,EAAC1F,EAAEA,GAAK0D,GACTwrB,WAACA,EAAUC,WAAEA,GAActpB,EAEjC,OAAO+uB,GAAgB,CAAClvB,EAAAA,EAAG1F,EAAAA,EAAGkvB,WAAAA,EAAYC,WAAAA,EAAY/C,QAAAA,YCX3CgT,GAKXtwC,YACI6e,EAAkB0xB,EAAqBC,EACvCC,EAA4BC,EAC5BC,GANJzwC,iBAAwB,GAOtBA,KAAKi4B,cAAgB,CAAC,IAAK,OAAQ,YACnCprB,eAAa2I,2BAA2BmJ,EAAQ0xB,GAChDxjC,eAAa2I,2BAA2BmJ,EAAQ2xB,GAEhD,IAAII,EAAgB,MACD,MAAfH,IACF1jC,eAAa2I,2BAA2BmJ,EAAQ4xB,GAChDvwC,KAAKi4B,cAAc3rB,KAAK,UACxBokC,EAAgB,0BAGlB,IAAIC,EAAe,MACD,MAAdH,IACF3jC,eAAa2I,2BAA2BmJ,EAAQ6xB,GAChDxwC,KAAKi4B,cAAc3rB,KAAK,SACxBqkC,EAAe,yBAGjB3wC,KAAKD,YAAc4e,EACnB3e,KAAKI,SAAW,uLAKKswC,6BACDC,gEACmCF,iGCnC9CG,GAOX9wC,YACI6e,EAAkB0xB,EAAqBC,EACvCC,EAA4BC,EAC5BC,GANJzwC,mBAAe,EACfA,mBAAe,EAMbA,KAAKi4B,cAAgB,CAAC,IAAK,OAAQ,YACnCprB,eAAa2I,2BAA2BmJ,EAAQ0xB,GAChDxjC,eAAa2I,2BAA2BmJ,EAAQ2xB,GAEhD,IAAII,EAAgB,YACD,MAAfH,IACF1jC,eAAa2I,2BAA2BmJ,EAAQ4xB,GAChDvwC,KAAKi4B,cAAc3rB,KAAK,UACxBokC,EAAgB,0BAGlB,IAAIC,EAAe,YACD,MAAdH,IACF3jC,eAAa2I,2BAA2BmJ,EAAQ6xB,GAChDxwC,KAAKi4B,cAAc3rB,KAAK,SACxBqkC,EAAe,yBAGjB3wC,KAAKD,YAAc4e,EACnB3e,KAAKI,SAAW,gDAEIswC,4BACDC,qMAMkCF,wECnClD,MAoDMI,GAAgC,CAC3CtT,WAAYuT,iBACZrT,YAAa,QACbC,WAnDiB,EAAEhpB,OAAAA,EAAQ0oB,QAAAA,EAASvmB,MAAAA,MACpC,MAAM1K,EAACA,EAAC4kC,KAAEA,EAAIC,SAAEA,EAAQ/+B,OAAEA,EAAMg/B,MAAEA,GAASv8B,EAE3CnkB,OAAKwN,OACDgzC,EAAK1gD,MAAM+E,SAAW47C,EAAS3gD,MAAM+E,QACrC,IAAM,iFAEV7E,OAAKwN,OACS,MAAVkU,GAAkB8+B,EAAK1gD,MAAM+E,SAAW6c,EAAO5hB,MAAM+E,QACrD,IAAM,+EAEV7E,OAAKwN,OACQ,MAATkzC,GAAiBF,EAAK1gD,MAAM+E,SAAW67C,EAAM5gD,MAAM+E,QACnD,IAAM,8EAGV,IAAIq7C,gBAACA,GAAmB55B,EACD,MAAnB45B,IACFA,EAAkB,MAGpB,MAAMS,EAAc,CAAC/kC,EAAG4kC,EAAMC,GAE9B,IAAIT,EAAc,KACJ,MAAVt+B,IACFs+B,EAAct+B,EAAO5hB,MACrB6gD,EAAY5kC,KAAK2F,IAGnB,IAAIu+B,EAAa,KACJ,MAATS,IACFT,EAAaS,EAAM5gD,MACnB6gD,EAAY5kC,KAAK2kC,IAGnB,MAAM76C,EAAUxE,QAAMc,QAAQ,4BAC1B,IAAIk+C,GACAzkC,EAAE9b,MAAO0gD,EAAK1gD,MAAO2gD,EAAS3gD,MAAOkgD,EAAaC,EAClDC,GACJ,IAAIL,GACAjkC,EAAE9b,MAAO0gD,EAAK1gD,MAAO2gD,EAAS3gD,MAAOkgD,EAAaC,EAClDC,GAIR,OAFIrT,EAAQ9M,gBAAgBl6B,EAAS86C,EAAaA,EAAY,GAAGlzC,eCnDtDmzC,GAOXrxC,YAAYsxC,GANZpxC,mBAAgB,CAAC,UAOfA,KAAKD,YAAcqxC,EACnBpxC,KAAK+T,KAAOq9B,EAASh8C,OAErB,MAAM4I,EAAQ+Q,GAAkB/O,KAAK+T,MACrC/T,KAAKyN,eAAiB,CAAC,CAACL,KAAM,QAASO,WAAY3N,KAAK+T,KAAMrG,KAAM,QACpE,MAAMod,EAsBV,SAAmB/W,GACjB,GAAa,IAATA,EACF,MAAO,YACF,GAAIA,GAAQ,EACjB,OAAOhV,GAAOlJ,MAAM,EAAGke,GAAMxe,KAAI4W,GAAK,aAAeA,IAAGnW,KAAK,KAE7D,MAAM5H,MAAM,oBAAoB2lB,0BA5BXs9B,CAAUrxC,KAAK+T,MAEpC,IAAIu9B,EAIJA,EAAO,aACDtzC,yBACAA,0CALWozC,EAAS77C,KAAI,CAAC8J,EAAG1J,IACzB,aAAaoJ,GAAOpJ,cAAcA,eAAeoJ,GAAOpJ,QAKlDK,KAAK,gBAEpBgK,KAAKI,SAAW,kCAEVkxC,kCACoBxmB,uBAM9B,MAAM/rB,GAAS,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,WChC5BwyC,GASXzxC,YAAYsxC,GARZpxC,mBAAgB,CAAC,UACjBA,mBAAe,EACfA,mBAAe,EAObA,KAAKD,YAAcqxC,EACnBpxC,KAAK+T,KAAOq9B,EAASh8C,OACrB4K,KAAKyN,eAAiB,CAAC,CAACL,KAAM,QAASO,WAAY3N,KAAK+T,KAAMrG,KAAM,QACpE,MAAM1P,EAAQ+Q,GAAkB/O,KAAK+T,MAC/BhV,EAASqrB,GAAY,SAAUpqB,KAAK+T,MACpCy9B,EAAYpnB,GAAY,YAAapqB,KAAK+T,MAE1C6W,EACY,IAAd5qB,KAAK+T,KAAa,YAAc,QAAQy9B,EAAU37C,OAAO,GAAGG,UAC1Dy7C,EACF,wBAAwBD,EAAUx7C,YAAY40B,KAC5C8mB,EAAW,sBACFD,mBACL1yC,EAAOiB,KAAK+T,KAAO,QAAQq9B,EAASpxC,KAAK+T,KAAO,oBAClDy9B,EAAUxxC,KAAK+T,KAAO,2BACb09B,iBACTD,EAAUxxC,KAAK+T,KAAO,qBAGxB49B,EAAyB,IAAd3xC,KAAK+T,KAAa,GAAK,aAClChV,EAAOiB,KAAK+T,KAAO,oBACfhV,EAAOiB,KAAK+T,KAAO,QAAQq9B,EAASpxC,KAAK+T,KAAO,oBAClDy9B,EAAUxxC,KAAK+T,KAAO,2BACb09B,qBACL1yC,EAAOiB,KAAK+T,KAAO,QAAQq9B,EAASpxC,KAAK+T,KAAO,sBAClDy9B,EAAUxxC,KAAK+T,KAAO,6BACb09B,+BAKbvH,EAAiBlqC,KAAK+T,MAAQ,EAChC,qCACM/V,KAASozC,EAAS77C,KAAI,CAAC8J,EAAG1J,IAAM,SAASA,OAAMK,WACrDo7C,EAAS77C,KAAI,CAAC8J,EAAG1J,IAAM,GAAG67C,EAAU77C,QAAQoJ,EAAOpJ,cAAcA,QAC5DK,KAAK,MACdgK,KAAKI,SAAW,kCAEVpC,0CACAA,yBACAksC,+CAEAwH,cACAC,yDCrBM97C,GACZsnC,GAEF,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3BhxB,EAACA,GAAKuI,GACN4K,MAACA,EAAKhvB,KAAEA,GAAQumB,GAEf+6B,EAAQC,GAASryB,aAAWsyB,iBAAiB3lC,EAAGmT,EAAOhvB,GAG9D,GAFAkvB,aAAWuyB,kBAAkB5lC,EAAGylC,EAAQC,GAEN,IAA9BthD,OAAKC,cAAcqhD,GACrB,OAAOzU,EAAQ9H,eAAeuc,EAAO1lC,EAAEnO,MAAO,IAShD,GAAIo/B,EAAQtI,mBAAmB,CAAC3oB,KAAmB,WAAZA,EAAEnO,MAAoB,CAC3D,MAAMkkC,EAAW9E,EAAQpoB,QAAQxV,IAAI2M,EAAE4jB,QACjCgF,EAAYrM,GACdwZ,EAAStrB,OAAsBg7B,EAAQC,EAAO1lC,EAAE9b,MAAO8b,EAAEnO,OAC7D,OAAOo/B,EAAQ9H,eAAeuc,EAAO1lC,EAAEnO,MAAO+2B,GAGhD,MAAMj6B,SAACA,GAAYsiC,EAAQpoB,QAAQxV,IAAI2M,EAAE4jB,QACnCxQ,EAAcC,aAAWC,iBAAiBtT,EAAE9b,MAAOuhD,EAAQC,GACjE,GAAI/2C,IAAaykB,EAAa,CAC5B,MAAMnpB,EAAUxE,QAAMc,QAAQ,+BAC1B,IAAI6+C,GAAmBM,GACvB,IAAIV,GAAaU,GACfG,EAAe,CAACJ,GACtB,OAAOxU,EAAQ9M,gBAAgBl6B,EAAS,CAAC+V,GAAIA,EAAEnO,MAAOg0C,GAGxD,OADA5U,EAAQ/I,YAAYloB,EAAE4jB,QAjExB,SACI5jB,EAAemT,EAAiBhvB,EAAgB8sC,GAClD,MAAM8E,EAAW9E,EAAQpoB,QAAQxV,IAAI2M,EAAE4jB,QACjCjyB,EAAIs/B,EAAQ9H,eAAehlC,EAAM6b,EAAEnO,OACnCi0C,EAAa7U,EAAQpoB,QAAQxV,IAAI1B,EAAEiyB,QAEzCjK,OAAOosB,OAAOD,EAAY/P,GAC1B+P,EAAWjiB,SAAW,EACtBiiB,EAAW5hD,MAAQC,EACnB2hD,EAAWj0C,MAAQmO,EAAEnO,MACrB,IAAI2R,EACA6P,aAAWG,kBAAkBL,EAAO/uB,OAAK2O,eAAeiN,EAAE9b,QAC1D6xC,EAASrsC,QAGX8Z,GAAcuyB,EAASrsC,MAAM8Z,YAE/BsiC,EAAWp8C,MAAQ,CACjB8Z,WAAAA,EAEAukB,WAAYgO,EAASrsC,OAASqsC,EAASrsC,MAAMq+B,YAAc/nB,EAAE4jB,QAI/D,MAAMC,EAAWoN,EAAQjJ,aAAa30B,IAAIyyC,EAAWp8C,MAAMq+B,aAAe,EAE1E,OADAkJ,EAAQjJ,aAAatwB,IAAIouC,EAAWp8C,MAAMq+B,WAAYlE,EAAW,GAC1DlyB,EAwCAq0C,CAAahmC,EAAGylC,EAAQC,EAAOzU,GAGjC,MAAMgV,GAA4B,CACvC7U,WAAY8U,QACZ5U,YAAa,QACbC,WAAY7nC,ICrBDy8C,GAAqC,CAChD/U,WAAYgV,iBACZ9U,YAAa,QACbC,WArD6BP,IAK7B,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3BhxB,EAACA,GAAKuI,GACN89B,WAACA,EAAUC,MAAEA,GAAS57B,EAE5BtmB,OAAKwN,OACDoO,EAAE9b,MAAM+E,QAAU,GAClB,IAAM,yEAEV,MAAMgqB,EAAOozB,EAAWxvB,QAAO,CAACtM,EAAG1F,IAAM0F,EAAI1F,IAEvCm6B,EAAWt+B,eAAa6lC,YAAYvmC,EAAE9b,MAAOmiD,EAAYpzB,GACzDuzB,EAAW9lC,eAAa+lC,YAAYzH,EAAS/1C,OAAQo9C,EAAWp9C,QAChEy9C,EACFhmC,eAAaimC,oBAAoB3mC,EAAE9b,MAAOmiD,EAAYpzB,GACpD2zB,EACFlmC,eAAammC,oBAAoBP,EAAOD,EAAWp9C,QACjDqoB,EACF5Q,eAAaomC,aAAaJ,EAAkBJ,EAAOD,EAAWp9C,QAE5D89C,EAAY,GAEZC,EACFrR,GAAQ,CAACptB,OAAQ,CAACvI,EAAAA,GAAIixB,QAAAA,EAASvmB,MAAO,CAACxmB,MAAO86C,KAC5CiI,EAAyB5N,GAC3B,CAAC9wB,OAAQ,CAACvI,EAAGgnC,GAAuB/V,QAAAA,EAASvmB,MAAO,CAAC+N,KAAM+tB,KACzDU,EAAwBvR,GAAQ,CACpCptB,OAAQ,CAACvI,EAAGinC,GACZhW,QAAAA,EACAvmB,MAAO,CAACxmB,MAAOwiD,KAEXS,EAASz9C,GAAM,CACnB6e,OAAQ,CAACvI,EAAGknC,GACZjW,QAAAA,EACAvmB,MAAO,CAACyI,MAAOyzB,EAAkBziD,KAAMmtB,KASzC,OANAy1B,EAAU5mC,KAAK6mC,GACfD,EAAU5mC,KAAK8mC,GACfF,EAAU5mC,KAAK+mC,GAEfH,EAAUr1C,SAAQC,GAAKs/B,EAAQ5M,8BAA8B1yB,KAEtDw1C,IChCF,MAAMC,GAA+B,CAC1ChW,WAAYiW,WACZ/V,YAAa,QACbC,oBArBuBP,GAKvB,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3BhxB,EAACA,EAACsnC,QAAEA,GAAW/+B,GACfpkB,KAACA,GAAQumB,EAETsF,EAAQihB,EAAQ7M,SAASpkB,EAAE4jB,QAC3B3T,EAAcghB,EAAQ7M,SAASkjB,EAAQ1jB,QAEvCvT,EACF6J,GAAgBlK,EAAOC,EAAaq3B,EAAQz1C,MAAOy1C,EAAQpjD,MAAOC,GAEtE,OAAO8sC,EAAQ9H,eAAe,CAAChlC,GAAOmjD,EAAQz1C,MAAOwe,KCb1Ck3B,GAAW1U,GACpB,CAAC9Q,UAHa,wBAGS0Q,cAAe3W,GAAiBjqB,MAAO,SAErD21C,GAA+B,CAC1CpW,WAAYqW,WACZnW,YAAa,QACbC,WAAYgW,aCRE5iB,GAAKqM,GAEnB,MAAMzoB,OAACA,EAAM0oB,QAAEA,GAAWD,GACpBvoB,MAACA,GAASF,EAGhB,OAAOwoB,GAAS,CAACxoB,OAAQ,CAACvI,EAFRixB,EAAQpoB,QAAQxV,IAAIoV,EAAMmb,QAELK,mBAAmBU,MAAOsM,QAAAA,IAG5D,MAAMyW,GAA2B,CACtCtW,WAAYuW,OACZrW,YAAa,QACbC,WAAY5M,ICqDP,MAAMijB,GAA2B,CACtCxW,WAAYyW,OACZvW,YAAa,QACbC,oBA9DcuW,EACZ9W,GAEF,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3BhxB,EAACA,GAAKuI,GACN1W,MAACA,GAAS6Y,EAGhB,GAAc,cAAV7Y,EAAuB,CACzB,GAAgB,cAAZmO,EAAEnO,MACJ,OAAOk/B,GAAS,CAACxoB,OAAQ,CAACvI,EAAAA,GAAIixB,QAAAA,IAIhC,MAAM8W,EAAcC,QAAShoC,EAAE9b,OACzB+jD,EAASH,EAAK,CAACv/B,OAAQ,CAACvI,EAAAA,GAAIixB,QAAAA,EAASvmB,MAAO,CAAC7Y,MAAO,aAEpDuJ,EACFo2B,GAAQ,CAACjpB,OAAQ,CAACoc,KAAMsjB,EAAQpjB,KAAMkjB,GAAc9W,QAAAA,IAKxD,OAHA8W,EAAYhZ,UACZkC,EAAQ5M,8BAA8B4jB,GAE/B7sC,EAIT,GAAgB,cAAZ4E,EAAEnO,MAAuB,CAC3B,MAAMyjC,EAAW3Q,GAAK,CAACpc,OAAQ,CAACE,MAAOzI,GAAIixB,QAAAA,IACrC71B,EAAS0sC,EAAK,CAACv/B,OAAQ,CAACvI,EAAGs1B,GAAWrE,QAAAA,EAASvmB,MAAO,CAAC7Y,MAAAA,KAE7D,OADAo/B,EAAQ5M,8BAA8BiR,GAC/Bl6B,EAGT,IAAKhX,OAAK8jD,gBAAgBloC,EAAEnO,MAAOA,GAAQ,CAGzC,MAAMuJ,EAAS21B,GAAS,CAACxoB,OAAQ,CAACvI,EAAAA,GAAIixB,QAAAA,IACtC,MAAO,CAACrN,OAAQxoB,EAAOwoB,OAAQ1/B,MAAOkX,EAAOlX,MAAO2N,MAAAA,GAGtD,GAAc,UAAVA,EACF,gBC9CgB4W,EAAmBwoB,GACrC,MAAMhnC,EAAU,IAAI63B,GAAerZ,EAAMvkB,MAH5B,yBAIPoO,EAAS2+B,EAAQ9M,gBAAgBl6B,EAAS,CAACwe,GAAQ,SACzD,MAAO,CAACmb,OAAQtxB,EAAOsxB,OAAQ1/B,MAAOoO,EAAOpO,MAAO2N,MAAOS,EAAOT,OD2CzDs2C,CAAInoC,EAAGixB,GAGhB,GAAc,SAAVp/B,EAAkB,CACpB,MAAMu2C,EAAkBnX,EAAQ9H,eAC5B,GAAI,OAAQ/kC,OAAKqlB,uBAAuB,OAAQ,IAI9CrO,EAASmsC,GAAS,CAACh/B,OAFU,CAACgC,EAAGvK,EAAG6E,EAAGujC,GAEEnX,QAAAA,IAE/C,OADAA,EAAQ5M,8BAA8B+jB,GAC/BhtC,EAGT,MAAM,IAAInZ,MAAM,iCAAiC+d,EAAEnO,YAAYA,OE/D3Dw2C,GAAO,kBAEA7jD,GAAO+tC,GAChB,CAACxQ,UAAWsmB,GAAM7V,gBAAiB6V,GAAM5V,cAAepY,KAE/CiuB,GAA2B,CACtClX,WAAYmX,OACZjX,YAAa,QACbC,WAAY/sC,UCTDgkD,GASX70C,YAAYsV,GARZpV,mBAAgB,CAAC,KAGjBA,oBAAiB,CACf,CAACoN,KAAM,SAAUM,KAAM,SACvB,CAACN,KAAM,SAAUM,KAAM,UAIvB1N,KAAKD,YAAcqV,EACnBpV,KAAKI,SAAW,sOCXPw0C,GAWX90C,YAAYsV,GAVZpV,mBAAgB,CAAC,KACjBA,mBAAe,EACfA,mBAAe,EAGfA,oBAAiB,CACf,CAACoN,KAAM,SAAUM,KAAM,SACvB,CAACN,KAAM,SAAUM,KAAM,UAIvB1N,KAAKD,YAAcqV,EACnBpV,KAAKI,SAAW,gPCSb,MAAMy0C,GAAkC,CAC7CtX,WAAYuX,cACZrX,YAAa,QACbC,oBAtB0BP,GAK1B,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3BhxB,EAACA,GAAKuI,GACNqgC,aAACA,EAAYC,aAAEA,GAAgBn+B,EAErC,IAAIzgB,EAEFA,EADExE,QAAMc,QAAQ,mBACN,IAAIkiD,GAAkBzoC,EAAE9b,OAExB,IAAIskD,GAAYxoC,EAAE9b,OAE9B,MAAM2hD,EAAe,CAAC,CAAC+C,GAAe,CAACC,IACvC,OAAO5X,EAAQ9M,gBAAgBl6B,EAAS,CAAC+V,GAAIA,EAAEnO,MAAOg0C,WCpB3CiD,GAKXn1C,YAAYzP,GAJZ2P,mBAAgB,CAAC,OAAQ,QAKvBA,KAAKD,YAAc1P,EACnB2P,KAAKI,SAAW,scCDpB,SAAS80C,GACLC,EAA2BC,GAC7B,MAAO,CACLrlB,OAAQqlB,EAAYrlB,OACpB/xB,MAAOo3C,EAAYp3C,MACnB3N,MAAO8kD,EAAc9kD,OAqBlB,MAAMglD,GAAiC,CAC5C9X,WAAY+X,aACZ7X,YAAa,QACbC,oBAnBEP,GACF,MAAMzoB,OAACA,EAAM0oB,QAAEA,GAAWD,GACpBhxB,EAACA,GAAKuI,EAENqqB,EAAQ3B,EAAQpoB,QAAQxV,IAAI2M,EAAE4jB,QAE9B35B,EAAU,IAAI6+C,GAAkB9oC,EAAE9b,OAClCklD,EAAgB,CACpBL,GAA+B/oC,EAAG4yB,EAAM3O,mBAAmBU,MAC3DokB,GAA+B/oC,EAAG4yB,EAAM3O,mBAAmBY,OAG7D,OAAOoM,EAAQ9M,gBACXl6B,EAASm/C,EAAeA,EAAc,GAAGv3C,eC5BlCw3C,GAMX11C,YAAY2oC,GAJZzoC,iBAAwB,GAKtBA,KAAKD,YAAc8M,eAAa4oC,gBAAgBhN,EAAQ,GACxDzoC,KAAKi4B,cAAgBwQ,EAAOlzC,KAAI,CAAC8J,EAAG1J,IAAM,IAAIA,MAE9C,MAAM+/C,EAAoB,IAAI/3C,MAAM8qC,EAAOrzC,OAAS,GACpDsgD,EAAQ,GAAKjN,EAAO,GAAG,GACvB,IAAK,IAAI9yC,EAAI,EAAGA,EAAI+/C,EAAQtgD,OAAQO,IAClC+/C,EAAQ//C,GAAK+/C,EAAQ//C,EAAI,GAAK8yC,EAAO9yC,GAAG,GAG1C,MAAM+yC,EAAW,CAAC,YAAYgN,EAAQ,iCACtC,IAAK,IAAI//C,EAAI,EAAGA,EAAI+/C,EAAQtgD,OAAQO,IAAK,CACvC,MAAMy2B,EAAQspB,EAAQ//C,EAAI,GAC1B+yC,EAASp8B,KACL,iBAAiBopC,EAAQ//C,qBACRA,YAAYy2B,QAEnC,MAAMupB,EAAYD,EAAQtgD,OACpBwgD,EAAYF,EAAQA,EAAQtgD,OAAS,GAC3CszC,EAASp8B,KAAK,sBAAsBqpC,YAAoBC,QAExD51C,KAAKI,SAAW,uIAMVsoC,EAAS1yC,KAAK,sCC9BX6/C,GAOX/1C,YAAY2oC,EAAoBzjB,GALhChlB,mBAAe,EACfA,mBAAe,EACfA,iBAAwB,GAItBA,KAAKD,YAAc8M,eAAa4oC,gBAAgBhN,EAAQzjB,GACxD,MAAM30B,EAAQ2P,KAAKD,YACbgU,EAAO1jB,EAAM+E,OACb4I,EAAQ+Q,GAAkBgF,GAC1BhV,EAASqrB,GAAY,SAAUrW,GAC/BuW,EAAW,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KAAKz0B,MAAM,EAAGke,GACzD/T,KAAKi4B,cAAgBwQ,EAAOlzC,KAAI,CAAC8J,EAAG1J,IAAM,IAAIA,MAE9C,MAAM+/C,EAAoB,IAAI/3C,MAAM8qC,EAAOrzC,OAAS,GACpDsgD,EAAQ,GAAKjN,EAAO,GAAGzjB,GACvB,IAAK,IAAIrvB,EAAI,EAAGA,EAAI+/C,EAAQtgD,OAAQO,IAClC+/C,EAAQ//C,GAAK+/C,EAAQ//C,EAAI,GAAK8yC,EAAO9yC,GAAGqvB,GAG1C,MAAM/jB,EAAUqpB,EAAStF,GACnB8wB,EAAexrB,EAASz0B,OAAO,GAC/BkgD,EAAczrB,EAASt0B,OAE7B,IAAIggD,EAAkB,OAAO/0C,OAAay0C,EAAQ,wDAElCK,YAAsBD,EAAa9/C,uBAEnD,IAAK,IAAIL,EAAI,EAAGA,EAAI+/C,EAAQtgD,OAAQO,IAAK,CACvC,MAAMy2B,EAAQspB,EAAQ//C,EAAI,GAK1BqgD,GAAmB,iBACX/0C,OAAay0C,EAAQ//C,UAAUsL,QAAcy0C,EAAQ//C,EAAI,wDAErDA,KAAKsgD,GAAgB3rB,EAAUrpB,EAASmrB,0BACvC6pB,GAAgBH,EAAc70C,EAASmrB,mBAGtD,MAAMupB,EAAYD,EAAQtgD,OACpBg3B,EAAQspB,EAAQA,EAAQtgD,OAAS,GACvC4gD,GAAmB,+CAEPL,KAAaM,GAAgB3rB,EAAUrpB,EAASmrB,wBAC/C6pB,GAAgBH,EAAc70C,EAASmrB,QAEpDpsB,KAAKI,SAAW,0BACGkqB,EAAS/0B,KAAI4W,GAAK,OAASA,mBACxC6pC,8CAIAh4C,sEAC4Be,+BAE5BA,EAAOgV,EAAO,QAAQhV,EAAOgV,EAAO,wBAChChV,EAAOgV,EAAO,QAAQ1jB,EAAM0jB,EAAO,wCACjBhV,6BAGtBA,EAAOgV,EAAO,QAAQhV,EAAOgV,EAAO,wBAChChV,EAAOgV,EAAO,QAAQ1jB,EAAM0jB,EAAO,wCACjBhV,6BAGtBA,EAAOgV,EAAO,QAAQhV,EAAOgV,EAAO,wBAChChV,EAAOgV,EAAO,QAAQ1jB,EAAM0jB,EAAO,sBACnChV,EAAOgV,EAAO,QAAQ1jB,EAAM0jB,EAAO,wCACjBhV,6DAmBhC,SAASk3C,GAAgB3rB,EAAoBrpB,EAAiBmrB,GAC5D,MAAM8pB,EAAa5rB,EAAS/a,QAAQtO,GAQpC,OAPYqpB,EAAS/0B,KAAI,CAACsuB,EAAG9D,IACvBA,IAAQm2B,EACH,GAAGryB,OAAOuI,IAEVvI,IAGA7tB,gBCrGGg7B,GAAKmM,GAEnB,MAAMzoB,OAACA,EAAM0oB,QAAEA,GAAWD,GACpBvoB,MAACA,GAASF,EAGhB,OAAOwoB,GAAS,CAACxoB,OAAQ,CAACvI,EAFRixB,EAAQpoB,QAAQxV,IAAIoV,EAAMmb,QAELK,mBAAmBY,MAAOoM,QAAAA,IAG5D,MAAM+Y,GAA2B,CACtC5Y,WAAY6Y,OACZ3Y,YAAa,QACbC,WAAY1M,aCLEvK,GACZ/R,EAAsBsQ,EAAcoY,GACtC,MAAMp/B,EAAQ0W,EAAO,GAAG1W,MACxB,GAAc,cAAVA,EAAuB,CACzB,MAAMq4C,EAAQ3hC,EAAOnf,KAAKuI,GAAMgzB,GAAK,CAACpc,OAAQ,CAACE,MAAO9W,GAAIs/B,QAAAA,MACpDkZ,EAAQ5hC,EAAOnf,KAAKuI,GAAMkzB,GAAK,CAACtc,OAAQ,CAACE,MAAO9W,GAAIs/B,QAAAA,MAEpDmZ,EAAe9vB,GAAW4vB,EAAOrxB,EAAMoY,GACvCoZ,EAAe/vB,GAAW6vB,EAAOtxB,EAAMoY,GAEvC71B,EACFo2B,GAAQ,CAACjpB,OAAQ,CAACoc,KAAMylB,EAAcvlB,KAAMwlB,GAAepZ,QAAAA,IAO/D,OALAiZ,EAAMx4C,SAAQ44C,GAAKrZ,EAAQ5M,8BAA8BimB,KACzDH,EAAMz4C,SAAQlI,GAAKynC,EAAQ5M,8BAA8B76B,KACzDynC,EAAQ5M,8BAA8B+lB,GACtCnZ,EAAQ5M,8BAA8BgmB,GAE/BjvC,EAGT,IAAImvC,EAAWtZ,EAAQtI,mBAAmBpgB,GAY1C,GAJc,WAAV1W,IACF04C,GAAW,GAGTA,EAAU,CAQZ,MAAMC,EAAYjiC,EAAOnf,KAAIuI,IAC3B,MAAM84C,EAAYrmD,OAAKC,cAAcsN,EAAEzN,MAAMwF,MAAMmvB,IAEnD,OAAO8c,GAAQ,CAACptB,OAAQ,CAACvI,EAAGrO,GAAIs/B,QAAAA,EAASvmB,MAAO,CAACxmB,MADnC,EAAE,EAAGumD,SAIfC,EAAkBF,EAAUphD,KAAIuI,IAC7B,CAACme,KAAMmhB,EAAQ7M,SAASzyB,EAAEiyB,QAAS1/B,MAAOyN,EAAEzN,UAI/Cge,EACFxB,eAAa4oC,gBAAgBkB,EAAUphD,KAAIuI,GAAKA,EAAEzN,QAAQ,GACxD0sB,EAAyC,IAA1B45B,EAAU,GAAGtmD,MAAM,GAClCmsB,EACFkK,GAAcmwB,EAAiBxoC,EAAUrQ,EAAO+e,GAE9C+5B,EACFjqC,eAAa4oC,gBAAgB/gC,EAAOnf,KAAIuI,GAAKA,EAAEzN,QAAQ20B,GAErD2P,EAAUyI,EAAQ9H,eAAewhB,EAAe94C,EAAOwe,GAI7D,OAFAm6B,EAAU94C,SAAQC,GAAKs/B,EAAQ5M,8BAA8B1yB,KAEtD62B,EAGT,GAAIjgB,EAAOtf,OAASxD,QAAMC,UAAU,gCAAiC,CACnE,MAAMq3C,EAAWx4C,KAAK6mB,MAAM7C,EAAOtf,OAAS,GACtC+zC,EAAW1iB,GAAW/R,EAAO7e,MAAM,EAAGqzC,GAAWlkB,EAAMoY,GACvDgM,EAAY3iB,GAAW/R,EAAO7e,MAAMqzC,GAAWlkB,EAAMoY,GAErD71B,EAASkf,GAAW,CAAC0iB,EAAUC,GAAYpkB,EAAMoY,GAKvD,OAHAA,EAAQ5M,8BAA8B2Y,GACtC/L,EAAQ5M,8BAA8B4Y,GAE/B7hC,EAGT,GAAI3V,QAAMc,QAAQ,gCACdgiB,EAAO,GAAGrkB,MAAM+E,OAAS,EAAG,CAC9B,MAAMgB,EAAU,IAAIy/C,GAAoBnhC,EAAOnf,KAAIuI,GAAKA,EAAEzN,QAAQ20B,GAClE,OAAOoY,EAAQ9M,gBAAgBl6B,EAASse,EAAQ1W,GAGlD,MAAM24C,UAACA,EAAStoC,SAAEA,GAapB,SACIqG,EAAsBsQ,EAAcoY,GAQtC,MAAM/uB,EAAWxB,eAAa4oC,gBAAgB/gC,EAAOnf,KAAIuI,GAAKA,EAAEzN,QAAQ20B,GAQxE,MAAO,CAAC2xB,UAPUjiC,EAAOnf,KACrB4W,GAAK21B,GAAQ,CACXptB,OAAQ,CAACvI,EAAAA,GACT0K,MAAO,CAACxmB,MAAO,EAAE,EAAGE,OAAKC,cAAc2b,EAAE9b,MAAMwF,MAAMmvB,MACrDoY,QAAAA,MAGa/uB,SAAAA,GA9BW0oC,CAAiBriC,EAAQsQ,EAAMoY,GACvDhnC,EACF,IAAIo/C,GAAcmB,EAAUphD,KAAIuI,GAAKA,EAAEzN,SACrCkX,EAAS61B,EAAQ9M,gBAAgBl6B,EAASugD,EAAW34C,GAE3D24C,EAAU94C,SAAQ44C,GAAKrZ,EAAQ5M,8BAA8BimB,KAC7D,MAAMO,EACFlV,GAAQ,CAACptB,OAAQ,CAACvI,EAAG5E,GAASsP,MAAO,CAACxmB,MAAOge,GAAW+uB,QAAAA,IAG5D,OAFAA,EAAQ5M,8BAA8BjpB,GAE/ByvC,WCvGOhgB,GACZmG,GAGF,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3BnY,KAACA,GAAQnO,EAEToO,EAAQ10B,OAAK20B,eAAeF,EAAMtQ,EAAO,GAAGrkB,OAAO,GACnDge,EACFxB,eAAa4oC,gBAAgB/gC,EAAOnf,KAAIuI,GAAKA,EAAEzN,QAAQ40B,GAE3D,GAAqC,IAAjC10B,OAAKC,cAAc6d,GACrB,OAAO+uB,EAAQ9H,eAAejnB,EAAUqG,EAAO,GAAG1W,MAAO,IAI3D,MAAMi5C,EAAUviC,EAAOqe,QAAOj1B,GAAKvN,OAAKC,cAAcsN,EAAEzN,OAAS,IACjE,GAAuB,IAAnB4mD,EAAQ7hD,OACV,OAAO8nC,GAAS,CAACxoB,OAAQ,CAACvI,EAAG8qC,EAAQ,IAAK7Z,QAAAA,IAG5C,MAAMqL,EAASwO,EAAQ1hD,KAAIuI,GAAKA,EAAEzN,QAGlC,OAFAwc,eAAaqqC,uBAAuBzO,EAAQxjB,GAErCwB,GAAWwwB,EAAShyB,EAAOmY,GAG7B,MAAM+Z,GAA6B,CACxC5Z,WAAY6Z,SACZ3Z,YAAa,QACbC,WAAY1G,UCjCDqgB,GAKXv3C,YACI4sC,EAAmCtM,GAAU,EAC7CN,EAAqB,KAAMiH,GAA4B,EACvDC,GAAoB,GAPxBhnC,mBAAgB,CAAC,IAAK,KAQpBA,KAAKD,YAAc2sC,EAASr+B,SAC5B,MAAMi/B,EAASZ,EAASa,QAAQC,IAC1BC,EAAUf,EAASa,QAAQ7xB,KAC3BsxB,EAAeN,EAASM,aACxBC,EAAcP,EAASO,YACvBC,EAAiBR,EAASQ,eAC1BC,EAAgBT,EAASS,cACzB4B,EAAerC,EAASqC,aACxBhC,EAAcL,EAASK,YAEvBuK,EAA8D,EAAtC5mD,KAAK6mB,MAAMm1B,EAASoB,WAAa,GACzDyJ,EAA0B7K,EAASoB,WAAa,EAChD0J,EAAyC,iBAAxB9K,EAASyC,WAE1BsI,EAASD,EAAiB,EAAI,EAC9BE,EAASF,EAAiB,EAAI,EAC9BG,EAAaH,EAAiB,EAAI,EAExC,IAAI3W,EAAoB,GAAIC,EAAyB,GACjDhB,IAEAe,EADEkG,EACkB,uGAEhBjH,eAEKkH,EACW,+FAEhBlH,eAGgB,wDAEdA,2BAKRgB,EAAyB,gCAG3B,MAAMC,EAAiBX,EAAU,kCAAoC,GACjEA,GACFpgC,KAAKi4B,cAAc3rB,KAAK,QAGtBy6B,GACF/mC,KAAKi4B,cAAc3rB,KAAK,0BAGtB06B,GACFhnC,KAAKi4B,cAAc3rB,KAAK,kBAG1BtM,KAAKI,SAAW,WACZygC,0CAE4BmM,MAAiBC,uCACpBK,MAAWG,kIAKlBkK,8DAGCF,cAAmBC,oTAOd3I,kDACK7B,uCAELR,EAASkB,sFAIPb,oDACKI,yCAELT,EAASmB,2FAIPyJ,mQAQhBE,mqBAmB0B,IAA5BD,6BAEEC,6EAEsBF,0CACPA,gGAGDA,kDACCA,sDAGkB,IAA5BC,0EAEMD,yCACAA,qDAGXE,qFAEoBF,8CACAA,8KAKRA,8CACAA,oIAKqB,IAA5BC,0EAEMD,yCACAA,6CACAA,qDAGXE,qFAEoBF,8CACAA,kDACAA,8KAKRA,8CACAA,kDACAA,+LAUtBvW,cACAD,sDAOG8W,GAKX93C,YAAY4sC,GAJZ1sC,mBAAgB,CAAC,IAAK,KAKpBA,KAAKD,YAAc2sC,EAASr+B,SAC5B,MAAMigC,EAAW5B,EAASa,QAAQgB,MAC5BjB,EAASZ,EAASa,QAAQC,IAC1BC,EAAUf,EAASa,QAAQ7xB,KAC3ByyB,EAAczB,EAASyB,YACvBnB,EAAeN,EAASM,aACxBC,EAAcP,EAASO,YACvBmB,EAAgB1B,EAAS0B,cACzBlB,EAAiBR,EAASQ,eAC1BC,EAAgBT,EAASS,cACzBuC,EAAchD,EAASgD,YACvBX,EAAerC,EAASqC,aACxBhC,EAAcL,EAASK,YAEvBuK,EAA8D,EAAtC5mD,KAAK6mB,MAAMm1B,EAASoB,WAAa,GACzDyJ,EAA0B7K,EAASoB,WAAa,EAEtD9tC,KAAKI,SAAW,uCACgB+tC,MAAgBnB,MAC5CC,uCACyBqB,MAAahB,MAAWG,ijBAgBzBiC,kDACKtB,uCAEL1B,EAAS8B,qFAIPO,oDACK7B,yCAELR,EAASkB,4FAIPb,sDACKI,2CAELT,EAASmB,iGAIPyJ,0mBAiBU,IAA5BC,+EAEwBD,4CACPA,qCACkB,IAA5BC,yFAEiBD,kDACAA,wGAGPA,+CACAA,+GAGkB,IAA5BC,yFAEiBD,kDACAA,sDACAA,wGAGPA,+CACAA,mDACAA,+LCrSxBO,GAOX/3C,YACIC,EAAuB2hB,EACvBgrB,GARJ1sC,mBAAgB,CAAC,KACjBA,mBAAe,EACfA,mBAAe,EAObA,KAAKD,YAAcA,EAEnB,MAAMgtC,YACJA,EAAWe,WACXA,EAAUb,YACVA,EAAWD,aACXA,EAAYO,QACZA,EAAOiC,SACPA,EAAQrC,cACRA,EAAaD,eACbA,EAAciC,WACdA,GACEzC,GACEhxB,KAACA,EAAI8xB,IAAEA,GAAOD,EACduK,EAAmBhK,EAAaf,EAChC5sC,EAAO/B,KACPo5C,EAAgC,iBAAfrI,EACjBsI,EAASD,EAAiB,EAAI,EAC9BE,EAASF,EAAiB,EAAI,EAEpC,IAAIO,EAAW,GAEf,IAAK,IAAIh3C,EAAM,EAAGA,GAAO,EAAGA,IAC1B,IAAK,IAAIC,EAAM,EAAGA,GAAO,EAAGA,IAC1B+2C,GAAY,mCACY/2C,8BACPD,mCAEGhB,EAAY,eAAeA,EAAY,kDACzByvC,SAAgBxC,OAC9CQ,kCACiBN,cAA2B4K,8BAElCp2B,EAAW+1B,0EAEoBjI,SACzCvC,QAAkBvxB,sCACCyxB,4BACnB2K,SAAwBhK,kCAEZpsB,EAAWg2B,gEAEQ5J,gCAErB0J,+EAEW,EAANz2C,EAAUC,yNAKJ,EAAND,EAAUC,iMAWjChB,KAAKI,SAAW,oMASV23C,gBAEA53C,EAAK1B,4CC7DCu5C,IAAe7rC,EAC7BA,EAAC4mB,OACDA,EAAM2Z,SACNA,EAAQtP,QACRA,EAAOyI,KACPA,EAAO,KAAIC,uBACXA,EAAyB,KAAIC,eAC7BA,EAAiB,EAACjG,WAClBA,EAAa,OAIb,MAAMnhB,EAASxS,EAAE9b,MACX6xC,EAAW9E,EAAQpoB,QAAQxV,IAAI2M,EAAE4jB,QACjCkoB,EAAkBvL,EAASoB,WAC3BoK,EAAcv5B,EAAO,GAAKA,EAAO,GAAKA,EAAO,GAC7Cw5B,EAAmBzL,EAAS0L,YAC5BZ,EAAyC,iBAAxB9K,EAASyC,WAIhC,IAAIvP,EACJ,MAAMiH,EAA8B,GAI9BwR,GACe,IAAhBH,GAA0C,IAArBC,IACtBF,ErDxCqC,IqDyCnCK,EAAyB35B,EAAO,GAAK,GAAM,KAAOujB,EAASpnC,SAEjE,IAAIu9C,GAA8BzmD,QAAMc,QAAQ,wBAC3Cd,QAAMc,QAAQ,iCACd4lD,EA+BE,CASL,MAAM32B,EAAc61B,EAChB74B,EAAO,GAAKA,EAAO,IAAMA,EAAO,GAAK,GACrCA,EAAO,GAAKA,EAAO,IAAMA,EAAO,GAAK,GACnC45B,EAAwB,CAC5BxoB,OAAQ5jB,EAAE4jB,OACV1/B,MAAO,CAAC,EAAGsxB,EAAa+qB,EAASoB,YACjC9vC,MAAOmO,EAAEnO,OAULw6C,EAAwBtW,EAAS7xC,MACvC6xC,EAAS7xC,MAAQ6xC,EAAS7xC,MAAMwF,QAChCqsC,EAAS7xC,MAAM6xC,EAAS7xC,MAAM+E,OAAS,KACvC7E,OAAKwN,OACD44B,EAAyBuL,EAAS7xC,MAAOkoD,EAAUloD,QACnD,IAAM,kBAAkB6xC,EAAS7xC,YAC7BkoD,EAAUloD,qBAClB,MAAMooD,EAAiB3W,GAAQ,CAC7BptB,OAAQ,CAACvI,EAAG4mB,GACZqK,QAAAA,EACAvmB,MAAO,CAACxmB,MAAO,CAAC,EAAGq8C,EAASoB,WAAYpB,EAAS0L,gBAEnDvR,EAAcv6B,KAAKmsC,GACnB,MAAMC,EAAgB9S,GAAgB,CACpClvB,EAAG6hC,EACHvnC,EAAGynC,EACHrb,QAAAA,EACA8C,WAxFe,MAyFfC,WAxFe,MAyFf0F,KAAAA,EACA/F,WAAAA,EACAgG,uBAAAA,EACAC,eAAAA,IAGI4S,EAAuBvb,EAAQpoB,QAAQxV,IAAIk5C,EAAc3oB,QAC/Dx/B,OAAKwN,OACD46C,EAAqB79C,UACrB,IAAM,gDAEVonC,EAAS7xC,MAAQmoD,EAGjBG,EAAqBtoD,MAAQq8C,EAASr+B,SAEtCuxB,EAAM1C,GAAS,CAACxoB,OAAQ,CAACvI,EAAGusC,GAAgBtb,QAAAA,IAC5CwC,EAAIvvC,MAAQq8C,EAASr+B,SAErBw4B,EAAcv6B,KAAKosC,OA9FQ,CAC3B,MAEMH,EAAYzW,GAAQ,CACxBptB,OAAQ,CAACvI,EAAAA,GACTixB,QAAAA,EACAvmB,MAAO,CAACxmB,MAAO,CAAC,EALEmnD,EAAiB74B,EAAO,GAAKA,EAAO,GAAKA,EAAO,GAC/BA,EAAO,GAAKA,EAAO,GAAKA,EAAO,GAIlC+tB,EAASoB,eAErC2K,EAAiB3W,GAAQ,CAC7BptB,OAAQ,CAACvI,EAAG4mB,GACZqK,QAAAA,EACAvmB,MAAO,CAACxmB,MAAO,CAAC,EAAGq8C,EAASoB,WAAYpB,EAAS0L,gBAE7C7wC,EAASq+B,GAAgB,CAC7BlvB,EAAG6hC,EACHvnC,EAAGynC,EACHvY,WA/Be,MAgCfC,WA/Be,MAgCf/C,QAAAA,EACAyI,KAAAA,EACA/F,WAAAA,EACAgG,uBAAAA,EACAC,eAAAA,IAGFnG,EAAMkC,GACF,CAACptB,OAAQ,CAACvI,EAAG5E,GAAS61B,QAAAA,EAASvmB,MAAO,CAACxmB,MAAOq8C,EAASr+B,YAE3Dw4B,EAAcv6B,KAAKisC,GACnB1R,EAAcv6B,KAAKmsC,GACnB5R,EAAcv6B,KAAK/E,GAmErB,IAAK,MAAM5R,KAAKkxC,EACdzJ,EAAQ5M,8BAA8B76B,GAGxC,OAAOiqC,WAKOgZ,IAAiBzsC,EAC/BA,EAAC4mB,OACDA,EAAM2Z,SACNA,EAAQtP,QACRA,EAAOyI,KACPA,EAAO,KAAIC,uBACXA,EAAyB,KAAIC,eAC7BA,EAAiB,EAACjG,WAClBA,EAAa,OAQb,MAAMiN,YACJA,EAAWgC,aACXA,EAAYjB,WACZA,EAAU0B,SACVA,EAAQD,UACRA,EAASJ,WACTA,GACEzC,EAEE8K,EAAgC,iBAAfrI,EAEjB5O,EAAYwM,EAAcgC,EAAejB,EACzCjxB,EAAU0yB,EAAYC,EACtBqJ,EAAa,CAACtY,EAAW1jB,GAIzBgqB,EAA8B,GAE9BiS,EACFhX,GAAQ,CAACptB,OAAQ,CAACvI,EAAAA,GAAIixB,QAAAA,EAASvmB,MAAO,CAACxmB,MAAO8b,EAAE9b,MAAMwF,MAAM,MAC1DkjD,EAAQjX,GAAQ,CACpBptB,OAAQ,CAACvI,EAAG4mB,GACZqK,QAAAA,EACAvmB,MAAO,CAACxmB,MAAO,CAAC,EAAGkwC,EAAWhwC,OAAKC,cAAcuiC,EAAO1iC,OAASkwC,MAGnEsG,EAAcv6B,KAAKwsC,GACnBjS,EAAcv6B,KAAKysC,GAEnB,MAAMC,EACF,IAAInB,GAAoBgB,EAAYC,EAAUzoD,MAAOq8C,GACnDuM,EAAS7b,EAAQ9M,gBAAgB0oB,EAAe,CAACF,GAAY,WAC7DI,EAAiBpX,GAAQ,CAC7BptB,OAAQ,CAACvI,EAAG8sC,GACZ7b,QAAAA,EACAvmB,MAAO,CAACxmB,MAAO,CAAC,EAAGwoD,EAAW,GAAIA,EAAW,OAG/ChS,EAAcv6B,KAAK2sC,GACnBpS,EAAcv6B,KAAK4sC,GAEnB,MAAMpS,EAAkB,MAARjB,EACVkB,EAAsD,MAA1BjB,EAC5BkB,EAAmC,cAAflH,EACpBmH,EACFnH,EAAaD,GAA6BC,GAAY,GAAQ,KAC5DqZ,EAAgB,IAAIlZ,GACtBiZ,EAAe7oD,MACf0oD,EAAM1oD,MACN,CAAC,EAAGwsB,EAAS6vB,EAAS0L,cApCP,GACA,EAmC6CtR,EAC5DG,EAAiBF,EAA2BC,GAC1CtyB,EAAuB,CAACwkC,EAAgBH,GAO9C,GANIlT,GACFnxB,EAAOpI,KAAKu5B,GAEVkB,GACFryB,EAAOpI,KAAKw5B,GAEVkB,EAAmB,CACrB,MAAMO,EAAkBnK,EAAQ9H,eAC5B,GAAI,UACJ/kC,OAAKuuB,kBAAkBinB,EAAmC,YAC9DrxB,EAAOpI,KAAKi7B,GACZV,EAAcv6B,KAAKi7B,GAErB,MAAMxlB,EAAUqb,EAAQ9M,gBAAgB6oB,EAAezkC,EAAQ,WAKzDkrB,EACFkC,GAAQ,CAACptB,OAAQ,CAACvI,EAAG4V,GAAUqb,QAAAA,EAASvmB,MAAO,CAACxmB,MAJnCmnD,EACb,CAAC,EAAGjI,EAAWC,EAAU9C,EAAS0L,aAClC,CAAC,EAAG1L,EAAS0L,YAAa7I,EAAWC,MAIzC3I,EAAcv6B,KAAKyV,GACnB,IAAK,MAAMpsB,KAAKkxC,EACdzJ,EAAQ5M,8BAA8B76B,GAGxC,OAAOiqC,EC5NF,MAAMwZ,GAA6B,CACxC7b,WAAY8b,SACZ5b,YAAa,QACbC,oBAnCEP,GAEF,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3BhxB,EAACA,EAAC4mB,OAAEA,GAAUre,GACdzV,QAACA,EAAO9J,IAAEA,EAAGg6C,WAAEA,EAAUmK,UAAEA,EAAS1K,gBAAEA,GAAmB/3B,EAEzD0iC,EAAc1sC,eAAa2sC,wBAAwBrK,GACnDzC,EAAW7/B,eAAa4sC,kBAC1BttC,EAAE9b,MACF0iC,EAAO1iC,MAA2C4O,EAASq6C,EAAWnkD,EACtEy5C,GAAiB,EAAuB2K,GAC5C,IAAI3Z,EAEJ,GAA8B,IAA1B8M,EAASqC,cAA+C,IAAzBrC,EAASK,aACZ,IAA5BL,EAASQ,gBAAmD,IAA3BR,EAASS,eAChB,IAA1BT,EAASM,cAA+C,IAAzBN,EAASO,aACb,SAA1BP,EAASa,QAAQ7/B,MAA6C,UAA1Bg/B,EAASa,QAAQ7/B,KAEnD,GAAI9b,QAAMc,QAAQ,sBAAuC,IAAfyZ,EAAE9b,MAAM,GACvDuvC,EAAMgZ,GAAiB,CAACzsC,EAAAA,EAAG4mB,OAAAA,EAAQ2Z,SAAAA,EAAUtP,QAAAA,QACxC,CACL,MAAMhnC,EAAU,IAAIihD,GAAc3K,GAClC9M,EAAMxC,EAAQ9M,gBAAgBl6B,EAAS,CAAC+V,EAAG4mB,GAAS,gBALpD6M,EAAMoY,GAAe,CAAC7rC,EAAAA,EAAG4mB,OAAAA,EAAQ2Z,SAAAA,EAAUtP,QAAAA,IAQ7C,MAAMoK,EACF1F,GAAQ,CAACptB,OAAQ,CAACvI,EAAGyzB,GAAMxC,QAAAA,EAASvmB,MAAO,CAACxmB,MAAOq8C,EAASr+B,YAGhE,OAFA+uB,EAAQ5M,8BAA8BoP,GAE/B4H,UClCIkS,GAKX55C,YAAY4sC,GAJZ1sC,mBAAgB,CAAC,IAAK,MAKpBA,KAAKD,YAAc2sC,EAASiN,YAE5B,MAAM3M,EAAeN,EAASM,aACxBC,EAAcP,EAASO,YACvBK,EAASZ,EAASa,QAAQC,IAC1BC,EAAUf,EAASa,QAAQ7xB,KAC3B87B,EAAyC,iBAAxB9K,EAASyC,WAEhCnvC,KAAKI,SAAW,uYAYUssC,EAASlpB,sDACLkpB,EAAS6C,sDACVvC,OAAkBM,yCAEjBZ,EAASkB,4FAIPlB,EAAS8C,uDACVvC,OAAiBQ,2CAEhBf,EAASmB,+EAIzB2J,ocAmBPoC,GAKX95C,YAAY4sC,GAJZ1sC,mBAAgB,CAAC,KAAM,KAKrBA,KAAKD,YAAc2sC,EAASt+B,QAE5B,MAAM2gC,EAAerC,EAASqC,aACxBhC,EAAcL,EAASK,YACvBC,EAAeN,EAASM,aACxBC,EAAcP,EAASO,YACvBuK,EAAyC,iBAAxB9K,EAASyC,WAE1B7B,EAASyB,EAAe,EAAIrC,EAASa,QAAQC,IAC7CC,EAAUV,EAAc,EAAIL,EAASa,QAAQ7xB,KAE7C+7B,EAASD,EAAiB,EAAI,EAC9BE,EAASF,EAAiB,EAAI,EAC9BG,EAAaH,EAAiB,EAAI,EAExCx3C,KAAKI,SAAW,oCACaktC,MAAWG,kIAKlBkK,gDAEcF,cAAmBC,gTAO3B3I,6DACgB/B,6CAEZN,EAAS6C,oIAKpBR,kDAEShC,+DACgBE,+CAEZP,EAAS8C,4JAMpBzC,oDAESL,EAAS0L,6CAEzBZ,8dAmBPqC,GAKX/5C,YAAY4sC,GAJZ1sC,mBAAgB,CAAC,IAAK,MAKpBA,KAAKD,YAAc2sC,EAASiN,YAE5B,MAAMxL,EAAczB,EAASyB,YACvBnB,EAAeN,EAASM,aACxBC,EAAcP,EAASO,YACvBqB,EAAW5B,EAASa,QAAQgB,MAC5BjB,EAASZ,EAASa,QAAQC,IAC1BC,EAAUf,EAASa,QAAQ7xB,KAEjC1b,KAAKI,SAAW,+QAWUssC,EAASlpB,sDACLkpB,EAASiD,qDACVxB,OAAiBG,yCAEhB5B,EAAS8B,2FAIP9B,EAAS6C,wDACVvC,OAAkBM,2CAEjBZ,EAASkB,kGAIPlB,EAAS8C,yDACVvC,OAAiBQ,6CAEhBf,EAASmB,8UAiBlCiM,GAKXh6C,YAAY4sC,GAJZ1sC,mBAAgB,CAAC,KAAM,KAKrBA,KAAKD,YAAc2sC,EAASt+B,QAE5B,MAAMshC,EAAchD,EAASgD,YACvBX,EAAerC,EAASqC,aACxBhC,EAAcL,EAASK,YACvBoB,EAAczB,EAASyB,YACvBnB,EAAeN,EAASM,aACxBC,EAAcP,EAASO,YAEvBqB,EAAWoB,EAAc,EAAIhD,EAASa,QAAQgB,MAC9CjB,EAASyB,EAAe,EAAIrC,EAASa,QAAQC,IAC7CC,EAAUV,EAAc,EAAIL,EAASa,QAAQ7xB,KAEnD1b,KAAKI,SAAW,oCACakuC,MAAahB,MAAWG,4XAczBiC,6DACgBvB,6CAEZzB,EAASiD,mIAKpBD,kDAESX,+DACgB/B,+CAEZN,EAAS6C,2JAMpBR,oDAEShC,iEACgBE,iDAEZP,EAAS8C,sKAMpBzC,sDAESL,EAAS0L,mTCpPxC,MAAM2B,GAA2C,CACtDxc,WAAYyc,uBACZvc,YAAa,QACbC,oBAtBmCP,GAKnC,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3BhxB,EAACA,EAAC2jC,GAAEA,GAAMp7B,GACVzV,QAACA,EAAO9J,IAAEA,EAAGg6C,WAAEA,EAAUP,gBAAEA,EAAe+K,YAAEA,GAAe9iC,EAE3D0iC,EAAc1sC,eAAa2sC,wBAAwBrK,GACnDzC,EAAW7/B,eAAa4sC,kBAC1BttC,EAAE9b,MAA2CspD,EAAa16C,EAC1D,EAAmB9J,EAAKy5C,GAAiB,EACzC2K,GAEEnjD,EAAU,IAAIsjD,GAAuBhN,GAC3C,OAAOtP,EAAQ9M,gBAAgBl6B,EAAS,CAAC+V,EAAG2jC,GAAK,aCE5C,MAAMmK,GAA0C,CACrD1c,WAAY2c,sBACZzc,YAAa,QACbC,oBArBkCP,GAKlC,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3B2S,GAACA,EAAE/c,OAAEA,GAAUre,GACfgN,WAACA,EAAUziB,QAAEA,EAAO9J,IAAEA,EAAGg6C,WAAEA,EAAUP,gBAAEA,GAAmB/3B,EAE1D0iC,EAAc1sC,eAAa2sC,wBAAwBrK,GACnDzC,EAAW7/B,eAAa4sC,kBAC1B/3B,EAAYqR,EAAO1iC,MAA2C4O,EAC9D,EAAmB9J,EAAKy5C,GAAiB,EAAO2K,GAE9CnjD,EAAU,IAAIwjD,GAAsBlN,GAC1C,OAAOtP,EAAQ9M,gBAAgBl6B,EAAS,CAAC05C,EAAI/c,GAAS,aCCjD,MAAMonB,GAA6B,CACxC5c,WAAY6c,SACZ3c,YAAa,QACbC,oBAlBEP,GAEF,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3BhxB,EAACA,EAAC4mB,OAAEA,GAAUre,GACdzV,QAACA,EAAO9J,IAAEA,EAAGmkD,UAAEA,GAAaziC,EAE5B61B,EAAW7/B,eAAawtC,kBAC1BluC,EAAE9b,MACF0iC,EAAO1iC,MAAmD4O,EAC1Dq6C,EAAWnkD,GAETiB,EAAU,IAAIwhD,GAAclL,GAClC,OAAOtP,EAAQ9M,gBAAgBl6B,EAAS,CAAC+V,EAAG4mB,GAAS,aCIhD,MAAMunB,GAA6C,CACxD/c,WAAYgd,yBACZ9c,YAAa,QACbC,oBApBqCP,GAKrC,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3BhxB,EAACA,EAAC2jC,GAAEA,GAAMp7B,GACVzV,QAACA,EAAO9J,IAAEA,EAAGwkD,YAAEA,GAAe9iC,EAE9B61B,EAAW7/B,eAAawtC,kBAC1BluC,EAAE9b,MAAmDspD,EAAa16C,EAClE,EAAmB9J,GAEjBiB,EAAU,IAAIyjD,GAAuBnN,GAC3C,OAAOtP,EAAQ9M,gBAAgBl6B,EAAS,CAAC+V,EAAG2jC,GAAK,aCG5C,MAAM0K,GAA0C,CACrDjd,WAAYkd,wBACZhd,YAAa,QACbC,oBApBkCP,GAKlC,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3B2S,GAACA,EAAE/c,OAAEA,GAAUre,GACfvf,IAACA,EAAG8J,QAAEA,EAAOyiB,WAAEA,GAAc7K,EAE7B61B,EAAW7/B,eAAawtC,kBAC1B34B,EAAYqR,EAAO1iC,MACnB4O,EAAS,EAAmB9J,GAE1BiB,EAAU,IAAI0jD,GAAsBpN,GAC1C,OAAOtP,EAAQ9M,gBAAgBl6B,EAAS,CAAC05C,EAAI/c,GAAS,aCX3C2nB,GAAMhc,GAAgB,CAACxQ,UAJxBysB,gDAMCC,GAA0B,CACrCrd,WAAYsd,MACZpd,YAAa,QACbC,WAAYgd,ICLDI,GAAOpc,GAAgB,CAACxQ,UALxB,kEAOA6sB,GAA2B,CACtCxd,WAAYyd,OACZvd,YAAa,QACbC,WAAYod,UCXDG,GAKXn7C,YACIo7C,EAA8CC,EAC9CC,EAA4BC,EAC5BC,GAPJt7C,mBAAgB,CAAC,QAAS,QAAS,UACnCA,iBAAwB,GAOtB,MAAO8E,EAAOy2C,EAAaC,EAAY5tD,GAASstD,GACzCO,GAAcN,GACdO,EAAYC,GAAaP,EAChCp7C,KAAKD,YAAc,CAAC07C,EAAUC,EAAYC,EAAW/tD,GACrD,MAAMguD,EAAsB,aAAXP,EAAwB,EAAI,GAEtCQ,EAAkBC,GACrB,CAAIP,EAAc,EAAjB,KAA2BC,EAAa,EAAhB,OAEtBO,EAAaC,EAAaC,GAAOP,EAAa,EACjD,CACE,IAAIH,EAAc,IAAMG,EAAa,GACrC,yBACA,MAAMG,+BAER,CACE,MACA,MACA,mBAAmBA,MAElBK,EAAYC,EAAYC,GAAOT,EAAY,EAC9C,CACE,IAAIH,EAAa,IAAMG,EAAY,GACnC,wBACA,MAAMG,8BAER,CACE,MACA,MACA,mBAAmBA,KAMzB97C,KAAKI,SAAW,4CACqB27C,8CACDG,8cAgBPp3C,sEAIFk3C,mCACDG,8BAEPF,wCACYJ,oCACPP,4DAGLc,wCACYN,oCACPR,uGAKfM,umCC9EN,MAeMS,GAAoC,CAC/C9e,WAAY+e,gBACZ7e,YAAa,QACbC,WAlB4BP,IAK5B,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3Bof,MAACA,EAAKC,MAAEA,EAAKC,OAAEA,GAAU/nC,GACzB0mC,SAACA,EAAQC,OAAEA,EAAMC,mBAAEA,GAAsBzkC,EAEzCzgB,EAAU,IAAI6kD,GAChBsB,EAAMlsD,MACNmsD,EAAMnsD,MAA2B+qD,EAAUC,EAAQC,GACvD,OAAOle,EAAQ9M,gBAAgBl6B,EAAS,CAACmmD,EAAOC,EAAOC,GAAS,mBCfrDC,GAMX58C,YAAYzP,EAAiBssD,EAAoBC,GALjD58C,mBAAgB,CAAC,KAGjBA,oBAAiB,CAAC,CAACoN,KAAM,QAASM,KAAM,UAGtC1N,KAAKD,YAAc1P,EACnB,MAAM0jB,EAAO1jB,EAAM+E,OACbynD,EAAMF,EAAY,MAAQ,QAAQtL,GAAUt9B,EAAM,aAClD3e,EAAS/E,EAAMA,EAAM+E,OAAS,GACpC,IAAIo/B,EAAY,GACZsoB,EAAY,GAIZH,GACFnoB,EAAYooB,EAAU,WAAUxnD,EAAS,GAAM,WAC/C0nD,EAAYF,EAAU,UAAY,YAElCpoB,EAAYooB,EAAU,gBAAgBxnD,IAAW,cACjD0nD,EAAaF,EAAU,aAAe,cAGxC58C,KAAKI,SAAW,kCAEV2O,GAAkBgF,qDACRgpC,GAAchpC,EAAM,mCAClB8oC,6DAERroB,6BACQsoB,iBACVC,GAAchpC,EAAM,2CACRs9B,GAAUt9B,EAAM,kEAQxC,SAASs9B,GAAUt9B,EAAc3G,GAC/B,GAAa,IAAT2G,EACF,MAAO,GAAG3G,IACL,GAAa,IAAT2G,EACT,MAAO,GAAG3G,QAAWA,MAChB,GAAa,IAAT2G,EACT,MAAO,GAAG3G,QAAWA,QAAWA,MAC3B,GAAa,IAAT2G,EACT,MAAO,GAAG3G,QAAWA,QAAWA,QAAWA,MAE3C,MAAMhf,MAAM,2BAA2B2lB,0BAI3C,SAASgpC,GAAchpC,EAAc3G,GACnC,GAAa,IAAT2G,EACF,MAAO,GAAG3G,IACL,GAAa,IAAT2G,EACT,MAAO,GAAG3G,MACL,GAAa,IAAT2G,EACT,MAAO,GAAG3G,MACL,GAAa,IAAT2G,EACT,MAAO,GAAG3G,MAEV,MAAMhf,MAAM,2BAA2B2lB,0BCDpC,MAAMipC,GAA6B,CACxCzf,WAAY0f,SACZxf,YAAa,QACbC,oBA5DEP,GAGF,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3BhxB,EAACA,GAAKuI,GACNsQ,KAACA,EAAI23B,UAAEA,EAASC,QAAEA,GAAW/lC,EAE7BgO,EAAQ1Y,EAAE9b,MAAM+E,OAChB8nD,EAAcrwC,eAAa83B,mBAAmB,CAAC3f,GAAOH,GAC5D,IAAI4kB,EAAYt9B,EACG,MAAf+wC,IACFzT,EAAYjE,GAAU,CAAC9wB,OAAQ,CAACvI,EAAAA,GAAIixB,QAAAA,EAASvmB,MAAO,CAAC+N,KAAMs4B,MAE7D,MAAMC,EAAetwC,eAAai4B,iBAAiB,EAAGjgB,GAAO,GAE7D,GAAIs4B,IAAiBt4B,EAAQ,EAC3B,MAAM,IAAIz2B,MACN,kDACI+d,EAAE9b,MAAM+E,OAAS,kBACL4vB,KAEtB,MAAM10B,EAAOm5C,EAAUp5C,MAAM8sD,GAC7B,IAAI51C,EAAS21B,GAAS,CAACxoB,OAAQ,CAACvI,EAAGs9B,GAAYrM,QAAAA,IAI/C,IAAK,IAAIznC,EAAI,EAAGA,GAAKjF,KAAKC,KAAKD,KAAK0sD,KAAK9sD,IAAS,EAAGqF,IAAK,CACxD,MAAMS,EAAU,IAAIsmD,GAAcjT,EAAUp5C,OAAO,EAAOusD,GACpD5K,EAAe,CAAC,CAACr8C,IACjB0nD,EAAa91C,EACnBA,EACI61B,EAAQ9M,gBAAgBl6B,EAAS,CAACmR,GAASA,EAAOvJ,MAAOg0C,GAC7D5U,EAAQ5M,8BAA8B6sB,GAIxC,GAAIV,EAAW,CACb,MAAMvmD,EAAU,IAAIsmD,GAAcjT,EAAUp5C,MAAOssD,EAAWC,GACxDS,EAAa91C,EACnBA,EAAS61B,EAAQ9M,gBAAgBl6B,EAAS,CAACmR,GAASA,EAAOvJ,OAC3Do/B,EAAQ5M,8BAA8B6sB,GAGxC,GAAmB,MAAfH,EAAqB,CACvB,MACMI,EAA0B9X,GAC5B,CAAC9wB,OAAQ,CAACvI,EAAG5E,GAAS61B,QAAAA,EAASvmB,MAAO,CAAC+N,KAFhB/X,eAAa0wC,uBAAuBL,MAO/D,OAHA9f,EAAQ5M,8BAA8BjpB,GACtC61B,EAAQ5M,8BAA8BiZ,GAE/B6T,EAGT,OAAO/1C,IC3BF,MAAMi2C,GAAoC,CAC/CjgB,WAAYkgB,gBACZhgB,YAAa,QACbC,oBAlC4BP,GAK5B,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3BhxB,EAACA,EAACsnC,QAAEA,GAAW/+B,GACfpkB,KAACA,EAAIssB,aAAEA,GAAgB/F,EAE7B,GAAuB,IAAnB1K,EAAE9b,MAAM+E,OAAc,CACxB,MAAM+mB,EAAQihB,EAAQ7M,SAASpkB,EAAE4jB,QAC3B3T,EAAcghB,EAAQ7M,SAASkjB,EAAQ1jB,QAEvCvT,EACF6J,GAAgBlK,EAAOC,EAAaq3B,EAAQz1C,MAAOy1C,EAAQpjD,MAAOC,GAEtE,OAAO8sC,EAAQ9H,eAAe,CAAChlC,GAAOmjD,EAAQz1C,MAAOwe,GAChD,GAAuB,IAAnBrQ,EAAE9b,MAAM+E,OAAc,CAC/B,MAAMsnB,EAAO0gB,EAAQsgB,WAAWvxC,GAC1BwQ,EAAaygB,EAAQsgB,WAAWjK,GAEhC32B,EAASyJ,GAAsB7J,EAAMC,EAAYrsB,EAAMssB,GAE7D,OAAOwgB,EAAQ9H,eAAexY,EAAOzsB,MAAOojD,EAAQz1C,MAAO8e,EAAOlG,QAGpE,MAAM,IAAIxoB,MAEN,qEAAG+d,EAAE9b,MAAM+E,mBC/BJuoD,GAOX79C,YACIC,EAAuB69C,EAAmBzO,GAP9CnvC,mBAAgB,CAAC,KACjBA,iBAAwB,GAOtBA,KAAKD,YAAcA,EACnBC,KAAK49C,UAAYA,EACjB59C,KAAKmvC,WAAaA,EAClBnvC,KAAKI,SAAW,yGAIJJ,KAAK69C,0CACL79C,KAAK89C,yCACL99C,KAAK+9C,kDAEEH,oCACQA,6BACRA,oCACQA,yCACIA,4BACzB59C,KAAKg+C,iFAGQh+C,KAAKi+C,iEAMlBn+C,uBACN,MAAwB,SAApBE,KAAKmvC,WACA,YAEA,YAIHrvC,sBACN,MAAwB,SAApBE,KAAKmvC,WACA,YAEA,YAIHrvC,sBACN,MAAwB,SAApBE,KAAKmvC,WACA,YAEA,YAIHrvC,qBACN,MAAwB,SAApBE,KAAKmvC,WACAnvC,KAAKD,YAAY,GAEjBC,KAAKD,YAAY,GAIpBD,yBACN,MAAwB,SAApBE,KAAKmvC,WACA,4BAEA,6BCrCN,MAAM+O,GAAmC,CAC9C3gB,WAAY4gB,eACZ1gB,YAAa,QACbC,oBAjC2BP,GAK3B,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3BhxB,EAACA,GAAKuI,GACNkpC,UAACA,EAASzO,WAAEA,GAAct4B,EAEhCtmB,OAAKwN,OACD6/C,EAAY,GACZ,IAAM,sDAAsDA,MAEhE,MAAMp6B,EAAYrX,EAAE9b,MAAM,GACpB+tD,EAA8B,SAAfjP,EAAyBhjC,EAAE9b,MAAM,GAAK8b,EAAE9b,MAAM,GAC7DguD,EAA6B,SAAflP,EAAyBhjC,EAAE9b,MAAM,GAAK8b,EAAE9b,MAAM,GAC5DiuD,EAA6B,SAAfnP,EAAyBhjC,EAAE9b,MAAM,GAAK8b,EAAE9b,MAAM,GAE5DkuD,EAAeH,EAAcR,EAC7BY,EAAcH,EAAaT,EAC3Ba,EAAcH,GAAcV,EAAYA,GAMxCxnD,EAAU,IAAIunD,GAJgB,SAAfxO,EACjB,CAAC3rB,EAAW+6B,EAAcC,EAAaC,GACvC,CAACj7B,EAAWi7B,EAAaF,EAAcC,GAEUZ,EAAWzO,GAChE,OAAO/R,EAAQ9M,gBAAgBl6B,EAAS,CAAC+V,GAAIA,EAAEnO,eC7BpC0gD,GAKX5+C,YACI4sC,EAAmCtM,GAAU,EAC7CN,EAAqB,KAAMO,GAAqB,EAChDse,GAAoB,GAPxB3+C,mBAAgB,CAAC,IAAK,KAQpBA,KAAKD,YAAc2sC,EAASr+B,SAE5B,MAAMuwC,EAAWlS,EAASkB,SACpBiR,EAAWnS,EAASmB,QACpBP,EAASZ,EAASa,QAAQC,IAC1BC,EAAUf,EAASa,QAAQ7xB,KAC3BsxB,EAAeN,EAASM,aACxBC,EAAcP,EAASO,YACvBC,EAAiBR,EAASQ,eAC1BC,EAAgBT,EAASS,cACzB4B,EAAerC,EAASqC,aACxBhC,EAAcL,EAASK,YACvB+R,EAAapS,EAAS0L,YAAc1L,EAASoB,WAEnD,IAAIjN,EAAoB,GAAIC,EAAyB,GACjDhB,IAEAe,EADER,EACkB,uGAEhBP,eAEK6e,EACW,+FAEhB7e,eAGgB,wDAEdA,2BAKRgB,EAAyB,gCAG3B,MAAMC,EAAiBX,EAAU,kCAAoC,GACjEA,GACFpgC,KAAKi4B,cAAc3rB,KAAK,QAGtB+zB,GACFrgC,KAAKi4B,cAAc3rB,KAAK,0BAEtBqyC,GACF3+C,KAAKi4B,cAAc3rB,KAAK,kBAG1BtM,KAAKI,SAAW,WACZygC,0CAE4BmM,MAAiBC,uCACpBK,MAAWG,kNAOpBqR,iCACIA,kXASI/P,kDACK7B,uCAEL0R,+EAIE7R,oDACKI,yCAEL0R,6PAWxB9d,cACAD,sDCpGGie,GAOXj/C,YACI4sC,EAAmCtM,GAAU,EAC7CN,EAAqB,KAAMO,GAAqB,EAChDse,GAAoB,GATxB3+C,mBAAgB,CAAC,IAAK,KACtBA,mBAAe,EACfA,mBAAe,EAQbA,KAAKD,YAAc2sC,EAASr+B,SAC5B,MAAMywC,EAAapS,EAAS0L,YAAc1L,EAASoB,WAC7C8Q,EAAWlS,EAASkB,SACpBiR,EAAWnS,EAASmB,QACpBP,EAASZ,EAASa,QAAQC,IAC1BC,EAAUf,EAASa,QAAQ7xB,KAC3BsxB,EAAeN,EAASM,aACxBC,EAAcP,EAASO,YACvBC,EAAiBR,EAASQ,eAC1BC,EAAgBT,EAASS,cACzB4B,EAAerC,EAASqC,aACxBhC,EAAcL,EAASK,YACvBiS,EAAejS,EAErB,IAAIjsC,EAAW,uFAIf,IAAK,IAAI+iB,EAAI,EAAGA,EAAIkpB,EAAalpB,IAC/B/iB,GAAY,2BACU,EAAJ+iB,4BACG,EAAJA,kCACK,EAAJA,EAAQ,4BACL,EAAJA,EAAQ,6BACZA,KAWf,IAAK,IAAI4yB,EAAI,EAAGA,EAAI1H,EAAc0H,IAAK,CACrC,IAAK,IAAI5yB,EAAI,EAAGA,EAAIkpB,EAAalpB,IAC/B/iB,GAAY,sBACG,EAAJ+iB,oCACI,EAAJA,iCACI,EAAJA,EAAQ,oCACJ,EAAJA,EAAQ,4BACbA,iBAER/iB,GAAY,6BACQ21C,EAAIvJ,kCACD0R,eAGvB,IAAK,IAAIK,EAAS,EAAGA,GAAUD,EAAe,GAAK,EAAGC,IAAU,CAC9D,MAAMC,EAAoB,EAATD,EACXp7B,EAAIq7B,EAAW/R,EAMrB,GAJArsC,GAAY,+BACQ+iB,iBAGA,IAAhBopB,GACF,GAAIiS,EAAWnS,IAETU,EAAU,GAAM,GAUlB3sC,GAAY,yFAEwB+9C,eAChCK,4CACSA,+MAIaL,oCACXK,oEAEFA,iDAMXp+C,GADoB,IAAlBqsC,GAAuBtpB,EAAI,EACjB,uBACRq7B,mBAA0BA,EAAW,gBACrCA,2BAGQ,mGAGwBL,sPAKVA,wGAIlBK,gCAAuCA,6DAEvCA,6BAAoCA,mDAM9Cp+C,GAAY,yCACY+9C,eACpBK,4CACSA,iEACOL,oCACLK,oEAEFA,uDAGPA,cAAqBA,uBAIzBr7B,EAAI,EAAIkpB,GAAa,CAOvB,MAAMoS,EAAkB1R,EAAU,GAAM,EACpCl9C,OAAK0K,kBAAkBkyC,GACvBA,EAECA,EAAgB,GAAM,GAAKM,EAAU,GAAM,GAC3CN,EAAgB,GAAM,GAAKM,EAAU,GAAM,GAC9C3sC,GAAY,uCACQ2sC,EAAU,OAAO0R,2DAEDN,eAChCK,EAAW,8CACFA,EAAW,qNAIEL,sCACXK,EAAW,wEAEbA,EAAW,uDAMpB/R,EAAgB,IAClBrsC,GAAY,6FAEwB+9C,eAChCK,gDACSA,oEACAA,4DAKfp+C,GAAY,yBACNo+C,EAAW,mBAAmBA,gBAChCA,EAAW,8BAObp+C,GADsB,IAApBq+C,EACU,2BACND,EAAW,cAAcA,2BAGnB,yCACQC,6DAEgBN,eAChCK,EAAW,gDACFA,EAAW,iFACEL,wCACXK,EAAW,4EAEbA,EAAW,+DAGlBA,EAAW,cAAcA,EAAW,iCAO9Cr7B,EAAIkpB,IAQFU,EAAU,GAAM,GAClB3sC,GAAY,yCACYmsC,sDACW4R,eAC/BK,4CACSA,6MAGaL,oCACXK,oEAEFA,gFAGkBL,eAC3BK,EAAW,4CACFA,EAAW,qMAGJL,oCACLK,EAAW,oEAEbA,EAAW,uDAGlBA,mBAA0BA,gBAC5BA,EAAW,yBAGXr7B,EAAI,EAAIkpB,IACVjsC,GAAY,iFAEYmsC,wDACW4R,8GAG7BK,EAAW,mBAAmBA,EAAW,wCAIjDp+C,GAAY,wCACW+9C,eACnBK,4CACSA,iEACOL,oCACLK,oEAEFA,qEAGOjS,sDACe4R,eAC/BK,EAAW,4CACFA,EAAW,6EACEL,oCACXK,EAAW,mEAEbA,EAAW,uDAGlBA,uCACOA,gBAAuBA,EAAW,yBAG3Cr7B,EAAI,EAAIkpB,IACVjsC,GAAY,yBACNo+C,EAAW,mBAAmBA,gBAChCA,EAAW,8BAWnBA,EAAWnS,IACbjsC,GAAY,+BACM21C,MAAM5yB,wCACPq7B,8CAGbr7B,EAAI,EAAIkpB,IACVjsC,GAAY,iCACM21C,MAAM5yB,EAAI,0CACXq7B,EAAW,kDAKlCp+C,GAAY,sBAKd,IAAI+/B,EAAoB,GAAIC,EAAyB,GACjDhB,IAEAe,EADER,EACkB,oGAEhBP,eAEK6e,EACW,4FAEhB7e,eAGgB,wCAChBA,eAINgB,EAAyB,gCAG3B,MAAMC,EAAiBX,EAAU,kCAAoC,GACjEA,GACFpgC,KAAKi4B,cAAc3rB,KAAK,QAGtB+zB,GACFrgC,KAAKi4B,cAAc3rB,KAAK,0BAEtBqyC,GACF3+C,KAAKi4B,cAAc3rB,KAAK,kBAG1BtM,KAAKI,SAAW,WACZygC,0CAE4BmM,MAAiBC,uCACpBK,MAAWG,oNAQpBqR,iCACIA,mOAOlBh+C,0EAGAigC,cACAD,gDCjVH,MAAMse,GAA4C,CACvD7hB,WAAY8hB,wBACZ5hB,YAAa,QACbC,oBArCoCP,GAKpC,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3BhxB,EAACA,EAAC4mB,OAAEA,GAAUre,GACdzV,QAACA,EAAO9J,IAAEA,EAAGmkD,UAAEA,EAAS1K,gBAAEA,GAAmB/3B,EAEnD,IAAIyoC,EAAahG,EACC,MAAdgG,IACFA,EAAa,CAAC,EAAG,IAGnB/uD,OAAKwN,OACD8O,eAAagiC,+BAA+B5vC,EAASqgD,IACrD,IACI,gFAAkBrgD,oBAA0BqgD,OAEpD,MAAM5S,EAAW7/B,eAAa4sC,kBAC1BttC,EAAE9b,MACF0iC,EAAO1iC,MAA2C4O,EAASqgD,EAC3DnqD,EAAKy5C,GAAiB,GAE1B,IAAIx4C,EAOJ,OAJEA,EAFExE,QAAMc,QAAQ,6BAA+Bg6C,EAASO,aAAe,GACrEP,EAAS0L,YAAc1L,EAASoB,YAAe,EACvC,IAAIiR,GAA6BrS,GAEjC,IAAIgS,GAAuBhS,GAEhCtP,EAAQ9M,gBAAgBl6B,EAAS,CAAC+V,EAAG4mB,GAAS,mBClC1CwsB,GAKXz/C,YAAY4sC,GAJZ1sC,mBAAgB,CAAC,IAAK,MAKpBA,KAAKD,YAAc2sC,EAASiN,YAE5B,MAAM3M,EAAeN,EAASM,aACxBC,EAAcP,EAASO,YACvBK,EAASZ,EAASa,QAAQC,IAC1BC,EAAUf,EAASa,QAAQ7xB,KAC3BojC,EAAapS,EAAS0L,YAAc1L,EAASoB,WAEnD9tC,KAAKI,SAAW,2MAOI0+C,sHAKMpS,EAASlpB,sDACLkpB,EAAS6C,sDACVvC,OAAkBM,yCAEjBZ,EAASkB,4FAIPlB,EAAS8C,uDACVvC,OAAiBQ,2CAEhBf,EAASmB,2SAgBhC2R,GAKX1/C,YAAY4sC,GAJZ1sC,mBAAgB,CAAC,KAAM,KAKrBA,KAAKD,YAAc2sC,EAASt+B,QAE5B,MAAM2gC,EAAerC,EAASqC,aACxBhC,EAAcL,EAASK,YACvBC,EAAeN,EAASM,aACxBC,EAAcP,EAASO,YAEvBK,EAASyB,EAAe,EAAIrC,EAASa,QAAQC,IAC7CC,EAAUV,EAAc,EAAIL,EAASa,QAAQ7xB,KAC7CojC,EAAapS,EAAS0L,YAAc1L,EAASoB,WAEnD9tC,KAAKI,SAAW,oCACaktC,MAAWG,6TAYZsB,6DACgB/B,6CAEZN,EAAS6C,oIAKpBR,kDAEShC,+DACgBE,+CAEZP,EAAS8C,4JAMpBzC,oGAGS+R,2CACNA,iQCvFvB,MAAMW,GAA0D,CACrEliB,WAAYmiB,sCACZjiB,YAAa,QACbC,oBApBkDP,GAKlD,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3BhxB,EAACA,EAAC2jC,GAAEA,GAAMp7B,GACVzV,QAACA,EAAOq6C,UAAEA,EAASnkD,IAAEA,EAAGy5C,gBAAEA,EAAe+K,YAAEA,GAAe9iC,EAE1D61B,EAAW7/B,eAAa4sC,kBAC1BttC,EAAE9b,MAA2CspD,EAAa16C,EAC1Dq6C,EAAWnkD,EAAKy5C,GAAiB,GAE/Bx4C,EAAU,IAAImpD,GAAgC7S,GACpD,OAAOtP,EAAQ9M,gBAAgBl6B,EAAS,CAAC+V,EAAG2jC,GAAK,aCG5C,MAAM6P,GAAyD,CACpEpiB,WAAYqiB,qCACZniB,YAAa,QACbC,oBApBiDP,GAKjD,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3B2S,GAACA,EAAE/c,OAAEA,GAAUre,GACfzV,QAACA,EAAOq6C,UAAEA,EAASnkD,IAAEA,EAAGy5C,gBAAEA,EAAeltB,WAAEA,GAAc7K,EAEzD61B,EAAW7/B,eAAa4sC,kBAC1B/3B,EAAYqR,EAAO1iC,MAA2C4O,EAC9Dq6C,EAAWnkD,EAAKy5C,GAAiB,GAE/Bx4C,EAAU,IAAIopD,GAA+B9S,GACnD,OAAOtP,EAAQ9M,gBAAgBl6B,EAAS,CAAC05C,EAAI/c,GAAS,mBCjB3C8sB,GAKX//C,YAAYxP,GAJZ0P,mBAAgB,CAAC,KAKfA,KAAKD,YAAc,CAACzP,EAAMA,GAC1B0P,KAAKI,SAAW,uLCkBb,MAAM0/C,GAA2B,CACtCviB,WAAYwiB,OACZtiB,YAAa,QACbC,oBAxBmBP,GAEnB,MAAMzoB,OAACA,EAAM0oB,QAAEA,GAAWD,GACpBhxB,EAACA,GAAKuI,EAENrG,EAAW,IAAIlC,EAAE9b,SAAU8b,EAAE9b,OAC7By0B,EAAQv0B,OAAKC,cAAc2b,EAAE9b,OAE7B2vD,EAAOle,GAAQ,CAACptB,OAAQ,CAACvI,EAAAA,GAAIixB,QAAAA,EAASvmB,MAAO,CAACxmB,MAAO,CAACy0B,MAEtD1uB,EAAU,IAAIypD,GAAY/6B,GAC1B7W,EAAMmvB,EAAQ9M,gBAAgBl6B,EAAS,CAAC4pD,GAAOA,EAAKhiD,OAEpD4hC,EAAMkC,GAAQ,CAACptB,OAAQ,CAACvI,EAAG8B,GAAMmvB,QAAAA,EAASvmB,MAAO,CAACxmB,MAAOge,KAK/D,OAHA+uB,EAAQ5M,8BAA8BwvB,GACtC5iB,EAAQ5M,8BAA8BviB,GAE/B2xB,UCrBIqgB,GAKXngD,YAAY4sC,GAJZ1sC,mBAAgB,CAAC,IAAK,KAKpBA,KAAKD,YAAc2sC,EAASr+B,SAE5B,MAAMu/B,SACJA,EAAQC,QACRA,EAAON,QACPA,EAAOP,aACPA,EAAYC,YACZA,EAAW8B,aACXA,EAAYhC,YACZA,EAAWG,eACXA,EAAcC,cACdA,GACET,GAEGc,IAAKF,EAAQ5xB,KAAM+xB,GAAWF,EAErCvtC,KAAKI,SAAW,uCACgB4sC,MAAiBC,uCACpBK,MAAWG,+YAadsB,6CACG7B,yCAECU,yCACAb,iDACGI,6CAECU,yXChB/B,MAAMqS,GAAiC,CAC5C3iB,WAAY4iB,aACZ1iB,YAAa,QACbC,oBA5ByBP,GAKzB,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3BhxB,EAACA,EAAC4mB,OAAEA,GAAUre,GACdzV,QAACA,EAAO9J,IAAEA,EAAGmkD,UAAEA,GAAaziC,EAE5B61B,EAAW7/B,eAAauzC,sBAC1Bj0C,EAAE9b,MACF0iC,EAAO1iC,MAAmC4O,EAAS9J,EACnD,OAAyBmkD,GAC7B,IAAI1Z,EAEJ,MAAMxpC,EAAU,IAAI6pD,GAAkBvT,GACtC9M,EAAMxC,EAAQ9M,gBAAgBl6B,EAAS,CAAC+V,EAAG4mB,GAAS,WAEpD,MAAMyU,EACF1F,GAAQ,CAACptB,OAAQ,CAACvI,EAAGyzB,GAAMxC,QAAAA,EAASvmB,MAAO,CAACxmB,MAAOq8C,EAASr+B,YAGhE,OAFA+uB,EAAQ5M,8BAA8BoP,GAE/B4H,ICqDF,MAAM6Y,GAA6B,CACxC9iB,WAAY+iB,SACZ7iB,YAAa,QACbC,oBA1EEP,GAGF,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3BojB,SAACA,GAAY1pC,EACboyB,EAAUv0B,GAEV8rC,QAACA,EAAOC,WAAEA,EAAUC,OAAEA,GACxB7zC,eAAa8zC,qBAAqBJ,EAAUtX,EAAQ7zC,QACxDyX,eAAa+zC,oBAAoBJ,EAAQprD,OAAQsrD,EAAQzX,GACzD,MAAM4X,KAACA,EAAIC,MAAEA,GAASj0C,eAAak0C,qBAAqBN,EAAYC,GAE9DM,EAASF,EAAM1rD,OACrB,IAAIwqC,EAAuB,KACvBqhB,EAAmBT,EAAQprD,OAC/B,MAAM8rD,EAAiC,GACvC,IAAK,IAAIvrD,EAAI,EAAGA,EAAIqrD,IAAUrrD,EAAG,CAC/B,IAAK,MAAMwrD,KAAUL,EAAMnrD,GAAI,CAC7B,MAAOyrD,mBAAoBx8B,EAAMy8B,WAAYC,GACzCz0C,eAAa00C,qBAAqBN,EAAkBP,EAAOS,IAC/D,IAAIh1C,EACAU,eAAa20C,sBAAsB58B,GACrCzY,EAAI88B,EAAQkY,IAEZh1C,EAAIq5B,GAAU,CAAC9wB,OAAQ,CAACvI,EAAG88B,EAAQkY,IAAU/jB,QAAAA,EAASvmB,MAAO,CAAC+N,KAAAA,KAC9Ds8B,EAAiB50C,KAAKH,IAExB,MAAMwV,EAAwBxV,EAAE9b,MAAMwF,QACtC,IAAK,IAAI4lB,EAAI,EAAGA,EAAI6lC,EAAalsD,SAAUqmB,EACzCkG,EAAYqL,OAAOs0B,EAAa7lC,GAAI,EAAG,GAGpClrB,OAAKqL,YAAYuQ,EAAE9b,MAAOsxB,KAC7BxV,EAAI21B,GAAQ,CAACptB,OAAQ,CAACvI,EAAAA,GAAIixB,QAAAA,EAASvmB,MAAO,CAACxmB,MAAOsxB,KAClDu/B,EAAiB50C,KAAKH,IAEZ,OAARyzB,EACFA,EAAMzzB,GAGNyzB,EAAMyB,GAAS,CAAC3sB,OAAQ,CAACgC,EAAGvK,EAAG6E,EAAG4uB,GAAMxC,QAAAA,IACxC8jB,EAAiB50C,KAAKszB,IAGtBjqC,EAAIqrD,EAAS,IACXH,EAAKlrD,IAAM,IACbiqC,EAAMxM,GAAI,CACR1e,OAAQ,CAACvI,EAAGyzB,GACZxC,QAAAA,EACAvmB,MAAO,CACLmO,KAAM67B,EAAKlrD,IAAM6qD,EAAQprD,OAAS6rD,GAClC3c,UAAU,KAGd4c,EAAiB50C,KAAKszB,IAExBqhB,KAKJ,IAAK,MAAM/wB,KAAcgxB,EACnBhxB,IAAe0P,GAGnBxC,EAAQ5M,8BAA8BN,GAGxC,OAAO0P,IC9DH6hB,GAAM/iB,GAAgB,CAACxQ,UAbjB,0CAaiCyQ,gBAX1B,iQAaN+iB,GAA0B,CACrCnkB,WAAYokB,MACZlkB,YAAa,QACbC,WAAY+jB,ICEDG,GAA8B,CACzCrkB,WAAYskB,UACZpkB,YAAa,QACbC,WAbGP,IACC,MAAMzoB,OAACA,EAAM0oB,QAAEA,GAAWD,GACpB2S,GAACA,EAAEnjC,EAAEA,GAAK+H,EAEVte,EAAUxE,QAAMc,QAAQ,gCAC1B,IAAIqqC,GAXS,0IAW6B+S,EAAGz/C,MAAOsc,EAAEtc,OACtD,IAAIysC,GAbE,yCAauBgT,EAAGz/C,MAAOsc,EAAEtc,OAC7C,OAAO+sC,EAAQ9M,gBAAgBl6B,EAAS,CAAC05C,EAAInjC,GAAImjC,EAAG9xC,SCX7C8jD,GAAQ9iB,GAAiB,CACpC9Q,UAHY,wBAIZyQ,gBARmB,kCASnB3gC,MAAO,OACP4gC,cAAejY,KAGJo7B,GAA4B,CACvCxkB,WAAYykB,QACZvkB,YAAa,QACbC,WAAYokB,ICEDG,GAAMvjB,GAAgB,CAACxQ,UAjBxB,wNAIErhB,eAAaq1C,wBACZr1C,eAAas1C,yBACbt1C,eAAau1C,yBACbv1C,eAAaw1C,yBACbx1C,eAAay1C,yBACbz1C,eAAa01C,yKAUfC,GAA0B,CACrCjlB,WAAYklB,MACZhlB,YAAa,QACbC,WAAYukB,ICrBDS,GAAM,iBACNvrC,GAAMunB,GACf,CAACxQ,UAAWw0B,GAAK/jB,gBAAiB+jB,GAAK9jB,cAAehY,KAE7C+7B,GAA0B,CACrCplB,WAAYqlB,MACZnlB,YAAa,QACbC,WAAYvmB,aCPEkqC,GAAWlkB,GAKzB,MAAMzoB,OAACA,EAAMmC,MAAEA,EAAKumB,QAAEA,GAAWD,GAC3Btf,IAACA,GAAOhH,GACRjC,MAACA,GAASF,EAEV0N,EAAYxN,EAAMvkB,MAAM+E,OACxBgG,EAAWwZ,EAAMvkB,MAAMwF,QAC7B,IAAIgtD,EAAOhlC,EAWX,OAVIA,EAAM,IAERttB,OAAKwN,SACCqkB,EAAY,IAAMvE,GACpB,IAAM,mCAAoCuE,EAAY,OAClDA,OACRygC,EAAOzgC,EAAYvE,EAAM,GAE3BziB,EAAS4xB,OAAO61B,EAAM,EAAG,GAElB/gB,GAAQ,CAACptB,OAAQ,CAACvI,EAAGyI,GAAQwoB,QAAAA,EAASvmB,MAAO,CAACxmB,MAAO+K,KAGvD,MAAM0nD,GAAiC,CAC5CvlB,WAAYwlB,aACZtlB,YAAa,QACbC,WAAY2jB,IC7BR2B,GAAQ,uBAED3rC,GAAQqnB,GACjB,CAACxQ,UAAW80B,GAAOrkB,gBAAiBqkB,GAAOpkB,cAAe/X,KAEjDo8B,GAA4B,CACvC1lB,WAAY2lB,QACZzlB,YAAa,QACbC,WAAYrmB,UCVD8rC,GAKXrjD,YACIsjD,EAA0B1hC,EAC1B2hC,GANJrjD,mBAAgB,CAAC,OAAQ,QAOvB,MAAMsjD,EAAW5hC,EAAW,GAC5B1hB,KAAKD,YAAc2hB,EAEnB,MAAM6hC,EACFF,EAAU,SAAS3yD,KAAK8yD,KAAO,UAAU9yD,KAAK8yD,KAC5CC,EAAoBJ,EAAU,GAAGC,MAAe,MAEtD,IAAII,EACJ,GAAkB,SAAdN,EACFM,EAAW,wCACN,CAAA,GAAkB,SAAdN,EAGT,MAAM,IAAIh1D,MACN,sDAAsDg1D,MAH1DM,EAAW,oCAMb1jD,KAAKI,SAAW,4CACqBmjD,+FAG/BG,gHAIwCJ,sKAMpBA,oWAS2BG,mMC1CzCE,GACZx3C,EAAek3C,EAAkBjmB,GACnC,MAAM2B,EAAQ3B,EAAQpoB,QAAQxV,IAAI2M,EAAE4jB,QAE9B6zB,EAAYrzD,OAAKC,cAAc2b,EAAE9b,OAEjCwzD,EAAqB13C,EAAE9b,MAAM8b,EAAE9b,MAAM+E,OAAS,GAG9C0uD,EAAUhiB,GACZ,CAACptB,OAAQ,CAACvI,EAAAA,GAAIixB,QAAAA,EAASvmB,MAAO,CAACxmB,MAAO,CAH5BuzD,EAAYC,EAGwBA,MAE5CllC,EAASmlC,EAAQzzD,MACjBixC,EAAc,IAAI6hB,GAAW,OAAQxkC,EAAQ0kC,GAC7C7hB,EAAc,IAAI2hB,GAAW,OAAQxkC,EAAQ0kC,GAE7C3uC,EAAS,CACb,CACEqb,OAAQgP,EAAM3O,mBAAmBU,KAAKf,OACtC/xB,MAAO+gC,EAAM3O,mBAAmBU,KAAK9yB,MACrC3N,MAAOsuB,GAET,CACEoR,OAAQgP,EAAM3O,mBAAmBY,KAAKjB,OACtC/xB,MAAO+gC,EAAM3O,mBAAmBY,KAAKhzB,MACrC3N,MAAOsuB,IAIL8iB,EAAWrE,EAAQ9M,gBAAgBgR,EAAa5sB,EAAQ,WACxDgtB,EAAWtE,EAAQ9M,gBAAgBkR,EAAa9sB,EAAQ,WAExD+qB,EACF9B,GAAQ,CAACjpB,OAAQ,CAACoc,KAAM2Q,EAAUzQ,KAAM0Q,GAAWtE,QAAAA,IAEvDA,EAAQ5M,8BAA8BiR,GACtCrE,EAAQ5M,8BAA8BkR,GAEtC,MAAMqiB,EACFjiB,GAAQ,CAACptB,OAAQ,CAACvI,EAAGszB,GAAgBrC,QAAAA,EAASvmB,MAAO,CAACxmB,MAAO8b,EAAE9b,SAInE,OAFA+sC,EAAQ5M,8BAA8BszB,GACtC1mB,EAAQ5M,8BAA8BiP,GAC/BskB,ECrCF,MAAMC,GAA0B,CACrCzmB,WAAY0mB,MACZxmB,YAAa,QACbC,oBAXkBP,GAElB,MAAMzoB,OAACA,EAAM0oB,QAAEA,GAAWD,GACpBvoB,MAACA,GAASF,EAEhB,OAAOivC,GAAQ/uC,GAAO,EAAqBwoB,WCRhC8mB,GAMXpkD,YAAYzP,EAAiBypB,GAJ7B9Z,iBAAwB,GAExBA,oBAAiB,CAAC,CAACoN,KAAM,QAASM,KAAM,UAGtC1N,KAAKi4B,cAAgB,CAAC,KACtBj4B,KAAKD,YAAc1P,EAEnB2P,KAAKI,SAAW,kICRJ0gB,GAAKqc,GAEnB,MAAMC,QAACA,EAAOvmB,MAAEA,GAASsmB,GACnB9sC,MAACA,EAAKypB,MAAEA,GAASjD,EACvB,IAAI7Y,MAACA,GAAS6Y,EAId,GAFA7Y,EAAQA,GAASzN,OAAK4zD,WAAWrqC,GAEnB,WAAV9b,EAAoB,CAEtB,MAAM4Y,EAASrmB,OAAK+pB,kBAAkBtc,EAAOzN,OAAKC,cAAcH,IAEhE,OADAumB,EAAOkK,KAAKhH,GACLsjB,EAAQ9H,eAAejlC,EAAO2N,EAAO4Y,GACvC,CACL,MAAMxgB,EAAU,IAAI8tD,GAAY7zD,EAAOypB,GACjCk4B,EAAe,CAAC,CAACl4B,IACvB,OAAOsjB,EAAQ9M,gBAAgBl6B,EAAS,GAAI4H,EAAOg0C,IAIhD,MAAMoS,GAA2B,CACtC7mB,WAAY8mB,OACZ5mB,YAAa,QACbC,WAAY5c,UC1BDwjC,GAKXxkD,YAAYo7C,GAJZl7C,mBAAgB,CAAC,SACjBA,iBAAwB,GAItB,MAAMw7C,EAAaN,EAAW,GAC9Bl7C,KAAKD,YAAcm7C,EAEnBl7C,KAAKI,SAAW,gIAKKo7C,kFAEcA,4PCZhC,MAAM+I,GAAoC,CAC/ChnB,WAAYinB,gBACZ/mB,YAAa,QACbC,WAAY,EAAEhpB,OAAAA,EAAQ0oB,QAAAA,MACpB,MAAMmf,MAACA,GAAS7nC,EACVmqB,EAAezB,EAEfhnC,EAAU,IAAIkuD,GAAsB/H,EAAmBlsD,OAE7D,OADewuC,EAAavO,gBAAgBl6B,EAAS,CAACmmD,GAAQA,EAAMv+C,SCTlEymD,GAAQ,mBAEDltC,GAAQmnB,GACjB,CAACxQ,UAAWu2B,GAAO9lB,gBAAiB8lB,GAAO7lB,cAAe9X,KAEjD49B,GAA4B,CACvCnnB,WAAYonB,QACZlnB,YAAa,QACbC,WAAYnmB,IC8BDqtC,GAAW5lB,GACpB,CAAC9Q,UApCW,uPAoCSyQ,gBAxBF,sgBAwBmC3gC,MAAO,UAEpD6mD,GAA+B,CAC1CtnB,WAAYunB,WACZrnB,YAAa,QACbC,WAAYknB,UC9CDG,GAKXjlD,YAAYC,GAJZC,mBAAgB,CAAC,KAKf,MAAMG,EAAO/B,MACN7G,EAAQD,GAAWyI,EAC1BC,KAAKD,YAAcA,EACnBC,KAAKI,SAAW,wNAMmC9I,QAAYC,kCAE3C4I,EAAK3B,kXCjBhBwmD,GAOXllD,YAAYC,GANZC,mBAAgB,CAAC,KAGjBA,mBAAe,EACfA,mBAAe,EAGb,MAAMG,EAAO/B,MACN7G,EAAQD,GAAWyI,EAC1BC,KAAKD,YAAcA,EACnBC,KAAKI,SAAW,0bAeU9I,QAAYC,oCACd4I,EAAK3B,ybAgBvB2B,EAAK1B,mCCrCR,MAAMwmD,GAAiC,CAC5C1nB,WAAY2nB,aACZznB,YAAa,QACbC,WAKF,SAAoBP,GAKlB,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,EACjC,IAAIp5B,OAACA,GAAU2Q,EACf,MAAMywC,YAACA,GAAetuC,EAEhBuuC,EAAwC,sCAC1CrhD,aAAkBshD,iBAChBC,EAAwC,sCAC1CvhD,aAAkBwhD,kBACfjuD,EAAOC,GAAU6tD,EACpB,CACGrhD,EAA4ByhD,WAC5BzhD,EAA4B0hD,aAE/B,CAAC1hD,EAAOzM,MAAOyM,EAAOxM,QAEpB2I,EAA6B,CAAC3I,EAAQD,GACtC+W,EAAW,CAAC9W,EAAQD,EAAO6tD,IAE7BG,GAAWF,KACc,MAAvBM,KACFA,GAAsBn3D,SAASC,cAAc,UAAUK,WAAW,OAGpE62D,GAAoBr3D,OAAOiJ,MAAQA,EACnCouD,GAAoBr3D,OAAOkJ,OAASA,EACpCmuD,GAAoBC,UAChB5hD,EACA,EAAG,EAAGzM,EAAOC,GACjBwM,EAAS2hD,GAAoBr3D,QAG/B,MAAMu3D,EAAkBxoB,EAAQ9H,eAAep1B,EAAU,SAEzDk9B,EAAQpoB,QAAQxV,IAAIomD,EAAgB71B,QAAQxE,MAAQx7B,EAAag+B,OACjEqP,EAAQ/R,MAAMvnB,yBACVs5B,EAAQtB,WAAW8pB,EAAgB71B,QAAShsB,GAChD,MAAM3N,EAAUxE,QAAMc,QAAQ,cAC1B,IAAIsyD,GAAwB32C,GAC5B,IAAI02C,GAAkB12C,GACpBJ,EAAMmvB,EAAQ9M,gBAAgBl6B,EAAS,CAACwvD,GAAkB,SAEhE,OADAxoB,EAAQjN,YAAYy1B,EAAgB71B,QAC7B9hB,IAhDT,IAAIy3C,GC+EG,MAAMG,GAAkC,CAC7CtoB,WAAYuoB,cACZroB,YAAa,QACbC,oBAxF0BP,GAK1B,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3BhxB,EAACA,EAAC4mB,OAAEA,EAAM8S,KAAEA,EAAIC,uBAAEA,GAA0BpxB,GAC5CzV,QACJA,EAAO9J,IACPA,EAAGg6C,WACHA,EAAUmK,UACVA,EAAS1K,gBACTA,EAAe9O,WACfA,EAAUiG,eACVA,GACElvB,EAEE0iC,EAAc1sC,eAAa2sC,wBAAwBrK,GACnDzC,EAAW7/B,eAAa4sC,kBAC1BttC,EAAE9b,MACF0iC,EAAO1iC,MAA2C4O,EAASq6C,EAAWnkD,EACtEy5C,GAAiB,EAAuB2K,GAC5C,IAAI3Z,EACJ,MAAMiH,EAA8B,GAEpC,GAA8B,IAA1B6F,EAASqC,cAA+C,IAAzBrC,EAASK,aACZ,IAA5BL,EAASQ,gBAAmD,IAA3BR,EAASS,eAChB,IAA1BT,EAASM,cAA+C,IAAzBN,EAASO,aACb,SAA1BP,EAASa,QAAQ7/B,MAA6C,UAA1Bg/B,EAASa,QAAQ7/B,KAWnD,GAAI9b,QAAMc,QAAQ,sBAAuC,IAAfyZ,EAAE9b,MAAM,GACvDuvC,EAAMgZ,GAAiB,CACrBzsC,EAAAA,EACA4mB,OAAAA,EACA2Z,SAAAA,EACAtP,QAAAA,EACAyI,KAAAA,EACA/F,WAAAA,EACAgG,uBAAAA,EACAC,eAAAA,QAEG,CACL,MAAMe,EAAkB,MAARjB,EACVkB,EAAsD,MAA1BjB,EAC5BkB,EAAmC,cAAflH,EACpBmH,EACFnH,EAAaD,GAA6BC,GAAY,GAAS,KAC7D1pC,EAAU,IAAIihD,GAChB3K,EAAU5F,EAASG,EAAiBF,EACpCC,GACEtyB,EAAuB,CAACvI,EAAG4mB,GAOjC,GANI8S,GACFnxB,EAAOpI,KAAKu5B,GAEVC,GACFpxB,EAAOpI,KAAKw5B,GAEVkB,EAAmB,CACrB,MAAMO,EAAkBnK,EAAQ9H,eAC5B,GAAI,UACJ/kC,OAAKuuB,kBAAkBinB,EAAmC,YAC9DrxB,EAAOpI,KAAKi7B,GACZV,EAAcv6B,KAAKi7B,GAErB3H,EAAMxC,EAAQ9M,gBAAgBl6B,EAASse,EAAQ,gBA5C/CkrB,EAAMoY,GAAe,CACnB7rC,EAAAA,EACA4mB,OAAAA,EACA2Z,SAAAA,EACAtP,QAAAA,EACAyI,KAAAA,EACA/F,WAAAA,EACAgG,uBAAAA,EACAC,eAAAA,IAuCJ,MAAMyB,EACF1F,GAAQ,CAACptB,OAAQ,CAACvI,EAAGyzB,GAAMxC,QAAAA,EAASvmB,MAAO,CAACxmB,MAAOq8C,EAASr+B,YAKhE,OAHAw4B,EAAcv6B,KAAKszB,GACnBiH,EAAchpC,SAAQC,GAAKs/B,EAAQ5M,8BAA8B1yB,KAE1D0pC,ICbF,MAAMue,GAA2C,CACtDxoB,WAAYyoB,uBACZvoB,YAAa,QACbC,oBA1EmCP,GAKnC,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3BhxB,EAACA,EAAC4mB,OAAEA,EAAM8S,KAAEA,EAAIC,uBAAEA,GAA0BpxB,GAC5CzV,QAACA,EAAO9J,IAAEA,EAAGmkD,UAAEA,EAAS1K,gBAAEA,EAAe9O,WAAEA,EAAUiG,eAAEA,GACzDlvB,EAEEgwB,EAA8B,GAEpC,IAAIyY,EAAahG,EACC,MAAdgG,IACFA,EAAa,CAAC,EAAG,IAGnB/uD,OAAKwN,OACD8O,eAAagiC,+BAA+B5vC,EAASqgD,IACrD,IACI,gFAAkBrgD,oBAA0BqgD,OAEpD,MAAM5S,EAAW7/B,eAAa4sC,kBAC1BttC,EAAE9b,MACF0iC,EAAO1iC,MAA2C4O,EAASqgD,EAC3DnqD,EAAKy5C,GAAiB,GAEpBqX,EAA0Br0D,QAAMc,QAAQ,6BAC1Cg6C,EAASO,aAAe,GACxBP,EAAS0L,YAAc1L,EAASoB,YAAe,EAC7C7G,EAAkBnH,EACpBD,GAA6BC,EAAYmmB,GACzC,KACE1Q,EAA8B,CAACppC,EAAG4mB,GAElC+T,EAAkB,MAARjB,EACVkB,EAAsD,MAA1BjB,EAC5BkB,EAAmC,cAAflH,EAQ1B,GANIgH,GACFyO,EAAcjpC,KAAKu5B,GAEjBkB,GACFwO,EAAcjpC,KAAKw5B,GAEjBkB,EAAmB,CACrB,MAAMO,EAAkBnK,EAAQ9H,eAC5B,GAAI,UACJ/kC,OAAKuuB,kBAAkBinB,EAAmC,YAC9DwP,EAAcjpC,KAAKi7B,GACnBV,EAAcv6B,KAAKi7B,GAGrB,IAAInxC,EAEFA,EADE6vD,EACQ,IAAIlH,GACVrS,EAAU5F,EAASG,EAAiBF,EACpCC,GAEM,IAAI0X,GACVhS,EAAU5F,EAASG,EAAiBF,EACpCC,GAGN,MAAMz/B,EAAS61B,EAAQ9M,gBAAgBl6B,EAASm/C,EAAe,WAI/D,OAFA1O,EAAchpC,SAAQC,GAAKs/B,EAAQ5M,8BAA8B1yB,KAE1DyJ,UCzEI2+C,GAIXpmD,YACYqmD,EAA0BlnD,EAAmB5O,GAA7C2P,cAAAmmD,EAA0BnmD,aAAAf,EAJtCe,mBAAgB,CAAC,IAAK,WAKpBA,KAAKD,YAAc1P,EACnB,MAAM+1D,EAAcr3C,GAAkB9P,EAAQ7J,QACxC4I,EAAQ+Q,GAAkB1e,EAAM+E,QAChCixD,EAAermD,KAAKmmD,SAAW,EAAI,aAAe,UACxDnmD,KAAKI,SAAW,aACVgmD,eAAyBA,KAAepmD,KAAKf,gDAE3CjB,iGAEoBgC,KAAKmmD,mHAECE,2FCkC/B,MAAMC,GAA+B,CAC1C/oB,WAAYgpB,WACZ9oB,YAAa,QACbC,oBA/CEP,GACF,MAAMzoB,OAACA,EAAM0oB,QAAEA,GAAWD,GACpBzqB,OAACA,EAAMuN,QAAEA,GAAWvL,EAEpBwL,EAAeD,EAAQ5vB,MACvBmtB,EAAY0C,EAAaA,EAAa9qB,OAAS,GAC/CuoB,EAAaptB,OAAKC,cAAckiB,EAAOriB,QAEtCm2D,EAAajpC,EAAWE,EAAWxe,GACtC4N,eAAa45C,mBAAmB/zC,EAAQuN,GAEtCymC,EAAiB5kB,GACnB,CAACptB,OAAQ,CAACvI,EAAG8T,GAAUmd,QAAAA,EAASvmB,MAAO,CAACxmB,MAAO,CAACktB,EAAWC,MACzDmpC,EAAW7kB,GAAQ,CACvBptB,OAAQ,CAACvI,EAAGuG,GACZ0qB,QAAAA,EACAvmB,MAAO,CAACxmB,MAAO,CAAEE,OAAKC,cAAckiB,EAAOriB,OAASotB,EAAYA,MAGlE,GAAI2f,EAAQtI,mBAAmB,CAACpiB,EAAQuN,KACnB,WAAjBvN,EAAO1U,MAAoB,CAC7B,MAAMqf,EAAc+f,EAAQ7M,SAAStQ,EAAQ8P,QACvCzS,EAAY8f,EAAQsgB,WAAWhrC,GAC/Bk0C,EAAW5/B,GACb3J,EAAaC,EAAW5K,EAAO1U,MAAOuf,EAAWC,EAAWC,EAC5Dxe,EAASyT,EAAOriB,MAAOstB,GAE3B,OAAOyf,EAAQ9H,eAAekxB,EAAa9zC,EAAO1U,MAAO4oD,EAAShwC,QAEpE,MAAMxgB,EACF,IAAI8vD,GAAgB1oC,EAAWve,EAAS,CAACse,EAAWE,IAClDxP,EAAMmvB,EAAQ9M,gBAChBl6B,EAAS,CAACuwD,EAAUD,GAAiBC,EAAS3oD,OAE5CmtC,EACFrJ,GAAQ,CAACptB,OAAQ,CAACvI,EAAG8B,GAAMmvB,QAAAA,EAASvmB,MAAO,CAACxmB,MAAOm2D,KAMvD,OAJAppB,EAAQ5M,8BAA8Bk2B,GACtCtpB,EAAQ5M,8BAA8Bm2B,GACtCvpB,EAAQ5M,8BAA8BviB,GAE/Bk9B,UC/CI0b,GAMX/mD,YAAYsV,EAAkBrV,GAL9BC,mBAAgB,CAAC,IAAK,WAMpBA,KAAKD,YAAcA,EACnBC,KAAK+T,KAAOhU,EAAY3K,OACxB,MAAM4I,EAAQ+Q,GAAkB/O,KAAK+T,MAC/B+W,EAYV,SAAyB1V,EAAkB4P,GACzC,MAAM8hC,EAAgB,CAAC,UAAW,UAAW,UAAW,WAElDh8B,EAAe,GACrB,IAAK,IAAIn1B,EAAI,EAAGA,EAAIyf,EAAOhgB,OAAQO,IACvB,IAANA,EACFm1B,EAAaxe,KAAK,qCAElBwe,EAAaxe,KAAK,GAAGw6C,EAAcnxD,MAGvC,OAAOm1B,EAAa90B,OAvBGu4B,CAAgBnZ,GAErCpV,KAAKI,SAAW,kCAEVpC,wDACe8sB,gCCVTi8B,GAAS5pB,GAKvB,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3BhxB,EAACA,EAAC8T,QAAEA,GAAWvL,GACfsQ,KAACA,EAAIgiC,UAAEA,GAAanwC,EAEpBowC,EAAa12D,OAAK20B,eAAeF,EAAM7Y,EAAE9b,OAAO,GAChD4c,EAAYJ,eAAaq6C,aAAaC,yBACxCh7C,EAAG8T,EAASgnC,EAAYD,GAEtBI,EAAc72D,OAAKC,cAAcyvB,EAAQ5vB,OAEzC6iD,EAAY,GAEZyT,EAAW7kB,GAAQ,CACvBptB,OAAQ,CAACvI,EAAAA,GACTixB,QAAAA,EACAvmB,MAAO,CACLxmB,MAAO,CACL4c,EAAUuW,UAAWvW,EAAUo6C,UAAWp6C,EAAUq6C,QACpDr6C,EAAUwQ,cAKVG,EAAekkB,GAAQ,CAC3BptB,OAAQ,CAACvI,EAAG8T,GACZmd,QAAAA,EACAvmB,MAAO,CAACxmB,MAAO,CAAC4c,EAAUuW,UAAW4jC,EAAcn6C,EAAUuW,cAG/D0vB,EAAU5mC,KAAKq6C,GACfzT,EAAU5mC,KAAKsR,GAEf,MAAMG,EAAqB,CACzB9Q,EAAUuW,UAAWvW,EAAUo6C,UAAWD,EAAcn6C,EAAUuW,UAClEvW,EAAUwQ,WAGZ,GAAI2f,EAAQtI,mBAAmB,CAAC3oB,EAAG8T,KAAyB,WAAZ9T,EAAEnO,MAAoB,CACpE,MAAM8f,EAAasf,EAAQsgB,WAAW9/B,GAChClB,EAAO0gB,EAAQsgB,WAAWiJ,GAC1B7pC,EAASoK,GAAgBxK,EAAMoB,EAAYC,GAIjD,OAFAm1B,EAAUr1C,SAAQC,GAAKs/B,EAAQ5M,8BAA8B1yB,KAEtDs/B,EAAQ9H,eACXroB,EAAUlN,YAAa+c,EAAO9e,MAAO8e,EAAOlG,QAGlD,MAAMxgB,EAAU,IAAIywD,GAAcF,EAASt2D,MAAO0tB,GAC5C9P,EAAMmvB,EAAQ9M,gBAChBl6B,EAAS,CAACuwD,EAAU/oC,GAAe+oC,EAAS3oD,OAChDk1C,EAAU5mC,KAAK2B,GAEf,MAAMk9B,EAAWrJ,GACb,CAACptB,OAAQ,CAACvI,EAAG8B,GAAMmvB,QAAAA,EAASvmB,MAAO,CAACxmB,MAAO4c,EAAUlN,eAEzD,OADAmzC,EAAUr1C,SAAQC,GAAKs/B,EAAQ5M,8BAA8B1yB,KACtDqtC,EAGF,MAAMoc,GAA+B,CAC1ChqB,WAAYiqB,WACZ/pB,YAAa,QACbC,WAAYqpB,ICjEDU,GAAUzoB,GAAiB,CACtC9Q,UANc,uBAOdyQ,gBANqB,wCAOrBC,cAAezX,GACfnpB,MAAO,SAGI0pD,GAA8B,CACzCnqB,WAAYoqB,UACZlqB,YAAa,QACbC,WAAY+pB,ICXDG,GAAe5oB,GAAiB,CAC3C9Q,UANoB,wBAOpByQ,gBAN2B,6CAO3B3gC,MAAO,OACP4gC,cAAexX,KAGJygC,GAAmC,CAC9CtqB,WAAYuqB,eACZrqB,YAAa,QACbC,WAAYkqB,ICLP,MAAMG,GAA2B,CACtCxqB,WAAYyqB,OACZvqB,YAAa,QACbC,oBAXmBP,GAEnB,MAAMzoB,OAACA,EAAM0oB,QAAEA,GAAWD,GACpBvoB,MAACA,GAASF,EAEhB,OAAOivC,GAAQ/uC,GAAO,EAAoBwoB,KCN/B6qB,GAAWvpB,GAAgB,CAACxQ,UAFvB,wCAE6ClwB,MAAO,SAEzDkqD,GAA+B,CAC1C3qB,WAAY4qB,WACZ1qB,YAAa,QACbC,WAAYuqB,ICLDG,GAAQ1pB,GAAgB,CAACxQ,UAFvB,0BAE0ClwB,MAAO,SAEnDqqD,GAA4B,CACvC9qB,WAAY+qB,QACZ7qB,YAAa,QACbC,WAAY0qB,ICLD1pC,GAAQggB,GAAgB,CAACxQ,UAFvB,0BAE0ClwB,MAAO,SAEnDuqD,GAA4B,CACvChrB,WAAYirB,QACZ/qB,YAAa,QACbC,WAAYhf,ICAD+pC,GAAOzpB,GAAiB,CACnC9Q,UANW,uBAOXyQ,gBANkB,qCAOlBC,cAAevX,GACfrpB,MAAO,SAGI0qD,GAA2B,CACtCnrB,WAAYorB,OACZlrB,YAAa,QACbC,WAAY+qB,ICVDG,GAAY5pB,GAAiB,CACxC9Q,UANwB,wBAOxByQ,gBAN+B,0CAO/BC,cAAetX,GACftpB,MAAO,SAGI6qD,GAAgC,CAC3CtrB,WAAYurB,YACZrrB,YAAa,QACbC,WAAYkrB,ICLP,MAAMG,GAA+B,CAC1CxrB,WAAYyrB,WACZvrB,YAAa,QACbC,oBAZEP,GACF,MAAMC,QAACA,EAAOvmB,MAAEA,GAASsmB,GACnB9e,MAACA,EAAKC,KAAEA,EAAIrrB,IAAEA,GAAO4jB,EAGrB2F,EAAUgL,GAAgBnJ,EAAOC,EAAMrrB,GAC7C,OAAOmqC,EAAQ9H,eAAe,CAAC9Y,EAAQpnB,QAAS,UAAWonB,KCMhDxtB,GAAM0vC,GACf,CAACxQ,UAfO,6CAeSyQ,gBAZF,4RAY+BC,cAAenX,KAEpDwhC,GAA0B,CACrC1rB,WAAY2rB,MACZzrB,YAAa,QACbC,WAAY1uC,ICnBDm6D,GAAQzqB,GAAgB,CAACxQ,UAFxB,yBAIDk7B,GAA4B,CACvC7rB,WAAY8rB,QACZ5rB,YAAa,QACbC,WAAYyrB,ICCDG,GAAatqB,GAAiB,CACzC9Q,UARkB,sCASlByQ,gBARyB,6GASzB3gC,MAAO,SAGIurD,GAAiC,CAC5ChsB,WAAYisB,aACZ/rB,YAAa,QACbC,WAAY4rB,ICfDG,GAAa/qB,GAAgB,CAACxQ,UAFvB,+BAIPw7B,GAAiC,CAC5CnsB,WAAYosB,aACZlsB,YAAa,QACbC,WAAY+rB,ICEDG,GAAY5qB,GACrB,CAAC9Q,UATc,sCASSyQ,gBARF,4HAQsC3gC,MAAO,SAE1D6rD,GAAgC,CAC3CtsB,WAAYusB,YACZrsB,YAAa,QACbC,WAAYksB,UChBDG,GAKXjqD,YACI6e,EAAkBqrC,EAAgBnkB,EAAcr4C,EAChDy8D,GANJjqD,mBAAgB,CAAC,KACjBA,iBAAwB,GAMtB,MAAMkqD,EAAMF,EACNG,EAAOxrC,EAAO,GAAK,EAOzB,IAAIyrC,EANJpqD,KAAKD,YAAc4e,EAOnB,MAAM0rC,EAAQ,SAASxkB,cAAiBr4C,WAEtC48D,EADW,KAATH,EACY,eAAeI,KACX,IAATJ,EACK,QAAQI,KAER,WAAWA,eAAmBJ,OAG9CjqD,KAAKI,SAAW,0QASI8pD,WAAaA,4EAEDC,+HAKVC,oDC1CbE,GAOXxqD,YACI6e,EAAkBqrC,EAAgBnkB,EAAcr4C,EAChDy8D,GARJjqD,mBAAgB,CAAC,KACjBA,iBAAwB,GAExBA,mBAAe,EACfA,mBAAe,EAKb,MAAMkqD,EAAMF,EACNG,EAAOxrC,EAAO,GAAK,EAOzB,IAAIyrC,EANJpqD,KAAKD,YAAc4e,EAOnB,MAAM0rC,EAAQ,SAASxkB,cAAiBr4C,WAEtC48D,EADW,KAATH,EACY,eAAeI,KACX,IAATJ,EACK,QAAQI,KAER,WAAWA,eAAmBJ,OAG9CjqD,KAAKI,SAAW,iNAQYJ,KAAKD,YAAY,sCACjBC,KAAKD,YAAY,mhBAehBmqD,2ZAWRA,WAAaA,+KAGuBC,wyBAqBnBC,iDCnFnC,MAcMG,GAA0B,CACrChtB,WAAYitB,MACZ/sB,YAAa,QACbC,WAhBGP,IAEK,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3BhxB,EAACA,GAAKuI,GACN+1C,YAACA,EAAW5kB,KAAEA,EAAIr4C,MAAEA,EAAKy8D,KAAEA,GAAQpzC,EAEnCzgB,EAAUxE,QAAMc,QAAQ,4BAC1B,IAAI43D,GAAiBn+C,EAAE9b,MAAOo6D,EAAa5kB,EAAMr4C,EAAOy8D,GACxD,IAAIF,GAAW59C,EAAE9b,MAAOo6D,EAAa5kB,EAAMr4C,EAAOy8D,GACtD,OAAO7sB,EAAQ9M,gBAAgBl6B,EAAS,CAAC+V,GAAIA,EAAEnO,eCd5C0sD,GAUX5qD,YACI4hB,EAAsB+oC,EAAqB5kB,EAAcr4C,EACzDy8D,GAXJjqD,mBAAgB,CAAC,aAAc,cAAe,MAC9CA,iBAAwB,GAWtBA,KAAKD,YAAc2hB,EACnB1hB,KAAKpS,MAAQ8zB,EAAW,GACxB1hB,KAAKyqD,YAAcA,EACnBzqD,KAAK6lC,KAAOA,EACZ7lC,KAAKxS,MAAQA,EACbwS,KAAKiqD,KAAOA,EACZjqD,KAAKI,SAAW,oNAQUJ,KAAKpS,oEACiB68D,iDACXzqD,KAAKpS,oCACpB68D,8FAGYzqD,KAAKpS,4aAelBJ,qBAAyBq4C,oPAOTr4C,+BACfy8D,+KAIgBA,gSCzDnC,MAcMU,GAA8B,CACzCptB,WAAYqtB,UACZntB,YAAa,QACbC,WAjBsBP,IAKtB,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3BhxB,EAACA,EAACQ,EAAEA,EAACmjC,GAAEA,GAAMp7B,GACb+1C,YAACA,EAAW5kB,KAAEA,EAAIr4C,MAAEA,EAAKy8D,KAAEA,GAAQpzC,EAEnCzgB,EAAU,IAAIs0D,GAAev+C,EAAE9b,MAAOo6D,EAAa5kB,EAAMr4C,EAAOy8D,GACtE,OAAO7sB,EAAQ9M,gBAAgBl6B,EAAS,CAAC+V,EAAGQ,EAAGmjC,GAAK3jC,EAAEnO,kBCNxClN,GACZqsC,GAEF,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3BhxB,EAACA,GAAKuI,GACN6vB,iBAACA,EAAgBD,SAAEA,GAAYztB,EAE/BgO,EAAQ1Y,EAAE9b,MAAM+E,OAEhBovC,EAAWj0C,OAAK20B,eAAeqf,EAAkBp4B,EAAE9b,OACzD,IAAIo0C,EAAOD,EACX,MAAME,EAAe73B,eAAa83B,mBAAmBF,EAAM5f,GACrDgmC,EAAuC,MAAhBnmB,EACvB5P,EAAqBsI,EAAQtI,mBAAmB,CAAC3oB,IAEvD,IAAI2+C,EAAW3+C,EACf,GAAI0+C,EAAsB,CACxB,GAAI/1B,EAAoB,CACtB,MACMle,EADWwmB,EAAQpoB,QAAQxV,IAAIsrD,EAAS/6B,QACtBnZ,OAElBxb,EAAqB,IAAIuC,MAAMknB,GACrC,IAAK,IAAIlvB,EAAI,EAAGA,EAAIyF,EAAShG,OAAQO,IACnCyF,EAASzF,GAAKwW,EAAE9b,MAAMq0C,EAAa/uC,IAErC,MAAMo1D,EACFhhC,GAAiBnT,EAAQzK,EAAE9b,MAAO8b,EAAEnO,MAAO0mC,EAActpC,GAE7D0vD,EAAW1tB,EAAQ9H,eAAel6B,EAAU+Q,EAAEnO,OACzBo/B,EAAQpoB,QAAQxV,IAAIsrD,EAAS/6B,QACrCnZ,OAASm0C,OAEtBD,EAAWhhC,GAAc3d,EAAGu4B,EAActH,GAG5CqH,EAAO53B,eAAai4B,iBAAiBL,EAAKrvC,OAAQyvB,GAGpDhY,eAAak4B,2BAA2B,MAAON,EAAM5f,GACrD,MAAOmmC,EAAahsC,GAChBnS,eAAaoS,0BAA0B6rC,EAASz6D,MAAOo0C,GAE3D,IAMI7E,EANAvxB,EAAW28C,EAOf,GANI1mB,IAEFj2B,EAAWxB,eAAao4B,qBAAqB+lB,EAAaxmB,IAIxD1P,EAAoB,CACtB,MACMle,EADWwmB,EAAQpoB,QAAQxV,IAAIsrD,EAAS/6B,QACtBnZ,OAElBme,EACFpN,GAAW/Q,EAAQrmB,OAAKC,cAAcwuB,GAAc3Q,EAAUlC,EAAEnO,OAEpE4hC,EAAMxC,EAAQ9H,eAAejnB,EAAUlC,EAAEnO,OACzBo/B,EAAQpoB,QAAQxV,IAAIogC,EAAI7P,QAChCnZ,OAASme,OAEjB6K,WC9DAzzB,EAAe6S,EAAuB3Q,EACtC+uB,GACF,MAAMnpB,EAAS1jB,OAAKC,cAAcwuB,GAG5BkmB,EACFpD,GAAQ,CAACptB,OAAQ,CAACvI,EAAAA,GAAI0K,MAAO,CAACxmB,MAAO,CAH3BE,OAAKC,cAAc2b,EAAE9b,OACT4jB,EAE2BA,IAAUmpB,QAAAA,IAEzD+H,EAAUniB,GAAOkiB,EAAe/4B,EAAEnO,MAAO,MAAOo/B,GAChD6tB,EACFnpB,GAAQ,CAACptB,OAAQ,CAACvI,EAAGg5B,GAAUtuB,MAAO,CAACxmB,MAAOge,GAAW+uB,QAAAA,IAK7D,OAHAA,EAAQ5M,8BAA8B0U,GACtC9H,EAAQ5M,8BAA8B2U,GAE/B8lB,ED+CCvjC,CAAQojC,EAAU9rC,EAAa3Q,EAAU+uB,GAOjD,OAJIytB,GACFztB,EAAQ5M,8BAA8Bs6B,GAGjClrB,EAGF,MAAMsrB,GAA0B,CACrC3tB,WAAY4tB,MACZ1tB,YAAa,QACbC,WAAY5sC,IE/DDs6D,GAAUpsB,GAAiB,CACtC9Q,UAbc8R,kFAcdrB,gBAVqB,oTAWrBC,cAAehX,KAGJyjC,GAA8B,CACzC9tB,WAAY+tB,UACZ7tB,YAAa,QACbC,WAAY0tB,ICKP,MAAMG,GAA8B,CACzChuB,WAAYiuB,UACZ/tB,YAAa,QACbC,oBA9BsBP,GAKtB,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3BhxB,EAACA,GAAKuI,EACZlX,GAAiB2O,EAAG,WACpB,MAAMwiC,WAACA,EAAU1vC,QAAEA,EAAO9J,IAAEA,EAAGy5C,gBAAEA,GAAmB/3B,EAGpDtmB,OAAKwN,OACD8O,eAAagiC,+BAA+B5vC,EAH9B,IAId,IACI,wEAAeA,wBAEvB,MAAMytC,EAAW7/B,eAAaiiC,kBAC1B3iC,EAAE9b,MAA2Cs+C,EAAY1vC,EAR3C,EASH9J,EAAKy5C,GACpB,GAA6B,IAAzBlC,EAASK,aAA+C,IAA1BL,EAASqC,cACvCx+C,OAAKqL,YAAY8wC,EAASt+B,QAASs+B,EAASr+B,UAC9C,OAAO6uB,GAAS,CAACxoB,OAAQ,CAACvI,EAAAA,GAAIixB,QAAAA,IAEhC,MAAMquB,EAAiB,IAAIhf,GAAcC,EAAU,OAAO,GAC1D,OAAOtP,EAAQ9M,gBAAgBm7B,EAAgB,CAACt/C,GAAIA,EAAEnO,SCTjD,MAAM0tD,GAAgC,CAC3CnuB,WAAYouB,YACZluB,YAAa,QACbC,oBApBwBP,GAKxB,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3BhxB,EAACA,GAAKuI,GACNi6B,WAACA,EAAU1vC,QAAEA,EAAO9J,IAAEA,EAAGg6C,WAAEA,EAAUP,gBAAEA,GAAmB/3B,EAG1D61B,EAAW7/B,eAAauiC,kBAC1BjjC,EAAE9b,MAAmDs+C,EAAY1vC,EAHzB,CAAC,EAAG,EAAG,GAIpC9J,EAAKy5C,EAAiBO,GAC/Bsc,EAAiB,IAAIvd,GAAcxB,EAAU,OAAO,GAC1D,OAAOtP,EAAQ9M,gBAAgBm7B,EAAgB,CAACt/C,GAAIA,EAAEnO,eCf3C4tD,GAKX9rD,YAAY4sC,GAJZ1sC,mBAAgB,CAAC,KAAM,UAKrBA,KAAKD,YAAc2sC,EAASt+B,QAC5B,MAAM4+B,EAAeN,EAASM,aACxBC,EAAcP,EAASO,YACvBC,EAAiBR,EAASQ,eAC1BE,EAAwBV,EAASU,sBACjCC,EAAuBX,EAASW,qBAEhCC,EAASF,EAAwB,EAAIV,EAASa,QAAQC,IACtDC,EAAUJ,EAAuB,EAAIX,EAASa,QAAQ7xB,KAEtDi6B,EAAYvI,EAAwBC,EAAuB,EACjErtC,KAAKI,SAAW,oCACaktC,MAAWG,kdAcZL,uBACdF,uDAC8BF,6CAEZN,EAAS6C,6IAKXlC,+DACgBJ,+CAEZP,EAAS8C,uNAOfmG,2LAIKtI,wMAYxBwe,GAKX/rD,YAAY4sC,GAJZ1sC,mBAAgB,CAAC,KAAM,UAKrBA,KAAKD,YAAc2sC,EAASt+B,QAC5B,MAAM+/B,EAAczB,EAASyB,YACvBnB,EAAeN,EAASM,aACxBC,EAAcP,EAASO,YACvBmB,EAAgB1B,EAAS0B,cACzBlB,EAAiBR,EAASQ,eAC1BC,EAAgBT,EAASS,cACzBkB,EAAuB3B,EAAS2B,qBAChCjB,EAAwBV,EAASU,sBACjCC,EAAuBX,EAASW,qBAEhCiB,EAAWD,EAAuB,EAAI3B,EAASa,QAAQgB,MACvDjB,EAASF,EAAwB,EAAIV,EAASa,QAAQC,IACtDC,EAAUJ,EAAuB,EAAIX,EAASa,QAAQ7xB,KAEtDi6B,EACFtH,EAAuBjB,EAAwBC,EAAuB,EAC1ErtC,KAAKI,SAAW,oCACakuC,MAAahB,MAAWG,wiBAiBzBY,wBACbD,uDAC6BD,6CAEZzB,EAASiD,4IAKXvC,2BACZF,yDAC4BF,+CAEZN,EAAS6C,sKAMXlC,6BACZF,2DAC4BF,iDAEZP,EAAS8C,8OAOfmG,kPAMTvI,OAA2BC,+BAC3BA,qNCrHlB,MAAMye,GAAoC,CAC/CvuB,WAAYwuB,gBACZtuB,YAAa,QACbC,oBA7B4BP,GAK5B,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3B2S,GAACA,EAAEl7B,MAAEA,GAASF,EACdvI,EAAIyI,GACJ+5B,WAACA,EAAU1vC,QAAEA,EAAO9J,IAAEA,EAAGy5C,gBAAEA,GAAmB/3B,EAG9C61B,EAAW7/B,eAAauiC,kBAC1BjjC,EAAE9b,MAAmDs+C,EAAY1vC,EAHzB,CAAC,EAAG,EAAG,GAIpC9J,EAAKy5C,GAEdod,EACF,IAAI9d,GAAcxB,EAAU,OAAO,GACjCuf,EACF7uB,EAAQ9M,gBAAgB07B,EAA2B,CAAC7/C,GAAIA,EAAEnO,OACxDkuD,EAAyB,IAAIL,GAAyBnf,GACtDnlC,EAAS61B,EAAQ9M,gBACnB47B,EAAwB,CAACpc,EAAImc,GAAqB9/C,EAAEnO,OAExD,OADAo/B,EAAQ5M,8BAA8By7B,GAC/B1kD,ICKF,MAAM4kD,GAAkC,CAC7C5uB,WAAY6uB,cACZ3uB,YAAa,QACbC,oBA9B0BP,GAK1B,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3B2S,GAACA,EAAEl7B,MAAEA,EAAKnW,OAAEA,GAAUiW,EACtBvI,EAAIyI,EACVpX,GAAiB,CAACoX,EAAOnW,GAAS,eAClC,MAAMkwC,WAACA,EAAU1vC,QAAEA,EAAO9J,IAAEA,EAAGy5C,gBAAEA,GAAmB/3B,EAE9C61B,EAAW7/B,eAAaiiC,kBAC1B3iC,EAAE9b,MAA2Cs+C,EAAY1vC,EACzD,EAAmB9J,EAAKy5C,GAEtByd,EACF,IAAI5f,GAAcC,EAAU,OAFX,GAGf4f,EACFlvB,EAAQ9M,gBAAgB+7B,EAAyB,CAAClgD,GAAIA,EAAEnO,OAEtDuuD,EAAyB,IAAIX,GAAyBlf,GACtDnlC,EAAS61B,EAAQ9M,gBACnBi8B,EAAwB,CAACzc,EAAIwc,GAAmBngD,EAAEnO,OAEtD,OADAo/B,EAAQ5M,8BAA8B87B,GAC/B/kD,ICvBF,MAAMilD,GAAwC,CACnDjvB,WAAYkvB,oBACZhvB,YAAa,QACbC,WAAY,EAAEhpB,OAAAA,EAAQmC,MAAAA,EAAOumB,QAAAA,MAC3B,MAAMjxB,EAACA,GAAKuI,GACNi6B,WAACA,EAAU1vC,QAAEA,EAAO9J,IAAEA,EAAG23C,oBAAEA,GAC7Bj2B,EACEgoB,EAAezB,EAErB7sC,OAAKwN,OACkB,IAAnBoO,EAAE9b,MAAM+E,QACR,IAAM,uDACF+W,EAAE9b,MAAM+E,YAChB,MAAMkkD,EAA8B,CAAC,EAAG,GACxC/oD,OAAKwN,OACD8O,eAAagiC,+BAA+B5vC,EAASq6C,IACrD,IACI,wEAAer6C,oBAA0Bq6C,OAEjD,MAAM5M,EAAW7/B,eAAaiiC,kBAC1B3iC,EAAE9b,MAA2Cs+C,EAAY1vC,EACzDq6C,EAAWnkD,IAERoS,EAAQmlD,YCxBfvgD,EAAe2gC,EACfJ,EACAtP,GACF,IAAIhnC,EAAU,IAAIq2C,GAAcC,EAAU,OAAO,GACjD,MAAMigB,EAAavvB,EAAQ9M,gBAAgBl6B,EAAS,CAAC+V,GAAI,WAIzD,OAFA/V,EAAU,IAAIq2C,GAAcC,EAAU,OAAO,GAAM,EAAMI,GAElD,CAAC6f,EADYvvB,EAAQ9M,gBAAgBl6B,EAAS,CAAC+V,GAAI,YDkBpDygD,CAAsBzgD,EAAG2gC,EAAqBJ,EAAU7N,GAC5D,MAAO,CAACt3B,EAAQmlD,KEzBb,MAAMG,GAA2B,CACtCtvB,WAAYuvB,OACZrvB,YAAa,QACbC,WAAY,EAAEhpB,OAAAA,EAAQmC,MAAAA,EAAOumB,QAAAA,MAC3B,MAAMjxB,EAACA,GAAKuI,GACN4vB,SAACA,EAAQtf,KAAEA,GAAQnO,EACnBgoB,EAAezB,EAEfvY,EAAQ1Y,EAAE9b,MAAM+E,OAChBovC,EAAWj0C,OAAK20B,eAAeF,EAAM7Y,EAAE9b,OAE7C,IAAIo0C,EAAOD,EACX,MAAME,EAAe73B,eAAa83B,mBAAmBF,EAAM5f,GACrDkoC,EAAwC,MAAhBroB,EACxB5P,EAAqB+J,EAAa/J,mBAAmB,CAAC3oB,IAEtD06B,EAA8B,GAEpC,IAAImmB,EAAY7gD,EAChB,GAAI4gD,EAAuB,CACzB,GAAIj4B,EAAoB,CACtB,MACMle,EADWioB,EAAa7pB,QAAQxV,IAAIwtD,EAAUj9B,QAC5BnZ,OAElBxb,EAAqB,IAAIuC,MAAMknB,GACrC,IAAK,IAAIlvB,EAAI,EAAGA,EAAIyF,EAAShG,OAAQO,IACnCyF,EAASzF,GAAKwW,EAAE9b,MAAMq0C,EAAa/uC,IAErC,MAAMs3D,EACFljC,GAAiBnT,EAAQzK,EAAE9b,MAAO8b,EAAEnO,MAAO0mC,EAActpC,GAE7D4xD,EAAYnuB,EAAavJ,eAAel6B,EAAU+Q,EAAEnO,OAC9B6gC,EAAa7pB,QAAQxV,IAAIwtD,EAAUj9B,QAC3CnZ,OAASq2C,OAEvBD,EAAYljC,GAAc3d,EAAGu4B,EAAc7F,GAG7CgI,EAAcv6B,KAAK0gD,GACnBvoB,EAAO53B,eAAai4B,iBAAiBL,EAAKrvC,OAAQyvB,GAGpDhY,eAAak4B,2BAA2B,MAAON,EAAM5f,GACrD,MAAOqoC,EAAcluC,GACjBnS,eAAaoS,0BAA0B+tC,EAAU38D,MAAOo0C,GAE5D,IAAIp2B,EAAW6+C,EACX5oB,IAEFj2B,EAAWxB,eAAao4B,qBAAqBioB,EAAc1oB,IAG7D,MAAM5E,WCpDNzzB,EAAe6S,EAAuB3Q,EACtC+uB,GACF,MAAMnpB,EAAS1jB,OAAKC,cAAcwuB,GAG5BkmB,EACFpD,GAAQ,CAACptB,OAAQ,CAACvI,EAAAA,GAAI0K,MAAO,CAACxmB,MAAO,CAH3BE,OAAKC,cAAc2b,EAAE9b,OACT4jB,EAE2BA,IAAUmpB,QAAAA,IAEzD+H,EAAUniB,GAAOkiB,EAAe,UAAW,OAAQ9H,GACnD6tB,EACFnpB,GAAQ,CAACptB,OAAQ,CAACvI,EAAGg5B,GAAUtuB,MAAO,CAACxmB,MAAOge,GAAW+uB,QAAAA,IAK7D,OAHAA,EAAQ5M,8BAA8B0U,GACtC9H,EAAQ5M,8BAA8B2U,GAE/B8lB,EDqCOkC,CAASH,EAAWhuC,EAAa3Q,EAAUwwB,GACvD,IAAK,MAAMlpC,KAAKkxC,EACdhI,EAAarO,8BAA8B76B,GAG7C,OAAOiqC,IEZJ,MAAMwtB,GAA0B,CACrC7vB,WAAY8vB,MACZ5vB,YAAa,QACbC,oBA9CEP,GAEF,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3BhxB,EAACA,GAAKuI,GACNsQ,KAACA,EAAIsf,SAAEA,GAAYztB,EAEnBgO,EAAQ1Y,EAAE9b,MAAM+E,OAEhBovC,EAAWj0C,OAAK20B,eAAeF,EAAM7Y,EAAE9b,OAC7C,IAAIo0C,EAAOD,EACX,MAAME,EAAe73B,eAAa83B,mBAAmBF,EAAM5f,GAC3D,IAAI4kB,EAAYt9B,EACI,MAAhBu4B,IACF+E,EAAYjE,GAAU,CAAC9wB,OAAQ,CAACvI,EAAAA,GAAIixB,QAAAA,EAASvmB,MAAO,CAAC+N,KAAM8f,KAC3DD,EAAO53B,eAAai4B,iBAAiBL,EAAKrvC,OAAQ+W,EAAE9b,MAAM+E,SAG5DyX,eAAak4B,2BAA2B,MAAON,EAAM5f,GACrD,MAAOxW,EAAU2Q,GACbnS,eAAaoS,0BAA0BwqB,EAAUp5C,MAAOo0C,GAEtDiF,EACF5H,GAAQ,CAACptB,OAAQ,CAACvI,EAAGs9B,GAAYrM,QAAAA,EAASvmB,MAAO,CAACxmB,MAAO,EAAE,EAFhDE,OAAKC,cAAcwuB,OAG5BmmB,EAAUniB,GAAO0mB,EAAKA,EAAI1rC,MAAO,MAAOo/B,GAE9C,IAAInvB,EACJ,GAAIq2B,EAAU,CAEZr2B,EAAM6zB,GAAQ,CAACptB,OAAQ,CAACvI,EAAGg5B,GAAU/H,QAAAA,EAASvmB,MAAO,CAACxmB,MADrCwc,eAAao4B,qBAAqB52B,EAAUm2B,WAG7Dv2B,EAAM6zB,GAAQ,CAACptB,OAAQ,CAACvI,EAAGg5B,GAAU/H,QAAAA,EAASvmB,MAAO,CAACxmB,MAAOge,KAU/D,OAPA+uB,EAAQ5M,8BAA8BkZ,GACtCtM,EAAQ5M,8BAA8B2U,GAElB,MAAhBT,GACFtH,EAAQ5M,8BAA8BiZ,GAGjCx7B,IC9BIq/C,GAAUtuB,GAAiB,CACtC9Q,UAbc8R,kFAcdrB,gBAVqB,oTAWrBC,cAAe/W,KAGJ0lC,GAA8B,CACzChwB,WAAYiwB,UACZ/vB,YAAa,QACbC,WAAY4vB,UCzBDG,GAKX3tD,YACI6e,EAAkB+uC,EAClBC,GANJ3tD,mBAAgB,CAAC,KAOfA,KAAKD,YAAc2tD,EAASn4D,KACxB,CAACq4D,EAAGj4D,IAAMi4D,EAAE,GAAqBjvC,EAAOhpB,GAAKi4D,EAAE,KACnD,MAAM75C,EAAO4K,EAAOvpB,OACd4I,EAAQ+Q,GAAkBgF,GAE1BsK,EAAQqvC,EAASn4D,KAAIq4D,GAAKA,EAAE,KAAI53D,KAAK,KACrCitB,EAAMyqC,EAASn4D,KAAI,CAACq4D,EAAGj4D,IAAMi4D,EAAE,GAAKjvC,EAAOhpB,KAAIK,KAAK,KACpD63D,EACF,CAAC,YAAa,YAAa,YAAa,aAAah4D,MAAM,EAAGke,GAC5D9B,EAAkB,YAAT07C,EAAqB,EAAI,EAmBxC3tD,KAAKI,SAjBQ,IAAT2T,EAiBY,WACZ/V,aAAiBA,KAASqgB,cAC1BrgB,WAAeA,KAASilB,uCAGtBjlB,4DACoB+V,kGAEmB9B,oGAEIA,uCAG3CjU,oDACe6vD,sBA9BH,yBACAxvC,yBACF4E,8IAKoBhR,qFAEIA,sFCW/B67C,GAOXhuD,YACI6e,EAAkB+uC,EAClBC,GARJ3tD,mBAAgB,CAAC,KACjBA,mBAAe,EACfA,mBAAe,EAObA,KAAKD,YAAc2tD,EAASn4D,KACxB,CAACq4D,EAAGj4D,IAAMi4D,EAAE,GAAqBjvC,EAAOhpB,GAAKi4D,EAAE,KACnD,MAAM75C,EAAO4K,EAAOvpB,OACd4I,EAAQ+Q,GAAkBgF,GAE1BsK,EAAQqvC,EAASn4D,KAAIq4D,GAAKA,EAAE,KAAI53D,KAAK,KACrCitB,EAAMyqC,EAASn4D,KAAI,CAACq4D,EAAGj4D,IAAMi4D,EAAE,GAAKjvC,EAAOhpB,KAAIK,KAAK,KACpD+I,EAASqrB,GAAY,KAAMrW,GAC3BokB,EAAS/N,GAAY,SAAUrW,GAC/Bg6C,EAAS,GAAGhvD,EAAOgV,EAAO,QAAQ/T,KAAKD,YAAYgU,EAAO,KAC1D6W,EACO,IAAT7W,EAAa,SAAW,QAAQokB,EAAOtiC,OAAO,GAAGG,UAC/Cic,EAAkB,YAAT07C,EAAqB,EAAI,EAExC,IAAI7sD,EAAW,GACf,GAAa,IAATiT,EAAY,CACd,MAAMi6C,EAAW,aACbhwD,0FAEgCiU,wFAEIA,kDAIxCnR,EAAW,aACP9C,8BACAgwD,0CAC4B71B,EAAOniC,YAAY40B,gBAC/C7rB,EAAOgV,EAAO,wBACXg6C,mBACDC,4CAC4B71B,EAAOniC,YAAY40B,6BAGhD,CACL,MAAMojC,EAAW,aACbhwD,2BACAA,UAAcA,wCACdA,WAAeA,8CACfA,0GAEmCiU,yDACKA,wCAI5CnR,EAAW,aACP9C,8BACAgwD,0CAC4B71B,EAAOniC,YAAY40B,gBAC/C7rB,EAAOgV,EAAO,wBACXg6C,mBACDC,4CAC4B71B,EAAOniC,YAAY40B,oDAGjD7rB,EAAOgV,EAAO,wBACXhV,EAAOgV,EAAO,QAAQ/T,KAAKD,YAAYgU,EAAO,oBAC/Ci6C,4CAC4B71B,EAAOniC,YAAY40B,kBAC/C7rB,EAAOgV,EAAO,0BACXg6C,qBACDC,8CAC4B71B,EAAOniC,YAAY40B,sCAMzD5qB,KAAKI,SAAW,iBACNpC,aAAiBA,KAASqgB,oBAC1BrgB,WAAeA,KAASilB,uCAG5BjlB,8EAEA8C,gDC5HH,MAiBMmtD,GAAgC,CAC3C1wB,WAAY2wB,YACZzwB,YAAa,QACbC,WAhBiB,EAAEhpB,OAAAA,EAAQ0oB,QAAAA,EAASvmB,MAAAA,MACpC,MAAM1K,EAACA,GAAKuI,GACNg5C,SAACA,EAAQC,KAAEA,GAAQ92C,EAEnBzgB,EAAUxE,QAAMc,QAAQ,+BAC1B,IAAIo7D,GAAuB3hD,EAAE9b,MAAOq9D,EAAUC,GAC9C,IAAIF,GAAiBthD,EAAE9b,MAAOq9D,EAAUC,GAI5C,OAFevwB,EAAQ9M,gBAAgBl6B,EAAS,CAAC+V,GAAIA,EAAEnO,SCF5CmwD,GAAMnvB,GAAiB,CAClC9Q,UAZU,iDAaVyQ,gBAViB,0RAaNyvB,GAA0B,CACrC7wB,WAAY8wB,MACZ5wB,YAAa,QACbC,WAAYywB,UCrBDG,GAMXxuD,YAAY0jB,EAAmB+qC,EAAqBC,GALpDxuD,mBAAgB,CAAC,SAGjBA,oBAAiB,CAAC,CAACoN,KAAM,OAAQM,KAAM,UAGrC1N,KAAKD,YAAc,CAACyjB,EAAWgrC,GAE/BxuD,KAAKI,SAAW,gMAQUmuD,EAAc,sPAUlBA,EAAc,uBCxBxC,MA4BaE,GAAUzvB,GACnB,CAAC9Q,UA7BO,oDA6BSyQ,gBArBF,uTAqB+B3B,kBAAkB,IAEvD0xB,GAA8B,CACzCnxB,WAAYoxB,UACZlxB,YAAa,QACbC,WAAY+wB,ICnCRG,GAAM,gBAECC,GAAM7vB,GAAiB,CAClC9Q,UAAW0gC,GACXjwB,gBAAiBiwB,GACjB3vB,iBAAiB,EACjBL,cAAekwB,KAGJC,GAA0B,CACrCxxB,WAAYyxB,MACZvxB,YAAa,QACbC,WAAYmxB,aCNEI,GAAQ9xB,GAKtB,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3B+xB,OAACA,GAAUx6C,GACXmJ,IAACA,GAAOhH,EAER4tB,EAAOl0C,OAAK20B,eAAe,CAACrH,GAAMqxC,EAAO7+D,OAEzC8+D,EAAWr+D,GAAI,CACnB4jB,OAAQ,CAACvI,EAAG+iD,GACZ9xB,QAAAA,EACAvmB,MAAO,CAAC0tB,iBAAkBE,EAAMH,UAAU,KAGtC8qB,EAAgBviD,eAAao4B,qBAAqBkqB,EAAS9+D,MAAOo0C,GAElE4qB,EACFvtB,GAAQ,CAACptB,OAAQ,CAACvI,EAAGgjD,GAAW/xB,QAAAA,EAASvmB,MAAO,CAACxmB,MAAO++D,KACtD14C,EACFm4C,GAAI,CAACn6C,OAAQ,CAACgC,EAAGw4C,EAAQl+C,EAAGq+C,GAAoBjyB,QAAAA,IAC9CpsB,EAAImG,GAAI,CAACzC,OAAQ,CAACvI,EAAGuK,GAAI0mB,QAAAA,IACzBkyB,EACFl8B,GAAI,CAAC1e,OAAQ,CAACvI,EAAG6E,GAAIosB,QAAAA,EAASvmB,MAAO,CAACmO,KAAMyf,EAAMH,UAAU,KAC1DirB,EACFztB,GAAQ,CAACptB,OAAQ,CAACvI,EAAGmjD,GAASlyB,QAAAA,EAASvmB,MAAO,CAACxmB,MAAO++D,KAEpDnhD,EACFwgD,GAAQ,CAAC/5C,OAAQ,CAACgC,EAAG1F,EAAGA,EAAGu+C,GAAiBnyB,QAAAA,IAShD,OAPAA,EAAQ5M,8BAA8B2+B,GACtC/xB,EAAQ5M,8BAA8B6+B,GACtCjyB,EAAQ5M,8BAA8B9Z,GACtC0mB,EAAQ5M,8BAA8Bxf,GACtCosB,EAAQ5M,8BAA8B8+B,GACtClyB,EAAQ5M,8BAA8B++B,GAE/BthD,EAGF,MAAMuhD,GAA8B,CACzCjyB,WAAYkyB,UACZhyB,YAAa,QACbC,WAAYuxB,ICzBP,MAAMS,GAAkC,CAC7CnyB,WAAYoyB,cACZlyB,YAAa,QACbC,oBA3B0BP,GAK1B,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3B+xB,OAACA,GAAUx6C,GACX85C,WAACA,EAAUoB,KAAEA,EAAIC,WAAEA,GAAch5C,EAEjCi5C,EAAQD,EACVX,EACAD,GACI,CAACv6C,OAAQ,CAACw6C,OAAAA,GAAS9xB,QAAAA,EAASvmB,MAAO,CAACgH,IAAKqxC,EAAO7+D,MAAM+E,OAAS,KACjEouB,EAAYssC,EAAMz/D,MAAM,GACxBk+D,EAAcuB,EAAMz/D,MAAM,GAC1B+F,EAAU,IAAIk4D,GAAmB9qC,EAAW+qC,EAAaC,GACzDxc,EAAe,CAAC,CAAC4d,IACjB3hD,EAAMmvB,EAAQ9M,gBAAgBl6B,EAAS,CAAC05D,GAAQ,QAAS9d,GAI/D,OAHK6d,GACHzyB,EAAQ5M,8BAA8Bs/B,GAEjC7hD,ICtBH8hD,GAAM,aA0BL,MAAMC,GAA0B,CACrCzyB,WAAY0yB,MACZxyB,YAAa,QACbC,oBAzBkBP,GAElB,MAAMzoB,OAACA,EAAM0oB,QAAEA,GAAWD,GACpBhxB,EAACA,GAAKuI,EAEZ,GAAI0oB,EAAQtI,mBAAmB,CAAC3oB,IAAK,CACnC,MAAM4yB,EAAQ3B,EAAQpoB,QAAQxV,IAAI2M,EAAE4jB,SAC7BgF,EAAW35B,GACd4sB,GAAW+W,EAAMnoB,OAAsBzK,EAAE9b,MAAO8b,EAAEnO,OACtD,OAAOo/B,EAAQ9H,eAAel6B,EAAU+Q,EAAEnO,MAAO+2B,GAGnD,IAAI3+B,EAOJ,OALEA,EADExE,QAAMc,QAAQ,+BACN,IAAI27B,GAAqBliB,EAAE9b,MAAO0/D,IAElC,IAAI9hC,GAAe9hB,EAAE9b,MAAO0/D,IAGjC3yB,EAAQ9M,gBAAgBl6B,EAAS,CAAC+V,GAAIA,EAAEnO,SC3B3CkyD,GAA0BzhC,eAAayhC,wBA0BtC,MAAMC,GAA0C,CACrD5yB,WAAY6yB,sBACZ3yB,YAAa,QACbC,oBA1BkCP,GAKlCtwB,eAAaxG,KACT,iGAGJ,MAAMqO,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3Bqf,MAACA,EAAK6T,OAAEA,GAAU37C,GAClB47C,cAACA,EAAaC,aAAEA,EAAYC,eAAEA,GAAkB35C,EAEhD45C,EAAYrzB,EAAQ7M,SAASisB,EAAMzsB,QACnC2gC,EAAatzB,EAAQ7M,SAAS8/B,EAAOtgC,SAErC4gC,gBAACA,GAAmBT,GACtBO,EAAWC,EAAYJ,EAAeC,EAAcC,GAExD,OAAOpzB,EAAQ9H,eACX,CAACq7B,EAAgBv7D,QAAS,QAAS,IAAIgwB,WAAWurC,MCxBlDC,GAA0BniC,eAAamiC,wBAgCtC,MAAMC,GAA0C,CACrDtzB,WAAYuzB,sBACZrzB,YAAa,QACbC,oBA/BkCP,GAKlCtwB,eAAaxG,KACT,iGAGJ,MAAMqO,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3Bqf,MAACA,EAAK6T,OAAEA,GAAU37C,GAClB47C,cAACA,EAAaC,aAAEA,EAAYC,eAAEA,EAAcO,mBAAEA,GAChDl6C,EAEE45C,EAAYrzB,EAAQ7M,SAASisB,EAAMzsB,QACnC2gC,EAAatzB,EAAQ7M,SAAS8/B,EAAOtgC,SAErC4gC,gBAACA,EAAeK,aAAEA,GAAgBJ,GACpCH,EAAWC,EAAYJ,EAAeC,EAAcC,EACpDO,GAEJ,MAAO,CACL3zB,EAAQ9H,eACJ,CAACq7B,EAAgBv7D,QAAS,QAAS,IAAIgwB,WAAWurC,IACtDvzB,EAAQ9H,eAAe,GAAI,QAAS,IAAIlQ,WAAW,CAAC4rC,QC3BlDC,GAA0BxiC,eAAawiC,wBAoCtC,MAAMC,GAA0C,CACrD3zB,WAAY4zB,sBACZ1zB,YAAa,QACbC,oBApCkCP,GAKlCtwB,eAAaxG,KACT,iGAGJ,MAAMqO,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3Bqf,MAACA,EAAK6T,OAAEA,GAAU37C,GAClB47C,cAACA,EAAaC,aAAEA,EAAYC,eAAEA,EAAcY,aAAEA,GAAgBv6C,EAE9D45C,EAAYrzB,EAAQ7M,SAASisB,EAAMzsB,QACnC2gC,EAAatzB,EAAQ7M,SAAS8/B,EAAOtgC,QAErCshC,EAAmBf,EACnBgB,EAAkBf,EAClBgB,EAAoBf,EACpBgB,EAAkBJ,GAElBT,gBAACA,EAAec,eAAEA,GAAkBR,GACtCR,EAAWC,EAAYW,EAAkBC,EACzCC,EAAmBC,GAEvB,MAAO,CACLp0B,EAAQ9H,eACJ,CAACq7B,EAAgBv7D,QAAS,QAAS,IAAIgwB,WAAWurC,IACtDvzB,EAAQ9H,eACJ,CAACm8B,EAAer8D,QAAS,UAAW,IAAIiM,aAAaowD,aChChDC,GAQX5xD,YACI6iB,EAAoB/0B,EAAe+jE,EAAiBC,GARxD5xD,mBAAgB,CAAC,WASfA,KAAKD,YAAc,CAAC4iB,EAAY/0B,GAEhCoS,KAAKI,SAAW,mJAIUwxD,aAAoBD,yECZ3C,MAsBME,GAA6B,CACxCt0B,WAAYu0B,SACZr0B,YAAa,QACbC,WAzBqBP,IAKrB,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3Bld,QAACA,GAAWvL,GACZ9mB,MAACA,EAAK+jE,QAAEA,EAAOC,SAAEA,GAAY/6C,EAE7BuwC,EAAc72D,OAAKC,cAAcyvB,EAAQ5vB,OACzC+F,EAAU,IAAIs7D,GAActK,EAAax5D,EAAO+jE,EAASC,GACzDzmB,EACFrJ,GAAQ,CAACptB,OAAQ,CAACvI,EAAG8T,GAAUmd,QAAAA,EAASvmB,MAAO,CAACxmB,MAAO,CAAC+2D,MACtD7/C,EAAS61B,EAAQ9M,gBAAgBl6B,EAAS,CAAC+0C,GAAWlrB,EAAQjiB,OACpEo/B,EAAQ5M,8BAA8B2a,GAEtC,MACMvL,EAAMkC,GAAQ,CAACptB,OAAQ,CAACvI,EAAG5E,GAAS61B,QAAAA,EAASvmB,MAAO,CAACxmB,MAD1C,IAAI4vB,EAAQ5vB,MAAOzC,MAGpC,OADAwvC,EAAQ5M,8BAA8BjpB,GAC/Bq4B,aChBOmyB,GACZ50B,GACF,MAAMzoB,OAACA,EAAM0oB,QAAEA,GAAWD,GACpBhxB,EAACA,GAAKuI,EAEZ,GAAgB,cAAZvI,EAAEnO,MAAuB,CAC3B,MAAMyjC,EAAW3Q,GAAK,CAACpc,OAAQ,CAACE,MAAOzI,GAAIixB,QAAAA,IACrCqZ,EAAIsb,GAAU,CAACr9C,OAAQ,CAACvI,EAAGs1B,GAAWrE,QAAAA,IACtCsE,EAAW1Q,GAAK,CAACtc,OAAQ,CAACE,MAAOzI,GAAIixB,QAAAA,IACrCznC,EAAIo8D,GAAU,CAACr9C,OAAQ,CAACvI,EAAGu1B,GAAWtE,QAAAA,IAEtC71B,EAASo2B,GAAQ,CAACjpB,OAAQ,CAACoc,KAAM2lB,EAAGzlB,KAAMr7B,GAAIynC,QAAAA,IAOpD,OALAA,EAAQ5M,8BAA8BiR,GACtCrE,EAAQ5M,8BAA8BimB,GACtCrZ,EAAQ5M,8BAA8BkR,GACtCtE,EAAQ5M,8BAA8B76B,GAE/B4R,EAEP,OAAOuZ,GAAK,CACVjK,MAAO,CACLxmB,MAAO8b,EAAE9b,MACT2N,MAAOmO,EAAEnO,MACT8b,MAAmB,WAAZ3N,EAAEnO,MAAqB,GAAK,GAErCo/B,QAAAA,IAKC,MAAM40B,GAAgC,CAC3Cz0B,WAAY00B,YACZx0B,YAAa,QACbC,WAAYq0B,ICLP,MAAMG,GAA+B,CAC1C30B,WAAY40B,WACZ10B,YAAa,QACbC,oBA/Bc00B,EACZj1B,GACF,MAAMzoB,OAACA,EAAM0oB,QAAEA,GAAWD,GACpBhxB,EAACA,GAAKuI,EAEZ,GAAgB,WAAZvI,EAAEnO,MACJ,MAAM,IAAI5P,MAAM,gDACX,GAAgB,cAAZ+d,EAAEnO,MAAuB,CAClC,MAAMyjC,EAAW3Q,GAAK,CAACpc,OAAQ,CAACE,MAAOzI,GAAIixB,QAAAA,IACrCqZ,EAAI2b,EAAS,CAAC19C,OAAQ,CAACvI,EAAGs1B,GAAWrE,QAAAA,IACrCsE,EAAW1Q,GAAK,CAACtc,OAAQ,CAACE,MAAOzI,GAAIixB,QAAAA,IACrCznC,EAAIo8D,GAAU,CAACr9C,OAAQ,CAACvI,EAAGu1B,GAAWtE,QAAAA,IAEtC71B,EAASo2B,GAAQ,CAACjpB,OAAQ,CAACoc,KAAM2lB,EAAGzlB,KAAMr7B,GAAIynC,QAAAA,IAOpD,OALAA,EAAQ5M,8BAA8BiR,GACtCrE,EAAQ5M,8BAA8BimB,GACtCrZ,EAAQ5M,8BAA8BkR,GACtCtE,EAAQ5M,8BAA8B76B,GAE/B4R,EAIP,OAAOuZ,GAAK,CAACjK,MAAO,CAACxmB,MAAO8b,EAAE9b,MAAO2N,MAAOmO,EAAEnO,MAAO8b,MAAO,GAAIsjB,QAAAA,MCW7D,MAAMi1B,GAA2B,CACtC90B,WAAY+0B,OACZ70B,YAAa,QACbC,oBAzCEP,GAEF,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3BnY,KAACA,GAAQnO,EAEf,GAAsB,IAAlBnC,EAAOtf,OACT,OAAOisD,GACH,CAAC3sC,OAAQ,CAACE,MAAOF,EAAO,IAAK0oB,QAAAA,EAASvmB,MAAO,CAACgH,IAAKmH,KAGzD,MAAM30B,EAAQqkB,EAAO,GAAGrkB,MAClB2N,EAAQ0W,EAAO,GAAG1W,MAExB0W,EAAO7W,SAAQC,IACbvN,OAAKgiE,kBACDliE,EAAOyN,EAAEzN,MACT,yDACJE,OAAKwN,OACDC,IAAUF,EAAEE,OACZ,IAAM,6DAGZ,MAAMktC,EAAwC,GAQxC3jC,EAASyvB,GAAO,CAACtiB,OAPCA,EAAOnf,KAAIuI,IACjC,MAAM00D,EACFnR,GAAW,CAAC3sC,OAAQ,CAACE,MAAO9W,GAAIs/B,QAAAA,EAASvmB,MAAO,CAACgH,IAAKmH,KAE1D,OADAkmB,EAAwB5+B,KAAKkmD,GACtBA,KAGuCp1B,QAAAA,EAASvmB,MAAO,CAACmO,KAAAA,KAKjE,OAHAkmB,EAAwBrtC,SACpBC,GAAKs/B,EAAQ5M,8BAA8B1yB,KAExCyJ,UCvCIkrD,GAMX3yD,YACI6e,EAAkB+uC,EAClBgF,GAPJ1yD,mBAAgB,CAAC,KAGjBA,oBAAiB,CAAC,CAACoN,KAAM,QAASM,KAAM,UAKtC1N,KAAKD,YAAc2tD,EAASn4D,KACxB,CAACq4D,EAAGj4D,IAAMi4D,EAAE,GAAqBjvC,EAAOhpB,GAAKi4D,EAAE,KACnD,MAAM75C,EAAO4K,EAAOvpB,OACdsY,EAAOqB,GAAkBgF,GAEzBsK,EAAQqvC,EAASn4D,KAAIq4D,GAAKA,EAAE,KAAI53D,KAAK,KACrCitB,EAAMyqC,EAASn4D,KAAI,CAACq4D,EAAGj4D,IAAMi4D,EAAE,GAAKjvC,EAAOhpB,KAAIK,KAAK,KACpD63D,EACF,CAAC,YAAa,YAAa,YAAa,aAAah4D,MAAM,EAAGke,GAkBlE/T,KAAKI,SAhBQ,IAAT2T,EAgBY,WACZrG,aAAgBA,KAAQ2Q,cACxB3Q,WAAcA,KAAQuV,uCAGpBvV,wKAIEA,sDACemgD,iCAzBL,yBACAxvC,yBACF4E,2PCrBP0vC,GAQX7yD,YACI6e,EAAkB+uC,EAClBgF,GATJ1yD,mBAAgB,CAAC,KACjBA,mBAAe,EACfA,mBAAe,EAGfA,oBAAiB,CAAC,CAACoN,KAAM,QAASM,KAAM,UAKtC1N,KAAKD,YAAc2tD,EAASn4D,KACxB,CAACq4D,EAAGj4D,IAAMi4D,EAAE,GAAqBjvC,EAAOhpB,GAAKi4D,EAAE,KACnD,MAAM75C,EAAO4K,EAAOvpB,OACd4I,EAAQ+Q,GAAkBgF,GAE1BsK,EAAQqvC,EAASn4D,KAAIq4D,GAAKA,EAAE,KAAI53D,KAAK,KACrCitB,EAAMyqC,EAASn4D,KAAI,CAACq4D,EAAGj4D,IAAMi4D,EAAE,GAAKjvC,EAAOhpB,KAAIK,KAAK,KACpD+I,EAASqrB,GAAY,KAAMrW,GAC3BokB,EAAS/N,GAAY,SAAUrW,GAC/Bg6C,EAAS,GAAGhvD,EAAOgV,EAAO,QAAQ/T,KAAKD,YAAYgU,EAAO,KAC1D6W,EACO,IAAT7W,EAAa,SAAW,QAAQokB,EAAOtiC,OAAO,GAAGG,UAE/C48D,EAAiB,CACrB,GAAG50D,oBAAyB,GAAGe,EAAOgV,EAAO,uBACvCg6C,eAEG,IAATh6C,EAAa,GAAK,qCAEfhV,EAAOgV,EAAO,uBACXhV,EAAOgV,EAAO,QAAQ/T,KAAKD,YAAYgU,EAAO,QAC3C,IAATA,EAAa,GAAK,KAAKhV,EAAOgV,EAAO,yBAC7Bg6C,QAGJ8E,EAAuB,IAAT9+C,EAChB,0BACA,6DACJ,IAAIjT,EAAW,GACf,IAAK,IAAInL,EAAI,EAAGomB,EAAa,IAAThI,EAAa,EAAI,EAAGpe,EAAIomB,EAAGpmB,IAC7CmL,GAAY,aACR8xD,EAAej9D,mBACXk9D,0BACKl9D,mDAEPqI,4CACOrI,wBAAwBwiC,EAAOniC,YAAY40B,yBAI1D9pB,GAAsB,IAATiT,EAAa,KAAO,KAEjC/T,KAAKI,SAAW,iBACNpC,aAAiBA,KAASqgB,oBAC1BrgB,WAAeA,KAASilB,uCAG5BjlB,8EAEA8C,gDC1DH,MAAMgyD,GACR31B,IAEK,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3BhxB,EAACA,GAAKuI,GACNg5C,SAACA,EAAQgF,cAAEA,GAAiB77C,EAE5BzgB,EAAUxE,QAAMc,QAAQ,+BAC1B,IAAIigE,GAAiBxmD,EAAE9b,MAAOq9D,EAAUgF,GACxC,IAAID,GAAWtmD,EAAE9b,MAAOq9D,EAAUgF,GAChC1gB,EAAe,CAAC,CAAC0gB,IACvB,OAAOt1B,EAAQ9M,gBAAgBl6B,EAAS,CAAC+V,GAAIA,EAAEnO,MAAOg0C,IAGnD+gB,GAA4B,CACvCx1B,WAAYy1B,QACZv1B,YAAa,QACbC,WAAYo1B,ICYDG,GACTj0B,GAAiB,CAAC9Q,UA/BV,4LA+B0ByQ,gBApBnB,m1BAsBNu0B,GAA0B,CACrC31B,WAAY41B,MACZ11B,YAAa,QACbC,WAAYu1B,ICqBP,MAAMG,GAA2B,CACtC71B,WAAY81B,OACZ51B,YAAa,QACbC,oBAvDEP,GAEF,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3BhxB,EAACA,GAAKuI,GACNsQ,KAACA,EAAIsf,SAAEA,GAAYztB,EAEnBgO,EAAQ1Y,EAAE9b,MAAM+E,OAChB89C,EAAY,GAEZ1O,EAAWj0C,OAAK20B,eAAeF,EAAM7Y,EAAE9b,OAC7C,IAAIo0C,EAAOD,EACX,MAAME,EAAe73B,eAAa83B,mBAAmBF,EAAM5f,GAC3D,IASI5W,EATAw7B,EAAYt9B,EAUhB,GAToB,MAAhBu4B,IACF+E,EAAYjE,GAAU,CAAC9wB,OAAQ,CAACvI,EAAAA,GAAIixB,QAAAA,EAASvmB,MAAO,CAAC+N,KAAM8f,KAC3DD,EAAO53B,eAAai4B,iBAAiBL,EAAKrvC,OAAQyvB,GAClDquB,EAAU5mC,KAAKm9B,IAGjB58B,eAAak4B,2BAA2B,OAAQN,EAAM5f,GAGlDuY,EAAQtI,mBAAmB,CAAC2U,IAAa,CAC3C,MAAMttB,EAAQihB,EAAQpoB,QAAQxV,IAAIiqC,EAAU1Z,QAAQnZ,QAC9C4F,QAACA,EAAOnO,SAAEA,EAAQ6Q,SAAEA,GACtBiJ,GAAYshB,EAAUp5C,MAAOo5C,EAAUzrC,MAAOme,EAAOsoB,GACzDx2B,EAAMmvB,EAAQ9H,eAAejnB,EAAU6Q,EAAU1C,OAC5C,CACL,MAAOnO,EAAU2Q,GACbnS,eAAaoS,0BAA0BwqB,EAAUp5C,MAAOo0C,GACtDxwB,EAAS1jB,OAAKC,cAAcwuB,GAC5B0qB,EAAM5H,GACR,CAACptB,OAAQ,CAACvI,EAAGs9B,GAAYrM,QAAAA,EAASvmB,MAAO,CAACxmB,MAAO,EAAE,EAAG4jB,MAEpDkxB,EAAUniB,GAAO0mB,EADHtE,aAAWj5B,EAAEnO,OACQ,OAAQo/B,GACjDnvB,EAAM6zB,GAAQ,CAACptB,OAAQ,CAACvI,EAAGg5B,GAAU/H,QAAAA,EAASvmB,MAAO,CAACxmB,MAAOge,KAE7D6kC,EAAU5mC,KAAKo9B,GACfwJ,EAAU5mC,KAAK64B,GAGjB,GAAIb,EAAU,CACZ4O,EAAU5mC,KAAK2B,GACf,MAAM7S,EAAWyR,eAAao4B,qBAAqBh3B,EAAI5d,MAAOm0C,GAC9Dv2B,EAAM6zB,GAAQ,CAACptB,OAAQ,CAACvI,EAAG8B,GAAMmvB,QAAAA,EAASvmB,MAAO,CAACxmB,MAAO+K,KAK3D,OAFA83C,EAAUr1C,SAAQC,GAAKs/B,EAAQ5M,8BAA8B1yB,KAEtDmQ,ICtDIqlD,GACRn2B,IACC,MAAMC,QAACA,EAAOvmB,MAAEA,GAASsmB,GACnB9e,MAACA,EAAKC,KAAEA,EAAIC,KAAEA,EAAIvgB,MAAEA,GAAS6Y,EAC7BD,EAASyR,GAAahK,EAAOC,EAAMC,EAAMvgB,GAC/C,OAAOo/B,EAAQ9H,eAAe,CAAC1e,EAAOxhB,QAAS4I,EAAO4Y,IAG/C28C,GAA4B,CACvCh2B,WAAYi2B,QACZ/1B,YAAa,QACbC,WAAY41B,ICXDG,GAAa/0B,GAAgB,CAACxQ,UAFxB,oBAINwlC,GAAiC,CAC5Cn2B,WAAYo2B,aACZl2B,YAAa,QACbC,WAAY+1B,ICUDG,GACTl1B,GAAgB,CAACxQ,UAjBR8R,2DAiByBrB,gBAblB,mRAePk1B,GAA2B,CACtCt2B,WAAYu2B,OACZr2B,YAAa,QACbC,WAAYk2B,ICNDG,GACTr1B,GAAgB,CAACxQ,UAjBP8R,qEAiByBrB,gBAblB,kSAeRq1B,GAA4B,CACvCz2B,WAAY02B,QACZx2B,YAAa,QACbC,WAAYq2B,UCxBDG,GAKXp0D,YACI4hB,EAA8CyyC,EAC9CC,EAAkBC,EAAuBC,GAN7Ct0D,mBAAgB,CAAC,KACjBA,iBAAwB,GAMtB,MAAO8E,EAAOyvD,EAAWC,EAAU5mE,GAAS8zB,EAC5C1hB,KAAKD,YAAc,CAAC+E,EAAOqvD,EAAWC,EAAUxmE,GAEhD,MAAM6mE,EAAoC,CACvCJ,GAAgBF,EAAY,EAAKI,EAAY,EAAIA,EACjDF,GAAgBD,EAAW,EAAKI,EAAW,EAAIA,GAG5CE,EAAqC,CACxCL,GAAgBF,EAAY,EAAKA,EAAY,EAAIA,EACjDE,GAAgBD,EAAW,EAAKA,EAAW,EAAIA,GAGlD,IAAIO,EAEFA,EADEL,EAEE,wEAGgB,8CAGtBt0D,KAAKI,SAAW,yEAERq0D,EAAgB,GAAKC,EAAiB,kBACtCD,EAAgB,GAAKC,EAAiB,8CACXH,QAAgBC,4OASpBG,o0BC3CtBC,GAOX90D,YACI4hB,EAA8CyyC,EAC9CC,EAAkBC,EAAuBC,GAR7Ct0D,mBAAgB,CAAC,KACjBA,mBAAe,EACfA,mBAAe,EACfA,iBAAwB,GAMtB,MAAO8E,EAAOyvD,EAAWC,EAAU5mE,GAAS8zB,EAC5C1hB,KAAKD,YAAc,CAAC+E,EAAOqvD,EAAWC,EAAUxmE,GAEhD,MAAM6mE,EAAoC,CACvCJ,GAAgBF,EAAY,EAAKI,EAAY,EAAIA,EACjDF,GAAgBD,EAAW,EAAKI,EAAW,EAAIA,GAG5CE,EAAqC,CACxCL,GAAgBF,EAAY,EAAKA,EAAY,EAAIA,EACjDE,GAAgBD,EAAW,EAAKA,EAAW,EAAIA,GAGlD,IAAIO,EAEFA,EADEL,EACkB,wEAGA,8CAGtBt0D,KAAKI,SAAW,yEAERq0D,EAAgB,GAAKC,EAAiB,kBACtCD,EAAgB,GAAKC,EAAiB,kBACtCD,EAAgB,GAAKC,EAAiB,8CACXH,QAAgBC,8CAChBA,+aAcJG,oVAQH/mE,EAAQ,4CACDwmE,EAAW,qhECnC3C,MAAMS,GAAqC,CAChDt3B,WAAYu3B,iBACZr3B,YAAa,QACbC,oBAxB6BP,GAK7B,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3B43B,OAACA,GAAUrgD,GACX2/C,aAACA,EAAYC,iBAAEA,EAAgBhkE,KAAEA,GAAQumB,GAExCs9C,EAAWC,GAAY9jE,EAExB8F,EAAUxE,QAAMc,QAAQ,+BAC1B,IAAIkiE,GACAG,EAAO1kE,MAA2C8jE,EAAWC,EAC7DC,EAAcC,GAClB,IAAIJ,GACAa,EAAO1kE,MAA2C8jE,EAAWC,EAC7DC,EAAcC,GACtB,OAAOl3B,EAAQ9M,gBAAgBl6B,EAAS,CAAC2+D,GAAS,mBCtBvCC,GAKXl1D,YACIm1D,EACAvzC,EAA8C2yC,GANlDr0D,mBAAgB,CAAC,MACjBA,iBAAwB,GAMtBA,KAAKD,YAAc2hB,EACnB,OAASwzC,EAASC,GAAYzzC,IACrB0zC,EAASC,GAAUJ,EAMtBK,EAAmC,CACtCjB,GAAgBe,EAAU,EAAKF,EAAU,EAAIA,EAC7Cb,GAAgBgB,EAAS,EAAKF,EAAS,EAAIA,GAGxCI,EAAmC,CACtClB,GAAgBe,EAAU,EAAKA,EAAU,EAAIA,EAC7Cf,GAAgBgB,EAAS,EAAKA,EAAS,EAAIA,GAGxCrZ,EAAcsZ,EAAe,GAAKC,EAAe,GACjDpZ,EAAamZ,EAAe,GAAKC,EAAe,GAEhDC,EAAiB,EAAIxZ,EACrByZ,EAAgB,EAAItZ,EAIpBuZ,EAAyC,EAA5BhlE,KAAKC,KAAK6kE,GAAuB,EAC9CG,EAAuC,EAA3BjlE,KAAKC,KAAK8kE,GAAsB,EAElDz1D,KAAKI,SAAW,mQAUsB47C,+CACDG,qDAEIqZ,kDACDC,4CAERC,yCACDC,+iBAcDP,4QAQEC,0MAMkBH,EAAU,6QAMXC,EAAS,i9BCrEvD,MAAMS,GAAyC,CACpDr4B,WAAYs4B,qBACZp4B,YAAa,QACbC,oBAnBiCP,GAKjC,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3B43B,OAACA,EAAMjlB,GAAEA,GAAMp7B,GACf2/C,aAACA,GAAgBx9C,EAEjBzgB,EAAU,IAAI4+D,GAChBllB,EAAGz/C,MACH0kE,EAAO1kE,MAA2CgkE,GAEtD,OAAOj3B,EAAQ9M,gBAAgBl6B,EAAS,CAAC05C,GAAKA,EAAG9xC,eChBtC83D,GAKXh2D,YACI4hB,EAA8CyyC,EAC9CC,EAAkBC,EAAuBC,GAN7Ct0D,mBAAgB,CAAC,KACjBA,iBAAwB,GAMtB,MAAO8E,EAAOyvD,EAAWC,EAAU5mE,GAAS8zB,EAC5C1hB,KAAKD,YAAc,CAAC+E,EAAOqvD,EAAWC,EAAUxmE,GAEhD,MAAM6mE,EAAoC,CACvCJ,GAAgBF,EAAY,EAAKI,EAAY,EAAIA,EACjDF,GAAgBD,EAAW,EAAKI,EAAW,EAAIA,GAG5CE,EAAqC,CACxCL,GAAgBF,EAAY,EAAKA,EAAY,EAAIA,EACjDE,GAAgBD,EAAW,EAAKA,EAAW,EAAIA,GAI5C2B,EAAY1B,EAAe,MAAQ,MAEzC,IAAIM,EAEFA,EADEL,EAEE,4EAGgB,8CAEtBt0D,KAAKI,SAAW,yEAERq0D,EAAgB,GAAKC,EAAiB,kBACtCD,EAAgB,GAAKC,EAAiB,8CACXH,QAAgBC,4OASpBG,6KAI2BoB,0ICjDjDC,GAOXl2D,YACI4hB,EAA8CyyC,EAC9CC,EAAkBC,EAAuBC,GAR7Ct0D,mBAAgB,CAAC,KACjBA,mBAAe,EACfA,mBAAe,EACfA,iBAAwB,GAMtB,MAAO8E,EAAOyvD,EAAWC,EAAU5mE,GAAS8zB,EAC5C1hB,KAAKD,YAAc,CAAC+E,EAAOqvD,EAAWC,EAAUxmE,GAEhD,MAAM6mE,EAAoC,CACvCJ,GAAgBF,EAAY,EAAKI,EAAY,EAAIA,EACjDF,GAAgBD,EAAW,EAAKI,EAAW,EAAIA,GAG5CE,EAAqC,CACxCL,GAAgBF,EAAY,EAAKA,EAAY,EAAIA,EACjDE,GAAgBD,EAAW,EAAKA,EAAW,EAAIA,GAI5C2B,EAAY1B,EAAe,MAAQ,MACzC,IAAIM,EAEFA,EADEL,EACkB,4EAGA,8CAGtBt0D,KAAKI,SAAW,yEAERq0D,EAAgB,GAAKC,EAAiB,kBACtCD,EAAgB,GAAKC,EAAiB,kBACtCD,EAAgB,GAAKC,EAAiB,8CACXH,QAAgBC,8CAChBA,+aAcJG,6KAI2BoB,2HAG9BnoE,EAAQ,4CACDwmE,EAAW,yeCpC3C,MAAM6B,GAA4C,CACvD14B,WAAY24B,wBACZz4B,YAAa,QACbC,oBAxBoCP,GAKpC,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3B43B,OAACA,GAAUrgD,GACX2/C,aAACA,EAAYC,iBAAEA,EAAgBhkE,KAAEA,GAAQumB,GAExCs9C,EAAWC,GAAY9jE,EAExB8F,EAAUxE,QAAMc,QAAQ,+BAC1B,IAAIsjE,GACAjB,EAAO1kE,MAA2C8jE,EAAWC,EAC7DC,EAAcC,GAClB,IAAIwB,GACAf,EAAO1kE,MAA2C8jE,EAAWC,EAC7DC,EAAcC,GACtB,OAAOl3B,EAAQ9M,gBAAgBl6B,EAAS,CAAC2+D,GAASA,EAAO/2D,eCtB9Cm4D,GAKXr2D,YACIm1D,EACAvzC,EAA8C2yC,GANlDr0D,mBAAgB,CAAC,MACjBA,iBAAwB,GAMtBA,KAAKD,YAAc2hB,EACnB,OAASwzC,EAASC,GAAYzzC,IACrB0zC,EAASC,GAAUJ,EAMtBK,EAAmC,CACtCjB,GAAgBe,EAAU,EAAKF,EAAU,EAAIA,EAC7Cb,GAAgBgB,EAAS,EAAKF,EAAS,EAAIA,GAGxCI,EAAmC,CACtClB,GAAgBe,EAAU,EAAKA,EAAU,EAAIA,EAC7Cf,GAAgBgB,EAAS,EAAKA,EAAS,EAAIA,GAGxCrZ,EAAcsZ,EAAe,GAAKC,EAAe,GACjDpZ,EAAamZ,EAAe,GAAKC,EAAe,GAEhDC,EAAiB,EAAIxZ,EACrByZ,EAAgB,EAAItZ,EAIpBuZ,EAAyC,EAA5BhlE,KAAKC,KAAK6kE,GAAuB,EAC9CG,EAAuC,EAA3BjlE,KAAKC,KAAK8kE,GAAsB,EAElDz1D,KAAKI,SAAW,mQAUsB47C,+CACDG,qDAEIqZ,kDACDC,4CAERC,yCACDC,6jBAcDP,4QAQEC,0GAKdC,EAAe,8CACCC,EAAe,qEAG7BD,EAAe,gDACCC,EAAe,mFAG3BL,6BACVb,iLAIUc,6BACVd,uVC7EX,MAAM+B,GAAgD,CAC3D74B,WAAY84B,4BACZ54B,YAAa,QACbC,oBAlBwCP,GAKxC,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3B43B,OAACA,EAAMjlB,GAAEA,GAAMp7B,GACf2/C,aAACA,GAAgBx9C,EAEjBzgB,EAAU,IAAI+/D,GAChBrmB,EAAGz/C,MACH0kE,EAAO1kE,MAA2CgkE,GACtD,OAAOj3B,EAAQ9M,gBAAgBl6B,EAAS,CAAC05C,GAAKA,EAAG9xC,eCdtCs4D,GAKXx2D,YAAY6e,EAAkBqG,GAJ9BhlB,mBAAgB,CAAC,KAKf,MAAM+T,EAAO4K,EAAOvpB,OACpB,GAAI2e,EAAO,EACT,MAAM,IAAI3lB,MACN,kCAAkC2lB,iCAIxC,GAFA/T,KAAKD,YAAc4e,EAEN,IAAT5K,EAOF,YANA/T,KAAKI,SAAW,+FAGKue,EAAO,wCAK9B,MAMM43C,EAAW53C,EAAOppB,KAAI,CAAC8J,EAAG1J,IANb,CAACA,IACO,IAArBqvB,EAAKzV,QAAQ5Z,IAA2B,IAAdgpB,EAAOhpB,GAC5B,GAAGgpB,EAAOhpB,eAAeA,SAE3B,UAAUA,KAEmB6gE,CAAW7gE,KAAIK,KAAK,KACpD0X,EAAOqB,GAAkBgF,GAE/B/T,KAAKI,SAAW,kCAEVsN,yDACe6oD,6BCjCZE,GAOX32D,YAAY6e,EAAkBqG,GAN9BhlB,mBAAgB,CAAC,KAGjBA,mBAAe,EACfA,mBAAe,EAGb,MAAM+T,EAAO4K,EAAOvpB,OACpB,GAAI2e,EAAO,EACT,MAAM,IAAI3lB,MACN,kCAAkC2lB,iCAExC/T,KAAKD,YAAc4e,EACnB,MAAM2L,EAAWF,GAAY,KAAMrW,GAC7BqwB,EACF,GAAG9Z,EAASvW,EAAO,YAAY/T,KAAKD,YAAYgU,EAAO,KACrD2iD,EAAU,GAAGpsC,EAASvW,EAAO,YAAY/T,KAAKD,YAAYgU,EAAO,KACjErG,EAAOqB,GAAkBgF,GAuD/B,SAAS09B,EAAWnnB,GAClB,MAAMqsC,EAAgBh4C,EAAOppB,KAAI,CAAC8J,EAAG1J,IAMvC,SAAoBA,EAAWihE,GAC7B,OAAyB,IAArB5xC,EAAKzV,QAAQ5Z,IAA2B,IAAdgpB,EAAOhpB,GAC5B,GAAGgpB,EAAOhpB,QAAQihE,EAAUjhE,SAE5B,GAAGihE,EAAUjhE,KAVqB6gE,CAAW7gE,EAAG20B,KAGzD,MAAO,mBAFUqsC,EAAc3gE,KAAK,eAClB2gE,EAAc9gE,OAAO,GAAGG,KAAK,SAxD/CgK,KAAKI,SADM,IAAT2T,EACc,0IAIiB4K,EAAO,8BAChCA,EAAO,+BACNylB,iDAC4BzlB,EAAO,yCAChCA,EAAO,qFAMH,sCAEVjR,sFAiBR,SAAc4c,GACZ,OAAOmnB,EAAWnnB,GAhBDusC,CAAKvsC,EAASz0B,2BACtBuuC,+BAkBX,SAAc9Z,GAEZ,OADAA,EAASvW,EAAO,GAAK,IAAMuW,EAASvW,EAAO,GAAK,QACzC09B,EAAWnnB,GAnBCwsC,CAAKxsC,EAASz0B,wCAExB6gE,gCAoBX,SAAcpsC,GAEZ,OADAA,EAASvW,EAAO,GAAK,IAAMuW,EAASvW,EAAO,GAAK,QACzC09B,EAAWnnB,GArBCysC,CAAKzsC,EAASz0B,6BACtBuuC,kCAuBb,SAAc9Z,GAGZ,OAFAA,EAASvW,EAAO,GAAK,IAAMuW,EAASvW,EAAO,GAAK,QAChDuW,EAASvW,EAAO,GAAK,IAAMuW,EAASvW,EAAO,GAAK,QACzC09B,EAAWnnB,GAzBG0sC,CAAK1sC,EAASz0B,wFClBlC,MAAMohE,GAA8B,CACzC15B,WAAY25B,UACZz5B,YAAa,QACbC,oBA1BsBP,GAKtB,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3BhxB,EAACA,GAAKuI,GACN8V,KAACA,GAAQ3T,EAETgO,EAAQ1Y,EAAE9b,MAAM+E,OAEhB+hE,EAAQ5mE,OAAK20B,eAAesF,EAAMre,EAAE9b,OAC1C,GAAc,IAAVw0B,EACF,OAAOqY,GAAS,CAACxoB,OAAQ,CAACvI,EAAAA,GAAIixB,QAAAA,IAGhC,MAAMhnC,EAAUxE,QAAMc,QAAQ,+BAC1B,IAAI+jE,GAAqBtqD,EAAE9b,MAAO8mE,GAClC,IAAIb,GAAenqD,EAAE9b,MAAO8mE,GAEhC,OAAO/5B,EAAQ9M,gBAAgBl6B,EAAS,CAAC+V,GAAIA,EAAEnO,eCzBpCo5D,GAKXt3D,YACIo7C,EACAmc,GANJr3D,mBAAgB,CAAC,SACjBA,iBAAwB,GAExBA,oBAAiB,CAAC,CAACoN,KAAM,SAAUM,KAAM,SAIvC,MAAM6tC,EAAcL,EAAW,GACzBM,EAAaN,EAAW,GAC9Bl7C,KAAKD,YAAcm7C,EAEnB,IAAIoc,EAAc,GAEhBA,EADuB,iBAAdD,EACK,uBAAuBA,EAAU76B,QAAQ,MAEzC,8BACO66B,EAAUrhE,KAAK,uDAItCgK,KAAKI,SAAW,mfAWRk3D,2CAC2B9b,gCAC/BD,oJC/BD,MAAMgc,GAAuC,CAClDh6B,WAAYi6B,mBACZ/5B,YAAa,QACbC,WAAY,EAAEhpB,OAAAA,EAAQmC,MAAAA,EAAOumB,QAAAA,MAC3B,MAAMmf,MAACA,GAAS7nC,GACV+iD,QAACA,EAAOJ,UAAEA,EAASK,OAAEA,GAAU7gD,EAC/BgoB,EAAezB,EAEfhnC,EAAU,IAAIghE,GAAe7a,EAAmBlsD,MAAOgnE,IACtDM,EAASC,GACZ/qD,eAAagrD,eAAeH,EAAQnb,EAAMlsD,MAAM,GAAIksD,EAAMlsD,MAAM,IAC9D2hD,EACF,CAAC,CAAC2lB,EAASC,EAASlnE,KAAKonE,IAAIL,GAAU/mE,KAAKgqD,IAAI+c,KAGpD,OAFe54B,EAAavO,gBACxBl6B,EAAS,CAACmmD,GAAQA,EAAMv+C,MAAOg0C,KCA1B5kB,GAAQsR,GAAgB,CAACxQ,UAjBxB,mWAmBD6pC,GAA4B,CACvCx6B,WAAYy6B,QACZv6B,YAAa,QACbC,WAAYtQ,ICnBD6qC,GACTv5B,GAAgB,CAACxQ,UAHP,yBAGyB0Q,cAAetW,KAEzC4vC,GAA4B,CACvC36B,WAAY46B,QACZ16B,YAAa,QACbC,WAAYu6B,UCTDG,GAKXt4D,YACIu4D,EAAoBlS,EAAkBmS,EACtCC,EAAqBt5D,EAAmB5O,EACxCmoE,GAAmB,GAPvBx4D,mBAAgB,CAAC,UAAW,UAAW,gBAQrCA,KAAKD,YAAc1P,EACnB,MAAM+1D,EAAcr3C,GAAkB9P,EAAQ7J,QACxC4I,EAAQ+Q,GAAkB1e,EAAM+E,QACtC,IAAIqjE,EAAgB,GACA,IAAhBH,EACFG,EAAgB,IACS,IAAhBH,IACTG,EAAgB,QAElB,MAAMC,EAAiB,cAAcD,KAErC,IAAIE,EAAgB,GACA,IAAhBJ,EACFI,EAAgB,IACS,IAAhBJ,IACTI,EAAgB,gBAElB,MAAMC,EAAiB,cAAcD,KAE/BtS,EAAeF,EAAW,EAAI,aAAe,UACnDnmD,KAAKI,SAAW,aACVgmD,eAAyBA,KAAennD,2CAGtCjB,2HAGoBq6D,mFAEElS,8CACAuS,gDACQrS,2FAGnBuS,mJCChB,MAAMC,GAAgC,CAC3Ct7B,WAAYu7B,YACZr7B,YAAa,QACbC,oBA5CwBP,GAKxB,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3Bld,QAACA,EAAO84C,QAAEA,GAAWrkD,GACrBrkB,MAACA,GAASwmB,GAEV2G,UAACA,EAASw7C,WAAEA,EAAUv7C,UAAEA,EAASxe,QAAEA,EAAOkjB,WAAEA,GAC9CtV,eAAaosD,gBAAgBF,EAAS94C,EAAS5vB,GAE7C6oE,EAAe,CAAC/2C,EAAa1E,EAAWA,GAE9C,GAAmB,IAAf0E,EACF,OAAOib,EAAQ9H,eAAejlC,EAAO4vB,EAAQjiB,OAG/C,MAAM0oD,EAAiB5kB,GACnB,CAACptB,OAAQ,CAACvI,EAAG8T,GAAUmd,QAAAA,EAASvmB,MAAO,CAACxmB,MAAO,CAAC2oE,EAAYx7C,MAC1DmpC,EAAW7kB,GACb,CAACptB,OAAQ,CAACvI,EAAG4sD,GAAU37B,QAAAA,EAASvmB,MAAO,CAACxmB,MAAO,CAAC2oE,EAAYv7C,MAE1D6C,EAAe8c,EAAQ9H,eACzB,GAAI,UAAW,IAAIj0B,aAAa,CAAC,KAC/BjL,EAAU,IAAIgiE,GAChBY,EAAYx7C,EAAWkpC,EAAer2D,MAAM+E,OAAQuxD,EAASt2D,MAAM+E,OACnE6J,EAASi6D,GACPjrD,EAAMmvB,EAAQ9M,gBAChBl6B,EAAS,CAACuwD,EAAUD,EAAgBpmC,GAAeqmC,EAAS3oD,OAE1DmtC,EAAWrJ,GAAQ,CAACptB,OAAQ,CAACvI,EAAG8B,GAAMmvB,QAAAA,EAASvmB,MAAO,CAACxmB,MAAAA,KAO7D,OALA+sC,EAAQ5M,8BAA8Bk2B,GACtCtpB,EAAQ5M,8BAA8Bm2B,GACtCvpB,EAAQ5M,8BAA8BviB,GACtCmvB,EAAQ5M,8BAA8BlQ,GAE/B6qB,UCzCIguB,GAKXr5D,YAAYs5D,EAAe/oE,EAAiB0jB,GAG1C,IAAIslD,EACAC,EACJ,GATFt5D,mBAAgB,CAAC,IAAK,IAAK,KAKzBA,KAAKD,YAAc1P,EAIf0jB,EAAO,EACT,MAAM3lB,MAAM,kBAAkB2lB,0BAGhC,GAAa,IAATA,EACFulD,EAAW,QACXD,EAAU,YACL,CACL,MAAMvS,EAAgB,CAAC,UAAW,UAAW,UAAW,WAClDyS,EAAa,GACbC,EAAc,GACpB,IAAK,IAAI7jE,EAAI,EAAGA,EAAItF,EAAM+E,OAAQO,IAChC6jE,EAAYltD,KAAK,GAAGw6C,EAAcnxD,MAC9BA,EAAIyjE,GACNG,EAAWjtD,KAAK,GAAGw6C,EAAcnxD,MAGrC0jE,EAAUE,EAAWvjE,OACrBsjE,EAAWE,EAAYxjE,OAGzB,MAAMgI,EAAQ+Q,GAAkBgF,GAEhC/T,KAAKI,SAAW,kCAEVpC,2DACkBq7D,6DAEDC,oDAEAA,kCC3BpB,MAAMG,GAA6B,CACxCl8B,WAAYm8B,SACZj8B,YAAa,QACbC,oBAdqBP,GAErB,MAAMzoB,OAACA,EAAM0oB,QAAEA,GAAWD,GACpB3I,UAACA,EAAS12B,EAAEA,EAACpB,EAAEA,GAAKgY,EAEpBte,EACF,IAAI+iE,GAAc3kC,EAAUnkC,MAAM+E,OAAQ0I,EAAEzN,MAAOyN,EAAEzN,MAAM+E,QAC/D,OAAOgoC,EAAQ9M,gBACXl6B,EAAS,CAACo+B,EAAW12B,EAAGpB,GAAIyiB,aAAWrhB,EAAEE,MAAOtB,EAAEsB,UCD3C27D,GAAOj7B,GAAgB,CAACxQ,UARxB,6IAGUrhB,eAAa+sD,qCAClB/sD,eAAagtD,kFAMlBC,GAA2B,CACtCv8B,WAAYw8B,OACZt8B,YAAa,QACbC,WAAYi8B,ICZDK,GAAUt7B,GAAgB,CAACxQ,UAFxB,wCAIH+rC,GAA8B,CACzC18B,WAAY28B,UACZz8B,YAAa,QACbC,WAAYs8B,ICADl+C,GAAO4iB,GAAgB,CAACxQ,UALxB,2DAOAisC,GAA2B,CACtC58B,WAAY68B,OACZ38B,YAAa,QACbC,WAAY5hB,ICPDg8C,GAAMp5B,GAAgB,CAACxQ,UAJxBysB,gDAMC0f,GAA0B,CACrC98B,WAAY+8B,MACZ78B,YAAa,QACbC,WAAYo6B,ICLDyC,GAAO77B,GAAgB,CAACxQ,UALxB,iEAOAssC,GAA2B,CACtCj9B,WAAYk9B,OACZh9B,YAAa,QACbC,WAAY68B,ICYDG,GAAWh8B,GAAgB,CAACxQ,UAtBxB,4WAwBJysC,GAA+B,CAC1Cp9B,WAAYq9B,WACZn9B,YAAa,QACbC,WAAYg9B,ICsCDG,GAAqC,CAChDt9B,WAAYu9B,iBACZr9B,YAAa,QACbC,WA/D6BP,IAK7B,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3BhxB,EAACA,GAAKuI,GACN89B,WAACA,EAAUkb,SAAEA,GAAY72C,EAE/BtmB,OAAKwN,OACDoO,EAAE9b,MAAM+E,QAAU,GAClB,IAAM,yEAGV,MAAMgqB,EAAOozB,EAAWxvB,QAAO,CAACtM,EAAG1F,IAAM0F,EAAI1F,IAEvC+pD,EAA4C,CAAC,CAAC,EAAG,IACvDA,EAAiBzuD,QAAQohD,GACzB,IAAK,IAAI/3D,EAAI,EAAI68C,EAAWp9C,OAAQO,EAAIwW,EAAE9b,MAAM+E,SAAUO,EACxDolE,EAAiBzuD,KAAK,CAAC,EAAG,IAG5B,MAAM4mC,EAAY,GAEZ8nB,EAAUlI,GAAM,CACpBp+C,OAAQ,CAACvI,EAAAA,GACTixB,QAAAA,EACAvmB,MAAO,CAAC62C,SAAUqN,EAAkBrI,cAAe,KAG/CuI,EACFpuD,eAAa6lC,YAAYsoB,EAAQ3qE,MAAOmiD,EAAYpzB,GAAM,GAExD87C,EAAoCruD,eAAa+lC,YACnDqoB,EAAoB7lE,OAAQo9C,EAAWp9C,QAAQ,GAE7C8jE,EACFrsD,eAAaimC,oBAAoBkoB,EAAQ3qE,MAAOmiD,EAAYpzB,GAAM,GAEhE+7C,EAAkBr5B,GACpB,CAACptB,OAAQ,CAACvI,EAAG6uD,GAAU59B,QAAAA,EAASvmB,MAAO,CAACxmB,MAAO4qE,KAE7CG,EAAW51B,GAAU,CACzB9wB,OAAQ,CAACvI,EAAGgvD,GACZ/9B,QAAAA,EACAvmB,MAAO,CAAC+N,KAAMs2C,KAGV3zD,EACFu6B,GAAQ,CAACptB,OAAQ,CAACvI,EAAGivD,GAAWh+B,QAAAA,EAASvmB,MAAO,CAACxmB,MAAO6oE,KAQ5D,OANAhmB,EAAU5mC,KAAK0uD,GACf9nB,EAAU5mC,KAAK6uD,GACfjoB,EAAU5mC,KAAK8uD,GAEfloB,EAAUr1C,SAAQC,GAAKs/B,EAAQ5M,8BAA8B1yB,KAEtDyJ,ICZF,MAAM8zD,GAA0C,CACrD99B,WAAY+9B,sBACZ79B,YAAa,QACbC,oBAnDkCP,GAIlC,MAAMzoB,OAACA,EAAM0oB,QAAEA,GAAWD,GACpBld,QAACA,EAAOrJ,OAAEA,EAAMyJ,WAAEA,EAAUC,aAAEA,GAAgB5L,EACpD,GAAgC,IAA5B2L,EAAWhwB,MAAM+E,OACnB,MAAM,IAAIhH,MAAM,gDACTiyB,EAAWhwB,SAEpB,GAA6B,IAAzB4vB,EAAQ5vB,MAAM+E,OAChB,MAAM,IAAIhH,MAAM,4CACT6xB,EAAQ5vB,SAEjB,GAA4B,IAAxBumB,EAAOvmB,MAAM+E,OACf,MAAM,IAAIhH,MAAM,2CACTwoB,EAAOvmB,SAEhB,GAAkC,IAA9BiwB,EAAajwB,MAAM+E,OACrB,MAAM,IAAIhH,MAAM,iDACVkyB,EAAajwB,SAGrB,MAAMkrE,EAAWn+B,EAAQ7M,SAAStQ,EAAQ8P,QACpCyrC,EAAUp+B,EAAQ7M,SAAS3Z,EAAOmZ,QAClC0rC,EAAcr+B,EAAQ7M,SAASlQ,EAAW0P,QAC1C2rC,EACFt+B,EAAQ7M,SAASjQ,EAAayP,QAAQ,IAEnC9O,EAAe06C,EAAoBz6C,EACnCT,EAAmBC,GACtBkI,GACI2yC,EAAUt7C,EAAQ5vB,MAAO4vB,EAAQjiB,MAAOw9D,EAAS5kD,EAAO5Y,MACxDy9D,EAAaC,GACrB,MAAO,CACLt+B,EAAQ9H,eAAeqmC,EAAoB17C,EAAQjiB,MAAOijB,GAC1Dmc,EAAQ9H,eACJ,CAACqmC,EAAmB,IAAK/kD,EAAO5Y,MAAOkjB,GAC3Ckc,EAAQ9H,eACJ,CAAC7U,EAAkBrrB,QAAS,OAC5B,IAAIwO,WACA6c,EAAkBlrB,KAAKukB,GAAmB2E,OAAO3E,OACzDsjB,EAAQ9H,eACJ,CAAC5U,EAAgBtrB,QAAS6qB,EAAQjiB,MAClC,IAAIonB,WAAW1E,OCThB,MAAMk7C,GAAoC,CAC/Cr+B,WAAYs+B,gBACZp+B,YAAa,QACbC,oBArCEP,GAEF,MAAMzoB,OAACA,EAAM0oB,QAAEA,GAAWD,GACpB5b,aAACA,EAAYG,WAAEA,EAAUtmB,SAAEA,GAAYsZ,EAC7C,GAAkC,IAA9B6M,EAAalxB,MAAM+E,OACrB,MAAM,IAAIhH,MAAM,uDACZmzB,EAAalxB,SAEnB,GAAgC,IAA5BqxB,EAAWrxB,MAAM+E,OACnB,MAAM,IAAIhH,MAAM,qDACZszB,EAAWrxB,SAGjB,GAA8B,IAA1B+K,EAAS/K,MAAM+E,OACjB,MAAM,IAAIhH,MACN,sDAAsDgN,EAAS/K,SAGrE,MAAMyrE,EACFn+D,MAAMo+D,KAAK3+B,EAAQ7M,SAAS7O,EAAWqO,SACrCisC,EAAgB5+B,EAAQ7M,SAAShP,EAAawO,QAC9CpO,EACFhkB,MAAMo+D,KAAK3+B,EAAQ7M,SAASn1B,EAAS20B,UAElCxN,EAAYrC,EAAcngB,GAAe+oB,GAC5CkzC,EAAez6C,EAAalxB,MAAOkxB,EAAavjB,MAAO89D,EACvDn6C,GACJ,MAAO,CACLyb,EAAQ9H,eAAepV,EAAcqB,EAAavjB,MAAOukB,GACzD6a,EAAQ9H,eACJ,CAACv1B,EAAY3K,QAASgG,EAAS4C,MAAO,IAAIonB,WAAWrlB,OCJtD,MAAMk8D,GAAwC,CACnD1+B,WAAY2+B,oBACZz+B,YAAa,QACbC,oBA7BEP,GAEF,MAAMzoB,OAACA,EAAM0oB,QAAEA,GAAWD,GACpBxmC,KAACA,EAAIspB,QAAEA,EAAOwC,WAAEA,GAAc/N,EACpC,GAAI/d,EAAKtG,MAAM+E,OAAS,EACtB,MAAM,IAAIhH,MACN,6DAEN,GAA6B,IAAzB6xB,EAAQ5vB,MAAM+E,OAChB,MAAM,IAAIhH,MAAM,gEACJ6xB,EAAQ5vB,SAEtB,GAAgC,IAA5BoyB,EAAWpyB,MAAM+E,OACnB,MAAM,IAAIhH,MAAM,oEACJq0B,EAAWpyB,SAGzB,MAAM8rE,EAAQ/+B,EAAQ7M,SAAS55B,EAAKo5B,QAC9BwrC,EAAWn+B,EAAQ7M,SAAStQ,EAAQ8P,QACpCqsC,EAAch/B,EAAQ7M,SAAS9N,EAAWsN,SAEzC+G,EAAYulC,GAAmBrzC,GAClCmzC,EAAOxlE,EAAKtG,MAAOsG,EAAKqH,MAAOu9D,EAAUa,GAAa,GAC1D,OAAOh/B,EAAQ9H,eAAe+mC,EAAiB1lE,EAAKqH,MAAO84B,KCGtD,MAAMwlC,GAAuC,CAClD/+B,WAAYg/B,mBACZ9+B,YAAa,QACbC,oBA7BEP,GAEF,MAAMzoB,OAACA,EAAM0oB,QAAEA,GAAWD,GACpBxmC,KAACA,EAAIspB,QAAEA,EAAOwC,WAAEA,GAAc/N,EACpC,GAAI/d,EAAKtG,MAAM+E,OAAS,EACtB,MAAM,IAAIhH,MACN,6DAEN,GAA6B,IAAzB6xB,EAAQ5vB,MAAM+E,OAChB,MAAM,IAAIhH,MAAM,+DACL6xB,EAAQ5vB,SAErB,GAAgC,IAA5BoyB,EAAWpyB,MAAM+E,OACnB,MAAM,IAAIhH,MAAM,mEACLq0B,EAAWpyB,SAGxB,MAAM8rE,EAAQ/+B,EAAQ7M,SAAS55B,EAAKo5B,QAC9BwrC,EAAWn+B,EAAQ7M,SAAStQ,EAAQ8P,QACpCqsC,EAAch/B,EAAQ7M,SAAS9N,EAAWsN,SAEzC+G,EAAYulC,GAAmBrzC,GAClCmzC,EAAOxlE,EAAKtG,MAAOsG,EAAKqH,MAAOu9D,EAAUa,GAC7C,OAAOh/B,EAAQ9H,eAAe+mC,EAAiB1lE,EAAKqH,MAAO84B,KCItD,MAAM0lC,GAAoC,CAC/Cj/B,WAAYk/B,gBACZh/B,YAAa,QACbC,oBA9B4BP,GAK5B,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3Bu/B,cAACA,EAAaC,aAAEA,EAAYr8C,aAAEA,GAAgB5L,GAC9C3U,YAACA,GAAe8W,GAEhB2G,UAACA,EAASw7C,WAAEA,EAAU/5D,QAAEA,EAAOkjB,WAAEA,GACnCtV,eAAaosD,gBAAgB0D,EAAcD,EAAe38D,GAGxD3J,EAAU,IAAIgiE,GAChBY,EAAYx7C,EAAWk/C,EAAcrsE,MAAM+E,OAC3CunE,EAAatsE,MAAM+E,OAAQ6J,EAAS,CAACkjB,EAAY,IAH9B,GAKjBlU,EAAMmvB,EAAQ9M,gBAChBl6B,EAAS,CAACumE,EAAcD,EAAep8C,GAAeq8C,EAAa3+D,OAEjEmtC,EACFrJ,GAAQ,CAACptB,OAAQ,CAACvI,EAAG8B,GAAMmvB,QAAAA,EAASvmB,MAAO,CAACxmB,MAAO0P,KAGvD,OADAq9B,EAAQ5M,8BAA8BviB,GAC/Bk9B,ICAF,MAAMyxB,GAA6B,CACxCr/B,WAAYs/B,SACZp/B,YAAa,QACbC,oBA3BEP,GAGF,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3BhxB,EAACA,GAAKuI,GACNooD,gBAACA,EAAe93C,KAAEA,GAAQnO,EAE1BoO,EAAQ10B,OAAK20B,eAAeF,EAAM7Y,EAAE9b,OAAO,GAC3C0sE,EAAalwD,eAAamwD,iBAAiB7wD,EAAG2wD,EAAiB73C,GAE/DJ,EAAQ1Y,EAAE9b,MAAM+E,OAChBkqB,EAAQ,IAAI3hB,MAAMknB,GAAO/D,KAAK,GAC9BxwB,EAAO6b,EAAE9b,MAAMwF,QAErB,OAAOknE,EAAWxnE,KAAI6Z,IACpB,MAAMqO,EAAY,IAAIntB,GACtBmtB,EAAUwH,GAAS7V,EACnB,MAAM6tD,EACFpnE,GAAM,CAAC6e,OAAQ,CAACvI,EAAAA,GAAIixB,QAAAA,EAASvmB,MAAO,CAACyI,MAAAA,EAAOhvB,KAAMmtB,KAEtD,OADA6B,EAAM2F,IAAU7V,EACT6tD,OCrBE7kD,GAAOsmB,GAAgB,CAACxQ,UAFxB,oBAIAgvC,GAA2B,CACtC3/B,WAAY4/B,OACZ1/B,YAAa,QACbC,WAAYtlB,ICJDglD,GAAS1+B,GAAgB,CAACxQ,UAFxB,kBAIFmvC,GAA6B,CACxC9/B,WAAY+/B,SACZ7/B,YAAa,QACbC,WAAY0/B,ICPRG,GAAqB,4BAEdC,GAAoBx+B,GAC7B,CAAC9Q,UAAWqvC,GAAoB5+B,gBAAiB4+B,KAExCE,GAAwC,CACnDlgC,WAAYmgC,oBACZjgC,YAAa,QACbC,WAAY8/B,ICOP,MAAMG,GAA2B,CACtCpgC,WAAYqgC,OACZngC,YAAa,QACbC,qBAhBEhpB,OAACA,EAAMmC,MAAEA,EAAKumB,QAAEA,IAGlB,MAAMjxB,EAACA,GAAKuI,EACNwZ,EAAgC,6DACLrX,EAAMrpB,cAGjC4I,EAAU,IAAI63B,GAAe9hB,EAAE9b,MAAO69B,GAE5C,OAAOkP,EAAQ9M,gBAAgBl6B,EAAS,CAAC+V,GAAIA,EAAEnO,eCbpC6/D,GAKX/9D,YAAYwf,EAAiBrgB,EAAmB3O,GAJhD0P,mBAAgB,CAAC,KAKfA,KAAKD,YAAczP,EACnB,MAAMyjB,EAAOzjB,EAAK8E,OACZ0oE,EAAa/uD,GAAkBze,EAAK8E,QACpC4I,EAAQ+Q,GAAkBze,EAAK8E,QAErC,IAAI2oE,EAAY,GAChB,GAAa,IAAThqD,EACFgqD,EAAY,+BACP,CACL,IAAIC,EAAa,EACjBD,EACIztE,EAAKiF,KAAI,CAAC8J,EAAG1J,KACPqoE,IACuB,IAAhB1tE,EAAK8E,OACR,oBAAoBO,cAAcA,KAClC,UAAUqoE,EAAa,gBAAgBroE,cAAcA,QAE1DK,KAAK,KAGhBgK,KAAKI,SAAW,WACZ09D,aAAsBA,KAAcx+C,cACpCw+C,eAAwBA,KAAc7+D,uCAGpCjB,yDACe+/D,uBCgClB,MAAME,GAAmC,CAC9C1gC,WAAY2gC,eACZzgC,YAAa,QACbC,oBA7D2BP,GAK3B,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3BhxB,EAACA,GAAKuI,GACN4K,MACJA,EAAK2D,IACLA,EAAGhkB,QACHA,EAAOk/D,UACPA,EAASC,QACTA,EAAOC,aACPA,EAAYC,YACZA,EAAWC,eACXA,GACE1nD,GAEE2nD,WAACA,EAAU5sB,OAAEA,EAAM6sB,SAAEA,EAAQnuE,KAAEA,EAAI8K,SAAEA,EAAQiT,SAAEA,GACjDmR,aAAWk/C,UACPvyD,EAAE9b,MAAOivB,EAAO2D,EAAKhkB,EAASk/D,EAAWC,EAASC,EAClDC,EAAaC,GAEfjzB,EAAKxJ,GAAQ,CAACptB,OAAQ,CAACvI,EAAAA,GAAIixB,QAAAA,EAASvmB,MAAO,CAACxmB,MAAO+K,KAEzD,IAAImM,EACJ,GAAIi3D,EAAY,CACd,MAAMlrB,EACFz9C,GAAM,CAAC6e,OAAQ,CAACvI,EAAGm/B,GAAKlO,QAAAA,EAASvmB,MAAO,CAACyI,MAAOsyB,EAAQthD,KAAAA,KAC5DiX,EAASu6B,GAAQ,CAACptB,OAAQ,CAACvI,EAAGmnC,GAASlW,QAAAA,EAASvmB,MAAO,CAACxmB,MAAOge,KAE/D+uB,EAAQ5M,8BAA8B8iB,QACjC,GAAIjlC,EAASswD,MAAK35C,GAAiB,IAATA,IAC/Bzd,EAAS61B,EAAQ9H,eAAejnB,EAAUlC,EAAEnO,MAAO,QAC9C,CAEL,GAD2Bo/B,EAAQtI,mBAAmB,CAACwW,IAC/B,CACtB,MACM10B,EADWwmB,EAAQpoB,QAAQxV,IAAI8rC,EAAGvb,QAChBnZ,OAClB8F,EAAO9lB,SAAO00C,EAAGj7C,MAAOi7C,EAAGttC,MAAO4Y,GAClCsF,EACFgN,GAAoB7a,EAAUqO,EAAM+hD,EAAU7sB,GAClDrqC,EAAS61B,EAAQ9H,eAAejnB,EAAUi9B,EAAGttC,MAAOke,EAAatF,YAC5D,CACL,MAAMxgB,EAAU,IAAIynE,GAAoBjsB,EAAQ6sB,EAAUpwD,GAC1D9G,EAAS61B,EAAQ9M,gBAAgBl6B,EAAS,CAACk1C,GAAKA,EAAGttC,QAIvD,MAAM4gE,EACF98B,GAAQ,CAACptB,OAAQ,CAACvI,EAAG5E,GAAS61B,QAAAA,EAASvmB,MAAO,CAACxmB,MAAOge,KAK1D,OAHA+uB,EAAQ5M,8BAA8B8a,GACtClO,EAAQ5M,8BAA8BjpB,GAE/Bq3D,IChCF,MAAMC,GAAmC,CAC9CthC,WAAYuhC,eACZrhC,YAAa,QACbC,oBA9B2BP,GAK3B,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3B3kB,UACJA,EAASC,YACTA,EAAWC,QACXA,EAAOjjB,SACPA,EAAQkjB,SACRA,EAAQC,uBACRA,GACE/B,GACElgB,KAACA,EAAI2sB,WAAEA,GAAc5O,EACrBynD,EAAQ/+B,EAAQ7M,SAAS55B,EAAKo5B,QAC9BgvC,EAAc3hC,EAAQ7M,SAASjN,EAAWyM,SAEzCtV,EAAQJ,GAAgB+O,GAC3B+yC,EAAO4C,EAAavmD,EAAWC,EAAaC,EAASjjB,EAAUkjB,EAC/DC,GACJ,MAAO,CACLwkB,EAAQ9H,eAAe,CAAC7a,EAAOrlB,QAAS,SAAUqlB,GAClD2iB,EAAQ9H,eAAehS,EAAWjzB,MAAO,QAASgqB,MCU/C,MAAM2kD,GAAkC,CAC7CzhC,WAAY0hC,cACZxhC,YAAa,QACbC,oBApC0BP,GAK1B,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3BriB,UAACA,GAAajE,GACdjC,MAACA,EAAKoG,UAAEA,GAAatG,EAE3B,GAAoB,WAAhBE,EAAM5W,MACR,MAAM,IAAI5P,MAAM,oCAElB,GAA2B,IAAvBwmB,EAAMvkB,MAAM+E,OACd,MAAM,IAAIhH,MAAM,sCAAsCwmB,EAAMvkB,SAE9D,GAA+B,IAA3B2qB,EAAU3qB,MAAM+E,OAClB,MAAM,IAAIhH,MACN,0CAA0C4sB,EAAU3qB,SAG1D,MAAM6uE,EAAS9hC,EAAQ7M,SAAS3b,EAAMmb,QAChCovC,EAAa/hC,EAAQ7M,SAASvV,EAAU+U,QAAQ,IAE/C9P,EAASrJ,EAAQvmB,GACpBi5B,GAAmB41C,EAAQC,EAAYrkD,GACrCqH,EAAavL,EAAOxhB,OAC1B,MAAO,CACLgoC,EAAQ9H,eAAe,CAACnT,EAAY,GAAI,QAASlC,GACjDmd,EAAQ9H,eAAe,CAACnT,GAAa,SAAUvL,GAC/CwmB,EAAQ9H,eAAe,CAAC,GAAI,QAAS,IAAIlQ,WAAW/0B,OCPjD,MAAM+uE,GAA6C,CACxD7hC,WAAY8hC,yBACZ5hC,YAAa,QACbC,oBAzBqCP,GAKrC,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3BrZ,WAACA,GAAcjN,GACfjC,MAACA,GAASF,EAEhB,GAAoB,WAAhBE,EAAM5W,MACR,MAAM,IAAI5P,MAAM,oCAElB,GAAI01B,GAAc,EAChB,MAAM,IAAI11B,MAAM,wCAGlB,MAAM8wE,EAAS9hC,EAAQ7M,SAAS3b,EAAMmb,QAEhCtxB,EAAS+qB,GAA8B01C,EAAQp7C,GACrD,OAAOsZ,EAAQ9H,eAAe1gB,EAAMvkB,MAAO,QAASoO,KClBzC6gE,GAAM5gC,GAAgB,CAACxQ,UAFxB,mBAICqxC,GAA0B,CACrChiC,WAAYiiC,MACZ/hC,YAAa,QACbC,WAAY4hC,ICHDG,GAAO/gC,GAAgB,CAACxQ,UALxB,yFAOAwxC,GAA2B,CACtCniC,WAAYoiC,OACZliC,YAAa,QACbC,WAAY+hC,UCVDG,GAMX9/D,YAAYsV,EAAkB8O,GAL9BlkB,mBAAgB,CAAC,KAMf,MAAMD,EAAwB,IAAIpC,MAAMyX,EAAOhgB,QAC/C,IAAK,IAAIO,EAAI,EAAGA,EAAIoK,EAAY3K,OAAQO,IACtCoK,EAAYpK,GAAKyf,EAAOzf,GAAKuuB,EAAKvuB,GAEpCqK,KAAKD,YAAcA,EACnBC,KAAK+T,KAAOhU,EAAY3K,OACxB,MAAM4I,EAAQ+Q,GAAkB/O,KAAK+T,MAC/B+W,EAWV,SAAyB1V,GACvB,MAAMrB,EAAOqB,EAAOhgB,OACpB,GAAI2e,EAAO,EACT,MAAM3lB,MAAM,iBAAiB2lB,0BAE/B,GAAa,IAATA,EACF,MAAO,eAAeqB,EAAO,MAG/B,MAAM0xC,EAAgB,CAAC,UAAW,UAAW,UAAW,UAAW,WAE7Dh8B,EAAe,GACrB,IAAK,IAAIn1B,EAAI,EAAGA,EAAIyf,EAAOhgB,OAAQO,IACjCm1B,EAAaxe,KAAK,QAAQw6C,EAAcnxD,OAAOyf,EAAOzf,OAExD,OAAOm1B,EAAa90B,OA1BGu4B,CAAgBnZ,GAErCpV,KAAKI,SAAW,kCAEVpC,wDACe8sB,gCChBT+0C,GACZntD,GAEF,MAAMgC,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASnE,GAC3BvG,EAACA,GAAKuI,GACNwP,KAACA,GAAQrN,EAGf,GAAgB,WAAZ1K,EAAEnO,OAAsBmO,EAAE9b,MAAM+E,OAAS,EAAG,CAG9C,MAAMuB,EAAOymC,EAAQ7M,SAASpkB,EAAE4jB,QAC1BjW,EAAoB,WAAZ3N,EAAEnO,MACXrH,EAAsBpB,KAAIyF,GAAKzK,OAAK4hC,aAAan3B,KAClDrE,EACEmpE,EAAMlpE,SAAOuV,EAAE9b,MAAO8b,EAAEnO,MAAO8b,GAC/BgD,EAAS6M,GAAYm2C,EAAK57C,GAChC,OAAOkZ,EAAQ9H,eAAexY,EAAOzsB,MAAOysB,EAAO9e,MAAO8e,EAAOlG,QAGnE,MAAMxgB,EAAU,IAAIwpE,GAAYzzD,EAAE9b,MAAO6zB,GAGzC,OAFekZ,EAAQ9M,gBAAgBl6B,EAAS,CAAC+V,GAAIA,EAAEnO,OAKlD,MAAM+hE,GAA2B,CACtCxiC,WAAYyiC,OACZviC,YAAa,QACbC,WAAYmiC,UCxBDI,GAoBXngE,YAAYzP,GAnBZ2P,mBAAgB,CAAC,IAAK,WAOtBA,oBAAiB,CACf,CAACoN,KAAM,IAAKM,KAAM,OAClB,CAACN,KAAM,YAAaM,KAAM,OAC1B,CAACN,KAAM,cAAeM,KAAM,SAC5B,CAACN,KAAM,MAAOM,KAAM,OACpB,CAACN,KAAM,MAAOM,KAAM,QAQpB1N,KAAKD,YAAc1P,EAEnB2P,KAAKI,SAAW,8xDA4CP8/D,GAiBXpgE,YAAYzP,GAhBZ2P,mBAAgB,CAAC,IAAK,WAOtBA,oBAAiB,CACf,CAACoN,KAAM,IAAKM,KAAM,OAClB,CAACN,KAAM,YAAaM,KAAM,OAC1B,CAACN,KAAM,IAAKM,KAAM,QAOlB1N,KAAKD,YAAc1P,EAEnB2P,KAAKI,SAAW,2wDCxFpB,SAAS+/D,GACL/iC,EAA2BlN,GACV,OAAfA,GACFkN,EAAQ5M,8BAA8BN,GAI1C,SAASkwC,GAAcntE,GACrB,IAAIotE,EAAO,EACX,KAAOA,EAAOptE,GACZotE,GAAQ,EAEV,OAAOA,EAqJF,MAAMC,GAA2B,CACtC/iC,WAAYgjC,OACZ9iC,YAAa,QACbC,oBAlJEP,GAEF,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3BhxB,EAACA,GAAKuI,GACN+G,EAACA,EAAC0I,OAAEA,GAAUtN,EAId2pD,EACF5uE,QAAMC,UAAU,4CAId4uE,EACF7uE,QAAMC,UAAU,gCAEd8sB,EAASxS,EAAE9b,MACX+zB,EAAUzF,EAAOA,EAAOvpB,OAAS,GAEvC,GAAIgoC,EAAQtI,mBAAmB,CAAC3oB,KAC5BiY,EAAUo8C,GACV/kD,EAAIglD,EAA8B,CACpC,MAAMtkD,EAAQihB,EAAQ7M,SAASpkB,EAAE4jB,SAC1B1L,EAAaC,GAChBuF,GAAY1N,EAAOwC,EAAQxS,EAAEnO,MAA0Byd,EAAG0I,GAE9D,MAAO,CACLiZ,EAAQ9H,eACJjR,EAAYh0B,MAAOg0B,EAAYrmB,MAAOqmB,EAAYzN,QACtDwmB,EAAQ9H,eACJhR,EAAej0B,MAAOi0B,EAAetmB,MAAOsmB,EAAe1N,SAInE,GAAU,IAAN6E,EAEF,OADAkD,EAAOA,EAAOvpB,OAAS,GAAK,EACrB,CACLgoC,EAAQ9H,eAAe3W,EAAQxS,EAAEnO,MAAO,IACxCo/B,EAAQ9H,eAAe3W,EAAQ,QAAS,KAI5C,GAAgB,IAAZyF,EACF,MAAO,CACLjY,EAAG2U,GAAK,CAACjK,MAAO,CAACxmB,MAAOsuB,EAAQ3gB,MAAO,QAAS8b,MAAO,GAAIsjB,QAAAA,KAM/D,MAAMsjC,EAAWtjC,EAAQpoB,QAAQxV,IAAI2M,EAAE4jB,QACjC4wC,EAAyB,OAAbD,GAAqBA,EAAS5lE,SAC1C8lE,EAAYD,EAAYvjC,EAAQ3G,aAAatqB,GAAKA,EAIlDrH,EADQvU,OAAKC,cAAcmuB,GACXyF,EAChBy8C,EAAM/+B,GACR,CAACptB,OAAQ,CAACvI,EAAGy0D,GAAY/pD,MAAO,CAACxmB,MAAO,CAACyU,EAAOsf,IAAWgZ,QAAAA,IAE3DujC,GACFR,GAAoC/iC,EAASwjC,GAG/C,MAAME,EAAQV,GAAc3kD,GACtBslD,EAAcX,GAAch8C,GAMlC,IAAInE,EAAsB,KAK1B,MAAM+gD,EAAY,IAAkB,OAAZ/gD,EAAmB,CAAC4gD,EAAKA,GAAO,CAACA,EAAK5gD,GAExDghD,EAAU,CAACC,EAAaC,EAAa9wE,KACzC,MAAMqkB,EAASssD,IACT5qE,EAAU,IAAI6pE,GAAY5vE,GAE1B2hD,EACF,CAAC,CAAC5tB,GAAU,CAFa,OAAZnE,EAAmB,EAAI,GAEZ,CAACxB,OAAO2iD,mBAAoB,CAACF,GAAM,CAACC,IAC1DE,EAAcphD,EACpBA,EAAUmd,EAAQ9M,gBAAgBl6B,EAASse,EAAQ,QAASs9B,GAC5DmuB,GAAoC/iC,EAASikC,IAI/C,IAAK,IAAIC,EAAM,EAAGA,EAAMR,EAAOQ,GAAO,EAAG,CACvC,MAAMJ,EAAY,EAANI,EACZ,IAAK,IAAIH,EAAMG,EAAKH,GAAO,EAAGA,GAAO,EACnCF,EAAQC,EAAKC,EAAK,CAACr8D,EAAOi8D,IAK9B,IAAK,IAAI3Z,EAAc2Z,EAAa3Z,EAAc0Z,EAAO1Z,GAAe,EAAG,CACzE,MAAM1yC,EAASssD,IACTO,EAAe,IAAIrB,GAAa,CAACp7D,EAAOsiD,EAAc,IAEtDpV,EAAe,CAAC,CAAC5tB,GAAU,CADH,OAAZnE,EAAmB,EAAI,GACK,CAAC6gD,IACzCO,EAAcphD,EACpBA,EACImd,EAAQ9M,gBAAgBixC,EAAc7sD,EAAQ,QAASs9B,GAC3DmuB,GAAoC/iC,EAASikC,GAG7C,MAAMC,EAAMR,EAAQ,EACdI,EAAY,EAANI,EACZ,IAAK,IAAIH,EAAMG,EAAKH,GAAO,EAAGA,GAAO,EACnCF,EAAQC,EAAKC,EAAKlhD,EAAQ5vB,OAK9B,IAAIgxE,EAAcphD,EAClBA,EAAUpqB,GACN,CAAC6e,OAAQ,CAACvI,EAAG8T,GAAUmd,QAAAA,EAASvmB,MAAO,CAACyI,MAAO,EAAGhvB,KAAM,CAACwU,EAAO2W,MACpE0kD,GAAoC/iC,EAASikC,GAG7C,IAAIzqD,EAASmwC,GACT,CAACryC,OAAQ,CAACvI,EAAG00D,EAAK5gD,QAAAA,GAAUmd,QAAAA,EAASvmB,MAAO,CAACmO,KAAM,EAAGgiC,UAAW,KACrEmZ,GAAoC/iC,EAASyjC,GAI7C,MAAMzlE,EAAWujB,EAAO9oB,MAAM,GAAI,GAClCuF,EAASkR,KAAKmP,GAEd4lD,EAAcphD,EACdA,EAAU6hB,GAAQ,CAACptB,OAAQ,CAACvI,EAAG8T,GAAUpJ,MAAO,CAACxmB,MAAO+K,GAAWgiC,QAAAA,IACnE+iC,GAAoC/iC,EAASikC,GAE7C,MAAMG,EAAa5qD,EAInB,OAHAA,EAASkrB,GAAQ,CAACptB,OAAQ,CAACvI,EAAGyK,GAASC,MAAO,CAACxmB,MAAO+K,GAAWgiC,QAAAA,IACjE+iC,GAAoC/iC,EAASokC,GAEtC,CAAC5qD,EAAQqJ,WCtKLwhD,GAKX3hE,YACIy7C,EAAqBC,EACrBkmB,EACAC,EAAiDtK,EACjDhpD,GARJrO,mBAAgB,CAAC,QAAS,cASxBA,KAAKD,YAAcsO,EACnB,MAAMuzD,EAAwC,YAAlBF,EAA8B,EAAI,EAC9D,IAAIG,EACJ,OAAQF,GACN,IAAK,WACHE,EAAa,EACb,MACF,IAAK,UACHA,EAAa,EACb,MACF,IAAK,OACHA,EAAa,EACb,MACF,IAAK,UACHA,EAAa,EACb,MACF,QACEA,EAAa,EAGjB7hE,KAAKI,SAAW,wHAGDyhE,m9BAwBQA,4qBAiBAA,qVAWnBtmB,gCAA0CC,gJAGZ6b,o7BAwBAA,yNAIa7b,0DACAD,+BAE7BqmB,4nCC/Ff,MAAME,GAAgC,CAC3CvkC,WAAYwkC,YACZtkC,YAAa,QACbC,oBAxBwBP,GAKxB,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3Bof,MAACA,EAAKylB,WAAEA,GAActtD,GACtBgtD,cAACA,EAAaC,SAAEA,EAAQtK,UAAEA,EAASt3D,YAAEA,GAAe8W,GAEnD/R,EAAOy2C,EAAaC,EAAY2J,GAAe5I,EAAMlsD,OACrDk/C,EAAWC,GACC,MAAfzvC,EAAsBA,EAAc,CAACw7C,EAAaC,GAKhDplD,EAAU,IAAIqrE,GAChBlmB,EAAaC,EAAYkmB,EAAeC,EAAUtK,EAJlD,CAACvyD,EAAOyqC,EAAWC,EAClB2V,IAIL,OAAO/nB,EAAQ9M,gBAAgBl6B,EAAS,CAACmmD,EAAOylB,GAAa,aCKxD,MAAMC,GAA6B,CACxC1kC,WAAY2kC,SACZzkC,YAAa,QACbC,oBAxBEP,GAGF,MAAMzoB,OAACA,EAAMmC,MAAEA,EAAKumB,QAAEA,GAAWD,GAC3BnY,KAACA,GAAQnO,GACT1K,EAACA,GAAKuI,EACZlX,GAAiB2O,EAAG,UAGpBpd,QAAQsX,KACJ,YACA,8DACJ,MAAMuQ,EAASwmB,EAAQ7M,SAASpkB,EAAE4jB,SAC5B7O,aAACA,EAAYnhB,YAAEA,EAAWkgB,QAAEA,GAC9BgK,GAAcrT,EAAQoO,EAAM7Y,EAAE9b,MAAO8b,EAAEnO,OAC3C,MAAO,CACLo/B,EAAQ9H,eAAev1B,EAAaoM,EAAEnO,MAAOkjB,GAC7Ckc,EAAQ9H,eAAe,CAACrV,EAAQ7qB,QAAS,QAAS6qB,MC2B/C,MAAMkiD,GAA6B,CACxC5kC,WAAY6kC,SACZ3kC,YAAa,QACbC,oBA9CEP,GAGF,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3BrjB,MAACA,GAASpF,EAChB,IAAIsQ,KAACA,GAAQnO,EAETmO,EAAO,IACTA,GAAQlL,EAAMzpB,MAAM+E,QAGtB,MAAM+W,EAAI2N,EACJ+K,EAAQ1Y,EAAE9b,MAAM+E,OAEhBnC,EAAM6mB,EAAMzpB,MAAM20B,GAClB3W,EAAqB,IAAI1Q,MAAMknB,EAAQ,GAC7C,IAAI1B,EAAW,EACf,IAAK,IAAIxtB,EAAI,EAAGA,EAAIkvB,EAAOlvB,IACrBA,IAAMqvB,IACR3W,EAAS8U,KAAchX,EAAE9b,MAAMsF,IAInC,MAAMu9C,EAAY,GAEZ5zB,EAAQ,IAAI3hB,MAAMknB,GAAO/D,KAAK,GAC9BxwB,EAAO6b,EAAE9b,MAAMwF,QACrBvF,EAAK00B,GAAQ,EACb,MAAM/W,EAAoB,IAAItQ,MAAM1K,GACpC,IAAK,IAAI0C,EAAI,EAAGA,EAAIsY,EAAI7Y,OAAQO,IAAK,CACnC2pB,EAAM0F,GAAQrvB,EACd,MAAM29C,EAASz9C,GAAM,CAAC6e,OAAQ,CAACvI,EAAAA,GAAIixB,QAAAA,EAASvmB,MAAO,CAACyI,MAAAA,EAAOhvB,KAAAA,KACrD66C,EACFrJ,GAAQ,CAACptB,OAAQ,CAACvI,EAAGmnC,GAASlW,QAAAA,EAASvmB,MAAO,CAACxmB,MAAOge,KAC1DJ,EAAItY,GAAKw1C,EAET+H,EAAU5mC,KAAKgnC,GAIjB,OADAJ,EAAUr1C,SAAQC,GAAKs/B,EAAQ5M,8BAA8B1yB,KACtDmQ,UC7CIo0D,GAKXviE,YACIwiE,EACAC,GANJviE,mBAAgB,CAAC,IAAK,cAOpB,MAAMwiC,EAAa8/B,EAAU9/B,WACvBhf,EAAY8+C,EAAU9+C,UACtBvP,EAASquD,EAAUruD,OACnBuuD,EAAcF,EAAUE,YACxB//B,EAAU+/B,EAAc9xE,KAAKC,KAAKsjB,EAASuuB,GACjDxiC,KAAKD,YAAc,CAACyjB,EAAWif,GAE/B,MAGMC,EAAqD,EAA7BhyC,KAAK6mB,MAAMirB,EAAa,GAChDG,EAA0BH,EAAa,EAEvCI,EAAgB,sDAItB,IAAI6/B,EAAwB,GACxBxuD,EAASuuB,EAAa,IACxBigC,EAAwB,uCACMxuD,kEAMhC,IAAIyuD,EAA4B,GAC5BzuD,EAASuuB,EAAa,IACxBkgC,EAA4B,uCACEzuD,mDAMhCjU,KAAKI,SAAW,2GAIVqiE,2GAKAC,2PASEF,eAAyBhgC,+DACmBggC,yEAI1B9/B,2lBAgBlBE,kDAGqBF,mBACS,IAA5BC,8aAiBFC,yBACqC,IAA5BD,obAeTC,yBACqC,IAA5BD,+eAeTC,6DC9CL,MCwED+/B,GAAgC,CACpCpY,GACAI,GACAljB,GACAE,GACAG,GACAG,GACAK,GACAQ,GACAS,GACAI,GACAyB,GACAG,GACAG,GACAG,GACAO,GACAJ,GACAO,GACA0C,GACAR,GACAmB,GACAI,GACAE,GACAW,GACAyB,GACAiB,GACAQ,GACAU,GACAI,GACAQ,GACAtX,GACAoZ,GACA4C,GACAE,GACAb,GACAkB,GACAE,GACAL,GACAS,GACAG,GACAsB,GACAW,GACAQ,GACAU,GACAuB,GACAE,GACAP,GACAU,GACAI,GACAG,GACAqB,GACAE,GACAG,GACAS,GACAG,GACAG,GACAG,GACAe,GACAI,GACAG,GACAG,GACAG,GACAI,GACAY,GACAE,GACAO,GACAiB,GACAG,GACAG,GACAvqB,GACAyqB,GACA5R,GACA+R,GACAG,GACAE,GACApqB,GACAuqB,GACAG,GACAE,GACAK,GACAH,GACAM,GACAG,GACAG,GACAqB,GACAQ,GACAH,GACAO,GACAK,GACAK,GACAnB,GACAwB,GACAO,GACAG,GACAU,GACAG,GACAsB,GACA9tB,GACAouB,GACAG,GACAU,GACAK,GACAvd,GACAke,GACAK,GACAG,GACAU,GACAG,GACA10B,GACA40B,GACAG,GACA1f,GACA6a,GACAgF,GACAM,GACAH,GACA1xB,GACA0yB,GACAe,GACAK,GACAG,GACAa,GACAM,GACAQ,GACAG,GACAW,GACAY,GACAK,GACAG,GACAE,GACAE,GACAG,GACApoB,GACAod,GACAmL,GACAE,GACAQ,GACAO,GACAK,GACAK,GACAE,GACAI,GACAM,GACAG,GACAI,GACAE,GACAM,GACAY,GACAG,GACAI,GACArQ,GACAzpB,GACAi6B,GACAG,GACAK,GACAO,GACAwB,GACAp8B,GACAu8B,GACAE,GDvOoD,CACpD5kC,WAAYqlC,qBACZnlC,YAAa,QACbC,oBArFiCP,GAKjC,MAAMzoB,OAACA,EAAM0oB,QAAEA,EAAOvmB,MAAEA,GAASsmB,GAC3BhxB,EAACA,EAACsW,WAAEA,GAAc/N,GAClB8tD,YAACA,GAAe3rD,EAEhBgO,EAAQ1Y,EAAE9b,MAAM+E,OAEhB89C,EAAY,GAElB,IAAIluB,EAAO,EACX,MAAMk4B,EAAcrwC,eAAa83B,mBAAmB,CAAC3f,GAAOH,GAC5D,IAAI4kB,EAAYt9B,EACG,MAAf+wC,IACFzT,EAAYjE,GAAU,CAAC9wB,OAAQ,CAACvI,EAAAA,GAAIixB,QAAAA,EAASvmB,MAAO,CAAC+N,KAAMs4B,KAC3DhK,EAAU5mC,KAAKm9B,GACfzkB,EAAOnY,eAAai4B,iBAAiB,EAAGjgB,GAAO,IAGjD,MAAMxW,EAAWxB,eAAaq6C,aAAazR,gBACvChM,EAAUp5C,MAAO20B,EAAMw9C,GACrBvuD,EAAS1jB,OAAKC,cAAc,CAACi5C,EAAUp5C,MAAM20B,KAC7C0kB,EACF5H,GAAQ,CAACptB,OAAQ,CAACvI,EAAGs9B,GAAYrM,QAAAA,EAASvmB,MAAO,CAACxmB,MAAO,EAAE,EAAG4jB,MAClEi/B,EAAU5mC,KAAKo9B,GAEf,MAAMm5B,EAAcz9B,aAAWj5B,EAAEnO,OAE3B8kE,EACF,CAAC32D,EAAeo2D,EAAiC9/C,EAChDzkB,EAAiBwkE,KAChB,MAAMh/C,EAAYrX,EAAE9b,MAAM,GACpB4jB,EAAS9H,EAAE9b,MAAM,GACjBmyC,EACF31B,eAAaq6C,aAAa6b,8BACtB9uD,EAAQuuD,GAEVpsE,EAAU,IAAIisE,GADF,CAAC7/B,WAAAA,EAAYvuB,OAAAA,EAAQuP,UAAAA,EAAWg/C,YAAAA,GACFD,GAC1C9jE,EAAS2+B,EAAQxI,cAAcx+B,EAAS,CAAC+V,EAAGsW,GAAazkB,GAG/D,GAFAk1C,EAAU5mC,KAAK7N,GAEXA,EAAOpO,MAAM,KAAOmyE,EACtB,OAAO/jE,EAET,MAAMukE,EAAY1P,GAAM,CACtBl2B,QAAAA,EACAvmB,MAAO,CAACwH,MAAO,EAAGC,KAAMkkD,EAAajkD,KAAM,EAAGvgB,MAAO,aAEjDilE,EAAWpD,GAAK,CACpBnrD,OAAQ,CAACvI,EAAG62D,GACZ5lC,QAAAA,EACAvmB,MAAO,CAACqN,KAAM,CAACjQ,EAASuuB,MAG1B0Q,EAAU5mC,KAAK02D,GACf9vB,EAAU5mC,KAAK22D,GAIf,OADIH,EAAarkE,EAAQ8jE,EAAWU,EAAUjlE,EAAOwkE,IAOrDr3B,EACFrJ,GAAQ,CAACptB,OAAQ,CAACvI,EAJF22D,EAChBp5B,EAAK,qBAAsBjnB,EAAYogD,EAAaL,IAGjBplC,QAAAA,EAASvmB,MAAO,CAACxmB,MAAOge,KAE/D,IAAI9G,EAAS4jC,EACb,GAAmB,MAAf+R,EAAqB,CACvBhK,EAAU5mC,KAAK6+B,GACf,MAAMvmB,EAAO/X,eAAa0wC,uBAAuBL,GACjD31C,EAASi+B,GAAU,CAAC9wB,OAAQ,CAACvI,EAAG5E,GAAS61B,QAAAA,EAASvmB,MAAO,CAAC+N,KAAAA,KAI5D,OADAsuB,EAAUr1C,SAAQC,GAAKs/B,EAAQ5M,8BAA8B1yB,KACtDyJ,IC4OPyqD,IAGF,IAAK,MAAMkR,KAAgBP,GACzBQ,iBAAeD,mHCvVD"}