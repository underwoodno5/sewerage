{"version":3,"file":"flip_left_right_test.js","sourceRoot":"","sources":["../../../src/ops/image/flip_left_right_test.ts"],"names":[],"mappings":"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,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;YACxE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;YACzE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG;YACzE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;YACzE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;YACzE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;YACzE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;YACzE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;YACzE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;YACzE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;YACzE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,EAAE;YACxE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG;YACzE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG;YACzE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG;YACzE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;YACvE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAI,GAAG,EAAE,GAAG,EAAE,GAAG;YACzE,CAAC,EAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAI,GAAG,EAAE,GAAG;YACzE,GAAG;SACJ,CAAC;QAEF,iBAAiB,CAAC,QAAQ,EAAE,iBAAiB,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {getTestImageAsTensor4d} from '../../image_test_util';\nimport * as tf from '../../index';\nimport {ALL_ENVS, describeWithFlags} from '../../jasmine_util';\nimport {expectArraysClose} from '../../test_util';\n\ndescribeWithFlags('flipLeftRight', ALL_ENVS, () => {\n  it('should flip (1x2x2x4)', async () => {\n    const image: tf.Tensor4D = tf.tensor([\n      // batch 1\n      [\n        // row 1\n        [\n          [1, 2, 3, 255],\n          [4, 5, 6, 255],\n        ],\n        // row 2\n        [\n          [7, 8, 9, 255],\n          [10, 11, 12, 255],\n        ],\n      ],\n    ]);\n    const flipped = tf.image.flipLeftRight(image);\n    expectArraysClose(\n        [4, 5, 6, 255, 1, 2, 3, 255, 10, 11, 12, 255, 7, 8, 9, 255],\n        await flipped.data());\n  });\n\n  it('should flip (2x2x2x4)', async () => {\n    const image: tf.Tensor4D = tf.tensor([\n      // batch 1\n      [\n        // row 1\n        [\n          [1, 2, 3, 255],\n          [4, 5, 6, 255],\n        ],\n        // row 2\n        [\n          [7, 8, 9, 255],\n          [10, 11, 12, 255],\n        ],\n      ],\n      // batch 2\n      [\n        // row 1\n        [\n          [101, 102, 103, 255],\n          [104, 105, 106, 255],\n        ],\n        // row 2\n        [\n          [107, 108, 109, 255],\n          [110, 111, 112, 255],\n        ],\n      ],\n    ]);\n    const flipped = tf.image.flipLeftRight(image);\n    expectArraysClose(\n        [\n          // batch 1\n          ...[4, 5, 6, 255, 1, 2, 3, 255, 10, 11, 12, 255, 7, 8, 9, 255],\n          // batch 2\n          ...[104, 105, 106, 255, 101, 102, 103, 255, 110, 111, 112, 255, 107,\n              108, 109, 255],\n        ],\n        await flipped.data());\n  });\n\n  it('should flip (from image)', async () => {\n    const flippedPixels =\n        tf.image.flipLeftRight(getTestImageAsTensor4d()).toInt();\n    const flippedPixelsData = await flippedPixels.data();\n\n    const expected = [\n      230, 133, 18,  255, 241, 153, 43,  255, 224, 156, 55,  255, 212, 157, 75,\n      255, 200, 155, 98,  255, 183, 138, 109, 255, 171, 120, 117, 255, 156, 100,\n      111, 255, 233, 148, 31,  255, 250, 177, 64,  255, 241, 188, 82,  255, 230,\n      193, 104, 255, 220, 190, 128, 255, 202, 174, 137, 255, 186, 152, 140, 255,\n      168, 129, 130, 255, 222, 164, 41,  255, 247, 201, 81,  255, 243, 220, 106,\n      255, 235, 227, 128, 255, 225, 228, 151, 255, 211, 216, 162, 255, 199, 198,\n      168, 255, 179, 176, 159, 255, 191, 170, 61,  255, 218, 210, 103, 255, 213,\n      230, 126, 255, 201, 236, 142, 255, 191, 239, 165, 255, 184, 234, 181, 255,\n      179, 226, 194, 255, 163, 208, 187, 255, 135, 166, 86,  255, 162, 206, 127,\n      255, 155, 226, 146, 255, 141, 232, 162, 255, 130, 235, 179, 255, 121, 231,\n      192, 255, 119, 226, 206, 255, 108, 214, 202, 255, 71,  143, 97,  255, 98,\n      181, 135, 255, 94,  206, 156, 255, 87,  220, 175, 255, 76,  225, 193, 255,\n      64,  219, 201, 255, 62,  217, 213, 255, 55,  207, 212, 255, 15,  115, 105,\n      255, 39,  150, 141, 255, 37,  177, 164, 255, 35,  200, 186, 255, 30,  209,\n      205, 255, 19,  203, 211, 255, 19,  204, 222, 255, 18,  200, 224, 255, 0,\n      102, 113, 255, 6,   133, 140, 255, 3,   158, 162, 255, 4,   182, 186, 255,\n      0,   194, 204, 255, 0,   189, 209, 255, 0,   192, 221, 255, 0,   193, 228,\n      255\n    ];\n\n    expectArraysClose(expected, flippedPixelsData);\n  });\n});\n"]}